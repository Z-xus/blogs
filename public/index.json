[{"content":" Finance for noobs I come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\nDisclaimer This content is primarily relevant to India and sometimes US markets. The content here is purely for educational purposes. This is not financial advice.\nStocks Stock is basically ownership of a company.\nUsual ways that people make profit from a stock is:\nPrice appreciation: you bought it for 100 rupees, sold for 200. profit of 100 in your pocket. Dividends: company gives out profits to all owners yearly or so. But this is upto company whether they want to give away or not. Mutual Funds I growed up watching mutual funds advertisements many times, never really understood what they meant.\nA very common example used to explain it is a basket of stocks. However, I think most simple way to explain it is:\nIt is a collection of different stock (and stock like stuff). Reason for it to be a collection is so that risk is reduced.\nThis is done because investing solely in a single company is very high risk. What if one day there is some negative PR, and company stock hits rock bottom. Investing little bit in many companies will save u from this loss because profit of some other place can help you.\nYou will hear a popular saying, \u0026ldquo;Don\u0026rsquo;t put all your eggs in one basket.\u0026rdquo; This is what they\u0026rsquo;re talking about.\nPortfolio of a fund means which stocks they have in their collection. But your portfolio means what all of the investments you are holding.\nOne more thing u will hear is that there are stock market index funds. Think of these also as a collection of stocks.\nIn india we have two main stock indices:\nNifty-50: Top 50 companies in National Stock Exchange (NSE) Sensex: Top 30 companies in Bombay Stock Exchange (BSE) A Stock exchange is basically a place where people can sell or buy stocks under some party like Govt monitoring them. Governments try to keep regulations in place so that people don\u0026rsquo;t misbehave.\nAn index is actually not a mutual fund. It is just a public list for people to know how market is doing overall.\nAny mutual fund can mimic the index. So it means they keep their investments only in Nifty 50 for example. These mutual funds are called an Index fund or ETFs.\nNow you may wonder, why they are called \u0026ldquo;mutual\u0026rdquo; funds. What happens is that many people buy a mutual fund in bulk/pool.\nSo mutual means collective ownership/sharing. This means profits and losses are equally shared among all the investors.\nWho does this?\nFunds are managed by Asset Management Companies (AMC). They have their fund managers who speculate the market for returns. Since they\u0026rsquo;re doing the heavy lifting of market research and you are just putting money in, they charge you a premium.\nThis premium is called as \u0026ldquo;Expense ratio\u0026rdquo;. A 1% expense ratio means on investing 100 rupees, you have to pay 1 rupee to the AMC every year. Lastly, you will hear types of mutual funds:\nSmall cap: invest mostly in small scale companies, high risk, high reward. Mid cap: invest mostly in medium scale companies, quite stable, medium risk, medium reward. Large cap: invest mostly in large scale companies, low risk, low reward. so, in short, small scale startups can fail easily and if they boom, they reward generously too and large scale companies stock price is table so not much amount of profit, but the stock price won\u0026rsquo;t be bouncing up and down too much.\nMetrics CAGR So if you looked at any ads for mututal funds, you must have seen a metric called CAGR.\nFull form: Compound Annual Growth Rate. Basically, it is avg growth rate on a yearly basis. Growth means how much your investment increased in value. Like buying a Tata stock which was 100 rupees now became 200, so it is 100% growth.\nLet\u0026rsquo;s say u bought a mutual fund with a CAGR of 30%. But you don\u0026rsquo;t know if the fund was really lucky that one year it growed by 150% and rest of the time with 10%.\nThe problem with only looking at one metric is that you will lose insight on other important stuff. Think of it like you need to have an idea of the bigger picture of the market to make profit consistently.\nThere are a lot of metrics like:\nSharpe ratio Sharpe is basically the ratio of return over risk. So you for example, you are given two choices of buy a house.\nHouse A will give you 100% returns i.e. double the investment. It\u0026rsquo;s a very nice sea-faced apartment. House B will give you 10% returns.\nYou would buy House A, seems like a no-brainer.\nBut if something happens one day like a tsunami or something, House A will be washed way in it. So you have the risk of losing entire investment you put in. House B is in reletively safe area, no earthquakes, no natural disasters.\nWould you still buy house A now?\nSo this is what return to risk ratio does. You know how much returns you can make but you also need to know how safe investment it is.\nBeta Measures the volatility (how much a stock jumps up or down) compared to market.\nβ = 1 → moves with market β \u0026gt; 1 → more volatile than market β \u0026lt; 1 → less volatile than market β \u0026lt; 0 → moves opposite to market Capture ratio Financial Assets So I\u0026rsquo;ve been talking about stocks all the way. But there are also more types of it which are different but they work in same manner. But I think for today, just have a short overview on what they are:\n1. Equity / Stocks Ownership in a company. Profit from price appreciation and dividends. 2. Debt / Bonds Lending money to government or corporations. Earn fixed interest (aka coupon). Quite low risk, therefore low returns. 3. Cash \u0026amp; Cash Equivalents Bank deposits (like Fixed Deposits), money market instruments, treasury bills. Very low risk, highly liquid. 4. Derivatives Financial contracts whose value depends on an underlying asset. Examples: Futures, Options, Swaps. 5. Mutual Funds \u0026amp; ETFs Pooled investments in a mix of stocks, bonds, or other assets. Diversified risk. 6. Commodities Physical goods like gold, silver, oil, agricultural products. Can be invested via commodity ETFs or futures. 7. Real Estate / Property Residential, commercial, or land. Can generate rental income and capital gains. 8. Alternative Investments Hedge funds, private equity, crypto, collectibles. Typically higher risk, lower liquidity. ","permalink":"http://localhost:1313/posts/fin-for-noobs/","summary":"\u003chr\u003e\n\u003ch1 id=\"finance-for-noobs\"\u003eFinance for noobs\u003c/h1\u003e\n\u003cp\u003eI come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content is primarily relevant to India and sometimes US markets.\nThe content here is purely for educational purposes.\n\u003cstrong\u003eThis is not financial advice.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"stocks\"\u003eStocks\u003c/h2\u003e\n\u003cp\u003eStock is basically ownership of a company.\u003c/p\u003e\n\u003cp\u003eUsual ways that people make profit from a stock is:\u003c/p\u003e","title":"Finance for Noobs"},{"content":"Huffman Coding Huffman Coding is a popular algorithm used for data compression. It was developed by David A. Huffman in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\nTable of Contents Introduction How Huffman Coding Works Example of Huffman Coding Decoding with Huffman Code Advantages of Huffman Coding Applications of Huffman Coding Limitations of Huffman Coding Introduction Huffman Coding is a lossless compression algorithm, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\nHow Huffman Coding Works Step-by-Step Process Frequency Calculation:\nCount the frequency of each character in the data. Create Leaf Nodes:\nFor each character, create a leaf node containing its frequency and value. Build a Priority Queue:\nInsert all leaf nodes into a priority queue (or min-heap), sorted by frequency (smallest frequency at the top). Construct the Huffman Tree:\nRepeat the following until only one node remains in the priority queue: Extract the two nodes with the lowest frequency. Create a new node with a frequency equal to the sum of these two nodes. Set the two extracted nodes as the left and right children of the new node. Insert the new node back into the priority queue. The last remaining node is the root of the Huffman Tree. Assign Codes:\nTraverse the Huffman Tree from the root to each leaf node. Assign a binary 0 for each left edge and 1 for each right edge. The path to each character forms its Huffman Code. Example of Huffman Coding Consider the following example data:\nCharacter Frequency A 5 B 9 C 12 D 13 E 16 F 45 Step 1: Build the Huffman Tree Start with individual nodes sorted by frequency. Merge nodes with the lowest frequencies until only one node remains. The process would look like this:\nCombine A (5) and B (9) → New Node (14) Combine C (12) and D (13) → New Node (25) Combine New Node (14) and E (16) → New Node (30) Combine New Node (25) and F (45) → New Node (70) Combine New Node (30) and New Node (70) → Final Root (100) Step 2: Assign Codes After constructing the Huffman Tree, assign binary codes based on the path to each character:\nCharacter Huffman Code A 1100 B 1101 C 100 D 101 E 111 F 0 Result: The character with the highest frequency (F) has the shortest code (0), and characters with lower frequencies have longer codes.\nEncoding Example If we encode the string ABCD, it would be:\nA → 1100 B → 1101 C → 100 D → 101 Encoded string: 11001101100101\nDecoding with Huffman Code Decoding is performed by traversing the Huffman Tree:\nStart at the root. For each 0, move left; for each 1, move right. When a leaf node is reached, add the character to the output. Return to the root and repeat until the entire encoded string is decoded. Advantages of Huffman Coding Lossless Compression: No data is lost during compression. Efficiency: Saves space by assigning shorter codes to more frequent characters. Optimal for Given Frequencies: Huffman Coding guarantees the minimum number of bits required for a set of characters based on their frequencies. Limitations of Huffman Coding Fixed Frequencies: Huffman Coding is optimal for a fixed set of frequencies. Changes in frequency distribution may lead to inefficiency. Not Suitable for Real-Time Applications: For large and variable data, the tree-building process can be slow. Suboptimal for Small Files: May add overhead for very small files where the additional tree data outweighs compression benefits. Applications of Huffman Coding Data Compression:\nWidely used in file compression formats like ZIP and RAR. Multimedia Compression:\nUtilized in JPEG and MP3 formats to reduce file size. Text Compression:\nUseful in compressing text files and emails for faster transmission. Telecommunication:\nEmployed in transmission protocols to optimize data transfer efficiency. Data Transmission:\nApplied in network data packet optimization for reducing bandwidth usage. Summary Huffman Coding is a fundamental algorithm for lossless data compression, leveraging variable-length encoding to minimize storage and bandwidth requirements. By prioritizing more frequent characters with shorter codes, it efficiently reduces data size. Its applications span various fields, including file compression, multimedia, and network optimization, making it a cornerstone of efficient data handling in digital systems.\n","permalink":"http://localhost:1313/posts/huffman-coding/","summary":"\u003ch1 id=\"huffman-coding\"\u003eHuffman Coding\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eHuffman Coding\u003c/strong\u003e is a popular algorithm used for data compression. It was developed by \u003cstrong\u003eDavid A. Huffman\u003c/strong\u003e in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\u003c/p\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#how-huffman-coding-works\"\u003eHow Huffman Coding Works\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#example-of-huffman-coding\"\u003eExample of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#decoding-with-huffman-code\"\u003eDecoding with Huffman Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#advantages-of-huffman-coding\"\u003eAdvantages of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#applications-of-huffman-coding\"\u003eApplications of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#limitations-of-huffman-coding\"\u003eLimitations of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eHuffman Coding is a \u003cstrong\u003elossless compression algorithm\u003c/strong\u003e, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\u003c/p\u003e","title":"Huffman Coding"},{"content":" Embracing Git Submodules: A Journey to a Seamless Dotfiles Setup I had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was. In my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\nThe Challenge Managing dotfiles is a daunting task, especially when dealing with a complex array of configurations spread across multitudes of applications and tools. Initially, I used traditional methods like stow. But, as my setup kept evolving, I needed an even more sophisticated solution to handle not just my primary dotfiles but also various submodules, such as for Neovim.\nDiscovering Git Submodules All I heard about submodules was the scary stories of how messy it can get. However, Git submodules are a powerful feature that allows you to include and manage repositories within a repository. This feature became a game-changer in my quest for a cleaner setup. Here’s why:\n1. Seamless Integration Using Git submodules, I could integrate external repositories directly into my dotfiles repository. For e.g, integrating a Neovim configuration repository as a submodule meant that updates to plugins or configurations could be managed seamlessly without disrupting the primary dotfiles setup.\n2. Simplified Updates Managing updates with Git submodules turned out to be straightforward. With commands like git submodule update --init --recursive, I could ensure that all submodules were initialized and up-to-date with just a single command. This eliminated the need for manual updates and checks, saving time and reducing errors.\n3. Enhanced Organization By organizing my configurations into separate repositories and including them as submodules, I achieved a cleaner, more modular setup. This approach made it easier to maintain and update each component individually while keeping the main repository organized.\nThe Transition to yadm The journey didn’t stop with Git submodules. I transitioned to using yadm (Yet Another Dotfiles Manager), which enhanced the management of my dotfiles even further. Here’s how yadm fit into the picture:\n1. Advanced Dotfiles Management yadm offered advanced features tailored for dotfiles management. It provided built-in support for handling dotfiles repositories and their submodules. With commands like yadm clone, yadm pull, and yadm submodule update, I could effortlessly manage and synchronize my dotfiles across systems.\n2. Automation and Consistency Initially, it felt very taxating to think of yadm as a substitue for git with dotfiles controlling power, but after around 20 or so minutes, I was convinced that this the way I wanted to manage my dotfiles all along. No sucky symlinks, no confusion, just a simple repo which stores what I need to store without the agressive .gitignore in my home directory. Incorporating yadm into my Ansible playbook automated the setup process. The playbook cloned the dotfiles repository, executed a bootstrap script, and ensured that all submodules were initialized and updated. This automation ensured consistency across setups, reducing manual intervention and potential configuration drift.\n3. Streamlined Configuration Using yadm streamlined the configuration of my system. It handled the intricacies of managing dotfiles and submodules, allowed me to focus on enhancing my development environment rather than wrestling with configuration issues. If you read it so far, I think you should give it a fair try, it will be worth it.\nConclusion Embracing Git submodules and yadm has been a transformative experience. It has simplified the management of my dotfiles, improved organization, and enhanced the automation of my system setup. For anyone dealing with complex dotfiles setups or seeking a more efficient way to manage configurations, exploring Git submodules and yadm is highly recommended.\nThis journey has not only refined my setup but also highlighted the power of leveraging the right tools for the task at hand. The integration of Git submodules into my workflow stands as a testament to how thoughtful tooling choices can lead to a more streamlined and enjoyable development experience.\n","permalink":"http://localhost:1313/posts/git-submodules/","summary":"\u003chr\u003e\n\u003ch2 id=\"embracing-git-submodules-a-journey-to-a-seamless-dotfiles-setup\"\u003eEmbracing Git Submodules: A Journey to a Seamless Dotfiles Setup\u003c/h2\u003e\n\u003cp\u003eI had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was.\nIn my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\u003c/p\u003e","title":"Git Submodules"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"My First Post"},{"content":"","permalink":"http://localhost:1313/posts/income-tax-for-noobs/","summary":"","title":"Income Tax for Noobs"},{"content":" Finance for noobs I come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\nDisclaimer This content is primarily relevant to India and sometimes US markets. The content here is purely for educational purposes. This is not financial advice.\nStocks Stock is basically ownership of a company.\nUsual ways that people make profit from a stock is:\nPrice appreciation: you bought it for 100 rupees, sold for 200. profit of 100 in your pocket. Dividends: company gives out profits to all owners yearly or so. But this is upto company whether they want to give away or not. Mutual Funds I growed up watching mutual funds advertisements many times, never really understood what they meant.\nA very common example used to explain it is a basket of stocks. However, I think most simple way to explain it is:\nIt is a collection of different stock (and stock like stuff). Reason for it to be a collection is so that risk is reduced.\nThis is done because investing solely in a single company is very high risk. What if one day there is some negative PR, and company stock hits rock bottom. Investing little bit in many companies will save u from this loss because profit of some other place can help you.\nYou will hear a popular saying, \u0026ldquo;Don\u0026rsquo;t put all your eggs in one basket.\u0026rdquo; This is what they\u0026rsquo;re talking about.\nPortfolio of a fund means which stocks they have in their collection. But your portfolio means what all of the investments you are holding.\nOne more thing u will hear is that there are stock market index funds. Think of these also as a collection of stocks.\nIn india we have two main stock indices:\nNifty-50: Top 50 companies in National Stock Exchange (NSE) Sensex: Top 30 companies in Bombay Stock Exchange (BSE) A Stock exchange is basically a place where people can sell or buy stocks under some party like Govt monitoring them. Governments try to keep regulations in place so that people don\u0026rsquo;t misbehave.\nAn index is actually not a mutual fund. It is just a public list for people to know how market is doing overall.\nAny mutual fund can mimic the index. So it means they keep their investments only in Nifty 50 for example. These mutual funds are called an Index fund or ETFs.\nNow you may wonder, why they are called \u0026ldquo;mutual\u0026rdquo; funds. What happens is that many people buy a mutual fund in bulk/pool.\nSo mutual means collective ownership/sharing. This means profits and losses are equally shared among all the investors.\nWho does this?\nFunds are managed by Asset Management Companies (AMC). They have their fund managers who speculate the market for returns. Since they\u0026rsquo;re doing the heavy lifting of market research and you are just putting money in, they charge you a premium.\nThis premium is called as \u0026ldquo;Expense ratio\u0026rdquo;. A 1% expense ratio means on investing 100 rupees, you have to pay 1 rupee to the AMC every year. Lastly, you will hear types of mutual funds:\nSmall cap: invest mostly in small scale companies, high risk, high reward. Mid cap: invest mostly in medium scale companies, quite stable, medium risk, medium reward. Large cap: invest mostly in large scale companies, low risk, low reward. so, in short, small scale startups can fail easily and if they boom, they reward generously too and large scale companies stock price is table so not much amount of profit, but the stock price won\u0026rsquo;t be bouncing up and down too much.\nMetrics CAGR So if you looked at any ads for mututal funds, you must have seen a metric called CAGR.\nFull form: Compound Annual Growth Rate. Basically, it is avg growth rate on a yearly basis. Growth means how much your investment increased in value. Like buying a Tata stock which was 100 rupees now became 200, so it is 100% growth.\nLet\u0026rsquo;s say u bought a mutual fund with a CAGR of 30%. But you don\u0026rsquo;t know if the fund was really lucky that one year it growed by 150% and rest of the time with 10%.\nThe problem with only looking at one metric is that you will lose insight on other important stuff. Think of it like you need to have an idea of the bigger picture of the market to make profit consistently.\nThere are a lot of metrics like:\nSharpe ratio Sharpe is basically the ratio of return over risk. So you for example, you are given two choices of buy a house.\nHouse A will give you 100% returns i.e. double the investment. It\u0026rsquo;s a very nice sea-faced apartment. House B will give you 10% returns.\nYou would buy House A, seems like a no-brainer.\nBut if something happens one day like a tsunami or something, House A will be washed way in it. So you have the risk of losing entire investment you put in. House B is in reletively safe area, no earthquakes, no natural disasters.\nWould you still buy house A now?\nSo this is what return to risk ratio does. You know how much returns you can make but you also need to know how safe investment it is.\nBeta Measures the volatility (how much a stock jumps up or down) compared to market.\nβ = 1 → moves with market β \u0026gt; 1 → more volatile than market β \u0026lt; 1 → less volatile than market β \u0026lt; 0 → moves opposite to market Capture ratio Financial Assets So I\u0026rsquo;ve been talking about stocks all the way. But there are also more types of it which are different but they work in same manner. But I think for today, just have a short overview on what they are:\n1. Equity / Stocks Ownership in a company. Profit from price appreciation and dividends. 2. Debt / Bonds Lending money to government or corporations. Earn fixed interest (aka coupon). Quite low risk, therefore low returns. 3. Cash \u0026amp; Cash Equivalents Bank deposits (like Fixed Deposits), money market instruments, treasury bills. Very low risk, highly liquid. 4. Derivatives Financial contracts whose value depends on an underlying asset. Examples: Futures, Options, Swaps. 5. Mutual Funds \u0026amp; ETFs Pooled investments in a mix of stocks, bonds, or other assets. Diversified risk. 6. Commodities Physical goods like gold, silver, oil, agricultural products. Can be invested via commodity ETFs or futures. 7. Real Estate / Property Residential, commercial, or land. Can generate rental income and capital gains. 8. Alternative Investments Hedge funds, private equity, crypto, collectibles. Typically higher risk, lower liquidity. ","permalink":"http://localhost:1313/posts/fin-for-noobs/","summary":"\u003chr\u003e\n\u003ch1 id=\"finance-for-noobs\"\u003eFinance for noobs\u003c/h1\u003e\n\u003cp\u003eI come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content is primarily relevant to India and sometimes US markets.\nThe content here is purely for educational purposes.\n\u003cstrong\u003eThis is not financial advice.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"stocks\"\u003eStocks\u003c/h2\u003e\n\u003cp\u003eStock is basically ownership of a company.\u003c/p\u003e\n\u003cp\u003eUsual ways that people make profit from a stock is:\u003c/p\u003e","title":"Finance for Noobs"},{"content":"Huffman Coding Huffman Coding is a popular algorithm used for data compression. It was developed by David A. Huffman in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\nTable of Contents Introduction How Huffman Coding Works Example of Huffman Coding Decoding with Huffman Code Advantages of Huffman Coding Applications of Huffman Coding Limitations of Huffman Coding Introduction Huffman Coding is a lossless compression algorithm, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\nHow Huffman Coding Works Step-by-Step Process Frequency Calculation:\nCount the frequency of each character in the data. Create Leaf Nodes:\nFor each character, create a leaf node containing its frequency and value. Build a Priority Queue:\nInsert all leaf nodes into a priority queue (or min-heap), sorted by frequency (smallest frequency at the top). Construct the Huffman Tree:\nRepeat the following until only one node remains in the priority queue: Extract the two nodes with the lowest frequency. Create a new node with a frequency equal to the sum of these two nodes. Set the two extracted nodes as the left and right children of the new node. Insert the new node back into the priority queue. The last remaining node is the root of the Huffman Tree. Assign Codes:\nTraverse the Huffman Tree from the root to each leaf node. Assign a binary 0 for each left edge and 1 for each right edge. The path to each character forms its Huffman Code. Example of Huffman Coding Consider the following example data:\nCharacter Frequency A 5 B 9 C 12 D 13 E 16 F 45 Step 1: Build the Huffman Tree Start with individual nodes sorted by frequency. Merge nodes with the lowest frequencies until only one node remains. The process would look like this:\nCombine A (5) and B (9) → New Node (14) Combine C (12) and D (13) → New Node (25) Combine New Node (14) and E (16) → New Node (30) Combine New Node (25) and F (45) → New Node (70) Combine New Node (30) and New Node (70) → Final Root (100) Step 2: Assign Codes After constructing the Huffman Tree, assign binary codes based on the path to each character:\nCharacter Huffman Code A 1100 B 1101 C 100 D 101 E 111 F 0 Result: The character with the highest frequency (F) has the shortest code (0), and characters with lower frequencies have longer codes.\nEncoding Example If we encode the string ABCD, it would be:\nA → 1100 B → 1101 C → 100 D → 101 Encoded string: 11001101100101\nDecoding with Huffman Code Decoding is performed by traversing the Huffman Tree:\nStart at the root. For each 0, move left; for each 1, move right. When a leaf node is reached, add the character to the output. Return to the root and repeat until the entire encoded string is decoded. Advantages of Huffman Coding Lossless Compression: No data is lost during compression. Efficiency: Saves space by assigning shorter codes to more frequent characters. Optimal for Given Frequencies: Huffman Coding guarantees the minimum number of bits required for a set of characters based on their frequencies. Limitations of Huffman Coding Fixed Frequencies: Huffman Coding is optimal for a fixed set of frequencies. Changes in frequency distribution may lead to inefficiency. Not Suitable for Real-Time Applications: For large and variable data, the tree-building process can be slow. Suboptimal for Small Files: May add overhead for very small files where the additional tree data outweighs compression benefits. Applications of Huffman Coding Data Compression:\nWidely used in file compression formats like ZIP and RAR. Multimedia Compression:\nUtilized in JPEG and MP3 formats to reduce file size. Text Compression:\nUseful in compressing text files and emails for faster transmission. Telecommunication:\nEmployed in transmission protocols to optimize data transfer efficiency. Data Transmission:\nApplied in network data packet optimization for reducing bandwidth usage. Summary Huffman Coding is a fundamental algorithm for lossless data compression, leveraging variable-length encoding to minimize storage and bandwidth requirements. By prioritizing more frequent characters with shorter codes, it efficiently reduces data size. Its applications span various fields, including file compression, multimedia, and network optimization, making it a cornerstone of efficient data handling in digital systems.\n","permalink":"http://localhost:1313/posts/huffman-coding/","summary":"\u003ch1 id=\"huffman-coding\"\u003eHuffman Coding\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eHuffman Coding\u003c/strong\u003e is a popular algorithm used for data compression. It was developed by \u003cstrong\u003eDavid A. Huffman\u003c/strong\u003e in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\u003c/p\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#how-huffman-coding-works\"\u003eHow Huffman Coding Works\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#example-of-huffman-coding\"\u003eExample of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#decoding-with-huffman-code\"\u003eDecoding with Huffman Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#advantages-of-huffman-coding\"\u003eAdvantages of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#applications-of-huffman-coding\"\u003eApplications of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#limitations-of-huffman-coding\"\u003eLimitations of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eHuffman Coding is a \u003cstrong\u003elossless compression algorithm\u003c/strong\u003e, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\u003c/p\u003e","title":"Huffman Coding"},{"content":" Embracing Git Submodules: A Journey to a Seamless Dotfiles Setup I had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was. In my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\nThe Challenge Managing dotfiles is a daunting task, especially when dealing with a complex array of configurations spread across multitudes of applications and tools. Initially, I used traditional methods like stow. But, as my setup kept evolving, I needed an even more sophisticated solution to handle not just my primary dotfiles but also various submodules, such as for Neovim.\nDiscovering Git Submodules All I heard about submodules was the scary stories of how messy it can get. However, Git submodules are a powerful feature that allows you to include and manage repositories within a repository. This feature became a game-changer in my quest for a cleaner setup. Here’s why:\n1. Seamless Integration Using Git submodules, I could integrate external repositories directly into my dotfiles repository. For e.g, integrating a Neovim configuration repository as a submodule meant that updates to plugins or configurations could be managed seamlessly without disrupting the primary dotfiles setup.\n2. Simplified Updates Managing updates with Git submodules turned out to be straightforward. With commands like git submodule update --init --recursive, I could ensure that all submodules were initialized and up-to-date with just a single command. This eliminated the need for manual updates and checks, saving time and reducing errors.\n3. Enhanced Organization By organizing my configurations into separate repositories and including them as submodules, I achieved a cleaner, more modular setup. This approach made it easier to maintain and update each component individually while keeping the main repository organized.\nThe Transition to yadm The journey didn’t stop with Git submodules. I transitioned to using yadm (Yet Another Dotfiles Manager), which enhanced the management of my dotfiles even further. Here’s how yadm fit into the picture:\n1. Advanced Dotfiles Management yadm offered advanced features tailored for dotfiles management. It provided built-in support for handling dotfiles repositories and their submodules. With commands like yadm clone, yadm pull, and yadm submodule update, I could effortlessly manage and synchronize my dotfiles across systems.\n2. Automation and Consistency Initially, it felt very taxating to think of yadm as a substitue for git with dotfiles controlling power, but after around 20 or so minutes, I was convinced that this the way I wanted to manage my dotfiles all along. No sucky symlinks, no confusion, just a simple repo which stores what I need to store without the agressive .gitignore in my home directory. Incorporating yadm into my Ansible playbook automated the setup process. The playbook cloned the dotfiles repository, executed a bootstrap script, and ensured that all submodules were initialized and updated. This automation ensured consistency across setups, reducing manual intervention and potential configuration drift.\n3. Streamlined Configuration Using yadm streamlined the configuration of my system. It handled the intricacies of managing dotfiles and submodules, allowed me to focus on enhancing my development environment rather than wrestling with configuration issues. If you read it so far, I think you should give it a fair try, it will be worth it.\nConclusion Embracing Git submodules and yadm has been a transformative experience. It has simplified the management of my dotfiles, improved organization, and enhanced the automation of my system setup. For anyone dealing with complex dotfiles setups or seeking a more efficient way to manage configurations, exploring Git submodules and yadm is highly recommended.\nThis journey has not only refined my setup but also highlighted the power of leveraging the right tools for the task at hand. The integration of Git submodules into my workflow stands as a testament to how thoughtful tooling choices can lead to a more streamlined and enjoyable development experience.\n","permalink":"http://localhost:1313/posts/git-submodules/","summary":"\u003chr\u003e\n\u003ch2 id=\"embracing-git-submodules-a-journey-to-a-seamless-dotfiles-setup\"\u003eEmbracing Git Submodules: A Journey to a Seamless Dotfiles Setup\u003c/h2\u003e\n\u003cp\u003eI had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was.\nIn my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\u003c/p\u003e","title":"Git Submodules"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"My First Post"},{"content":"Income Tax for Noobs Disclaimer This content contains very basic information about how taxation works. Please refer to official govt sites for specific information. This is not any kind of advice on how to file your Income tax and returns but just basic explanation of it. This content is for educational purposes only.\n","permalink":"http://localhost:1313/posts/income-tax-for-noobs/","summary":"\u003ch1 id=\"income-tax-for-noobs\"\u003eIncome Tax for Noobs\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content contains very basic information about how taxation works. Please refer to official govt sites for specific information.\nThis is not any kind of advice on how to file your Income tax and returns but just basic explanation of it.\nThis content is for educational purposes only.\u003c/p\u003e\u003c/blockquote\u003e","title":"Income Tax for Noobs"},{"content":" Finance for noobs I come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\nDisclaimer This content is primarily relevant to India and sometimes US markets. The content here is purely for educational purposes. This is not financial advice.\nStocks Stock is basically ownership of a company.\nUsual ways that people make profit from a stock is:\nPrice appreciation: you bought it for 100 rupees, sold for 200. profit of 100 in your pocket. Dividends: company gives out profits to all owners yearly or so. But this is upto company whether they want to give away or not. Mutual Funds I growed up watching mutual funds advertisements many times, never really understood what they meant.\nA very common example used to explain it is a basket of stocks. However, I think most simple way to explain it is:\nIt is a collection of different stock (and stock like stuff). Reason for it to be a collection is so that risk is reduced.\nThis is done because investing solely in a single company is very high risk. What if one day there is some negative PR, and company stock hits rock bottom. Investing little bit in many companies will save u from this loss because profit of some other place can help you.\nYou will hear a popular saying, \u0026ldquo;Don\u0026rsquo;t put all your eggs in one basket.\u0026rdquo; This is what they\u0026rsquo;re talking about.\nPortfolio of a fund means which stocks they have in their collection. But your portfolio means what all of the investments you are holding.\nOne more thing u will hear is that there are stock market index funds. Think of these also as a collection of stocks.\nIn india we have two main stock indices:\nNifty-50: Top 50 companies in National Stock Exchange (NSE) Sensex: Top 30 companies in Bombay Stock Exchange (BSE) A Stock exchange is basically a place where people can sell or buy stocks under some party like Govt monitoring them. Governments try to keep regulations in place so that people don\u0026rsquo;t misbehave.\nAn index is actually not a mutual fund. It is just a public list for people to know how market is doing overall.\nAny mutual fund can mimic the index. So it means they keep their investments only in Nifty 50 for example. These mutual funds are called an Index fund or ETFs.\nNow you may wonder, why they are called \u0026ldquo;mutual\u0026rdquo; funds. What happens is that many people buy a mutual fund in bulk/pool.\nSo mutual means collective ownership/sharing. This means profits and losses are equally shared among all the investors.\nWho does this?\nFunds are managed by Asset Management Companies (AMC). They have their fund managers who speculate the market for returns. Since they\u0026rsquo;re doing the heavy lifting of market research and you are just putting money in, they charge you a premium.\nThis premium is called as \u0026ldquo;Expense ratio\u0026rdquo;. A 1% expense ratio means on investing 100 rupees, you have to pay 1 rupee to the AMC every year. Lastly, you will hear types of mutual funds:\nSmall cap: invest mostly in small scale companies, high risk, high reward. Mid cap: invest mostly in medium scale companies, quite stable, medium risk, medium reward. Large cap: invest mostly in large scale companies, low risk, low reward. so, in short, small scale startups can fail easily and if they boom, they reward generously too and large scale companies stock price is table so not much amount of profit, but the stock price won\u0026rsquo;t be bouncing up and down too much.\nMetrics CAGR So if you looked at any ads for mututal funds, you must have seen a metric called CAGR.\nFull form: Compound Annual Growth Rate. Basically, it is avg growth rate on a yearly basis. Growth means how much your investment increased in value. Like buying a Tata stock which was 100 rupees now became 200, so it is 100% growth.\nLet\u0026rsquo;s say u bought a mutual fund with a CAGR of 30%. But you don\u0026rsquo;t know if the fund was really lucky that one year it growed by 150% and rest of the time with 10%.\nThe problem with only looking at one metric is that you will lose insight on other important stuff. Think of it like you need to have an idea of the bigger picture of the market to make profit consistently.\nThere are a lot of metrics like:\nSharpe ratio Sharpe is basically the ratio of return over risk. So you for example, you are given two choices of buy a house.\nHouse A will give you 100% returns i.e. double the investment. It\u0026rsquo;s a very nice sea-faced apartment. House B will give you 10% returns.\nYou would buy House A, seems like a no-brainer.\nBut if something happens one day like a tsunami or something, House A will be washed way in it. So you have the risk of losing entire investment you put in. House B is in reletively safe area, no earthquakes, no natural disasters.\nWould you still buy house A now?\nSo this is what return to risk ratio does. You know how much returns you can make but you also need to know how safe investment it is.\nBeta Measures the volatility (how much a stock jumps up or down) compared to market.\nβ = 1 → moves with market β \u0026gt; 1 → more volatile than market β \u0026lt; 1 → less volatile than market β \u0026lt; 0 → moves opposite to market Capture ratio Financial Assets So I\u0026rsquo;ve been talking about stocks all the way. But there are also more types of it which are different but they work in same manner. But I think for today, just have a short overview on what they are:\n1. Equity / Stocks Ownership in a company. Profit from price appreciation and dividends. 2. Debt / Bonds Lending money to government or corporations. Earn fixed interest (aka coupon). Quite low risk, therefore low returns. 3. Cash \u0026amp; Cash Equivalents Bank deposits (like Fixed Deposits), money market instruments, treasury bills. Very low risk, highly liquid. 4. Derivatives Financial contracts whose value depends on an underlying asset. Examples: Futures, Options, Swaps. 5. Mutual Funds \u0026amp; ETFs Pooled investments in a mix of stocks, bonds, or other assets. Diversified risk. 6. Commodities Physical goods like gold, silver, oil, agricultural products. Can be invested via commodity ETFs or futures. 7. Real Estate / Property Residential, commercial, or land. Can generate rental income and capital gains. 8. Alternative Investments Hedge funds, private equity, crypto, collectibles. Typically higher risk, lower liquidity. ","permalink":"http://localhost:1313/posts/fin-for-noobs/","summary":"\u003chr\u003e\n\u003ch1 id=\"finance-for-noobs\"\u003eFinance for noobs\u003c/h1\u003e\n\u003cp\u003eI come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content is primarily relevant to India and sometimes US markets.\nThe content here is purely for educational purposes.\n\u003cstrong\u003eThis is not financial advice.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"stocks\"\u003eStocks\u003c/h2\u003e\n\u003cp\u003eStock is basically ownership of a company.\u003c/p\u003e\n\u003cp\u003eUsual ways that people make profit from a stock is:\u003c/p\u003e","title":"Finance for Noobs"},{"content":"Huffman Coding Huffman Coding is a popular algorithm used for data compression. It was developed by David A. Huffman in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\nTable of Contents Introduction How Huffman Coding Works Example of Huffman Coding Decoding with Huffman Code Advantages of Huffman Coding Applications of Huffman Coding Limitations of Huffman Coding Introduction Huffman Coding is a lossless compression algorithm, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\nHow Huffman Coding Works Step-by-Step Process Frequency Calculation:\nCount the frequency of each character in the data. Create Leaf Nodes:\nFor each character, create a leaf node containing its frequency and value. Build a Priority Queue:\nInsert all leaf nodes into a priority queue (or min-heap), sorted by frequency (smallest frequency at the top). Construct the Huffman Tree:\nRepeat the following until only one node remains in the priority queue: Extract the two nodes with the lowest frequency. Create a new node with a frequency equal to the sum of these two nodes. Set the two extracted nodes as the left and right children of the new node. Insert the new node back into the priority queue. The last remaining node is the root of the Huffman Tree. Assign Codes:\nTraverse the Huffman Tree from the root to each leaf node. Assign a binary 0 for each left edge and 1 for each right edge. The path to each character forms its Huffman Code. Example of Huffman Coding Consider the following example data:\nCharacter Frequency A 5 B 9 C 12 D 13 E 16 F 45 Step 1: Build the Huffman Tree Start with individual nodes sorted by frequency. Merge nodes with the lowest frequencies until only one node remains. The process would look like this:\nCombine A (5) and B (9) → New Node (14) Combine C (12) and D (13) → New Node (25) Combine New Node (14) and E (16) → New Node (30) Combine New Node (25) and F (45) → New Node (70) Combine New Node (30) and New Node (70) → Final Root (100) Step 2: Assign Codes After constructing the Huffman Tree, assign binary codes based on the path to each character:\nCharacter Huffman Code A 1100 B 1101 C 100 D 101 E 111 F 0 Result: The character with the highest frequency (F) has the shortest code (0), and characters with lower frequencies have longer codes.\nEncoding Example If we encode the string ABCD, it would be:\nA → 1100 B → 1101 C → 100 D → 101 Encoded string: 11001101100101\nDecoding with Huffman Code Decoding is performed by traversing the Huffman Tree:\nStart at the root. For each 0, move left; for each 1, move right. When a leaf node is reached, add the character to the output. Return to the root and repeat until the entire encoded string is decoded. Advantages of Huffman Coding Lossless Compression: No data is lost during compression. Efficiency: Saves space by assigning shorter codes to more frequent characters. Optimal for Given Frequencies: Huffman Coding guarantees the minimum number of bits required for a set of characters based on their frequencies. Limitations of Huffman Coding Fixed Frequencies: Huffman Coding is optimal for a fixed set of frequencies. Changes in frequency distribution may lead to inefficiency. Not Suitable for Real-Time Applications: For large and variable data, the tree-building process can be slow. Suboptimal for Small Files: May add overhead for very small files where the additional tree data outweighs compression benefits. Applications of Huffman Coding Data Compression:\nWidely used in file compression formats like ZIP and RAR. Multimedia Compression:\nUtilized in JPEG and MP3 formats to reduce file size. Text Compression:\nUseful in compressing text files and emails for faster transmission. Telecommunication:\nEmployed in transmission protocols to optimize data transfer efficiency. Data Transmission:\nApplied in network data packet optimization for reducing bandwidth usage. Summary Huffman Coding is a fundamental algorithm for lossless data compression, leveraging variable-length encoding to minimize storage and bandwidth requirements. By prioritizing more frequent characters with shorter codes, it efficiently reduces data size. Its applications span various fields, including file compression, multimedia, and network optimization, making it a cornerstone of efficient data handling in digital systems.\n","permalink":"http://localhost:1313/posts/huffman-coding/","summary":"\u003ch1 id=\"huffman-coding\"\u003eHuffman Coding\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eHuffman Coding\u003c/strong\u003e is a popular algorithm used for data compression. It was developed by \u003cstrong\u003eDavid A. Huffman\u003c/strong\u003e in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\u003c/p\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#how-huffman-coding-works\"\u003eHow Huffman Coding Works\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#example-of-huffman-coding\"\u003eExample of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#decoding-with-huffman-code\"\u003eDecoding with Huffman Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#advantages-of-huffman-coding\"\u003eAdvantages of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#applications-of-huffman-coding\"\u003eApplications of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#limitations-of-huffman-coding\"\u003eLimitations of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eHuffman Coding is a \u003cstrong\u003elossless compression algorithm\u003c/strong\u003e, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\u003c/p\u003e","title":"Huffman Coding"},{"content":" Embracing Git Submodules: A Journey to a Seamless Dotfiles Setup I had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was. In my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\nThe Challenge Managing dotfiles is a daunting task, especially when dealing with a complex array of configurations spread across multitudes of applications and tools. Initially, I used traditional methods like stow. But, as my setup kept evolving, I needed an even more sophisticated solution to handle not just my primary dotfiles but also various submodules, such as for Neovim.\nDiscovering Git Submodules All I heard about submodules was the scary stories of how messy it can get. However, Git submodules are a powerful feature that allows you to include and manage repositories within a repository. This feature became a game-changer in my quest for a cleaner setup. Here’s why:\n1. Seamless Integration Using Git submodules, I could integrate external repositories directly into my dotfiles repository. For e.g, integrating a Neovim configuration repository as a submodule meant that updates to plugins or configurations could be managed seamlessly without disrupting the primary dotfiles setup.\n2. Simplified Updates Managing updates with Git submodules turned out to be straightforward. With commands like git submodule update --init --recursive, I could ensure that all submodules were initialized and up-to-date with just a single command. This eliminated the need for manual updates and checks, saving time and reducing errors.\n3. Enhanced Organization By organizing my configurations into separate repositories and including them as submodules, I achieved a cleaner, more modular setup. This approach made it easier to maintain and update each component individually while keeping the main repository organized.\nThe Transition to yadm The journey didn’t stop with Git submodules. I transitioned to using yadm (Yet Another Dotfiles Manager), which enhanced the management of my dotfiles even further. Here’s how yadm fit into the picture:\n1. Advanced Dotfiles Management yadm offered advanced features tailored for dotfiles management. It provided built-in support for handling dotfiles repositories and their submodules. With commands like yadm clone, yadm pull, and yadm submodule update, I could effortlessly manage and synchronize my dotfiles across systems.\n2. Automation and Consistency Initially, it felt very taxating to think of yadm as a substitue for git with dotfiles controlling power, but after around 20 or so minutes, I was convinced that this the way I wanted to manage my dotfiles all along. No sucky symlinks, no confusion, just a simple repo which stores what I need to store without the agressive .gitignore in my home directory. Incorporating yadm into my Ansible playbook automated the setup process. The playbook cloned the dotfiles repository, executed a bootstrap script, and ensured that all submodules were initialized and updated. This automation ensured consistency across setups, reducing manual intervention and potential configuration drift.\n3. Streamlined Configuration Using yadm streamlined the configuration of my system. It handled the intricacies of managing dotfiles and submodules, allowed me to focus on enhancing my development environment rather than wrestling with configuration issues. If you read it so far, I think you should give it a fair try, it will be worth it.\nConclusion Embracing Git submodules and yadm has been a transformative experience. It has simplified the management of my dotfiles, improved organization, and enhanced the automation of my system setup. For anyone dealing with complex dotfiles setups or seeking a more efficient way to manage configurations, exploring Git submodules and yadm is highly recommended.\nThis journey has not only refined my setup but also highlighted the power of leveraging the right tools for the task at hand. The integration of Git submodules into my workflow stands as a testament to how thoughtful tooling choices can lead to a more streamlined and enjoyable development experience.\n","permalink":"http://localhost:1313/posts/git-submodules/","summary":"\u003chr\u003e\n\u003ch2 id=\"embracing-git-submodules-a-journey-to-a-seamless-dotfiles-setup\"\u003eEmbracing Git Submodules: A Journey to a Seamless Dotfiles Setup\u003c/h2\u003e\n\u003cp\u003eI had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was.\nIn my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\u003c/p\u003e","title":"Git Submodules"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"My First Post"},{"content":"Income Tax for Noobs Disclaimer This content contains very basic information about how taxation works. Please refer to official govt sites for specific information. This is not any kind of advice on how to file your Income tax and returns but just basic explanation of it. This content is for educational purposes only.\nSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\nSo I thought why not try to understand how it works to safeguard myself (and my money). While learning about it, I thought I can share the knowledge about the same, so here we are.\nSince I am a salaried person like most people, I\u0026rsquo;ll only discuss the same here.\nTaxable Income Part of your income which you are obliged to pay taxes on. The taxable income will eventually decide your tax slab.\nTax slabs is just rules that if you have taxable income over let\u0026rsquo;s say 7 Lakhs. then you have to pay 10% (for example) as an income tax on it. That means 70,000 will be your income tax.\n","permalink":"http://localhost:1313/posts/income-tax-for-noobs/","summary":"\u003ch1 id=\"income-tax-for-noobs\"\u003eIncome Tax for Noobs\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content contains very basic information about how taxation works. Please refer to official govt sites for specific information.\nThis is not any kind of advice on how to file your Income tax and returns but just basic explanation of it.\nThis content is for educational purposes only.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\u003c/p\u003e","title":"Income Tax for Noobs"},{"content":" Finance for noobs I come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\nDisclaimer This content is primarily relevant to India and sometimes US markets. The content here is purely for educational purposes. This is not financial advice.\nStocks Stock is basically ownership of a company.\nUsual ways that people make profit from a stock is:\nPrice appreciation: you bought it for 100 rupees, sold for 200. profit of 100 in your pocket. Dividends: company gives out profits to all owners yearly or so. But this is upto company whether they want to give away or not. Mutual Funds I growed up watching mutual funds advertisements many times, never really understood what they meant.\nA very common example used to explain it is a basket of stocks. However, I think most simple way to explain it is:\nIt is a collection of different stock (and stock like stuff). Reason for it to be a collection is so that risk is reduced.\nThis is done because investing solely in a single company is very high risk. What if one day there is some negative PR, and company stock hits rock bottom. Investing little bit in many companies will save u from this loss because profit of some other place can help you.\nYou will hear a popular saying, \u0026ldquo;Don\u0026rsquo;t put all your eggs in one basket.\u0026rdquo; This is what they\u0026rsquo;re talking about.\nPortfolio of a fund means which stocks they have in their collection. But your portfolio means what all of the investments you are holding.\nOne more thing u will hear is that there are stock market index funds. Think of these also as a collection of stocks.\nIn india we have two main stock indices:\nNifty-50: Top 50 companies in National Stock Exchange (NSE) Sensex: Top 30 companies in Bombay Stock Exchange (BSE) A Stock exchange is basically a place where people can sell or buy stocks under some party like Govt monitoring them. Governments try to keep regulations in place so that people don\u0026rsquo;t misbehave.\nAn index is actually not a mutual fund. It is just a public list for people to know how market is doing overall.\nAny mutual fund can mimic the index. So it means they keep their investments only in Nifty 50 for example. These mutual funds are called an Index fund or ETFs.\nNow you may wonder, why they are called \u0026ldquo;mutual\u0026rdquo; funds. What happens is that many people buy a mutual fund in bulk/pool.\nSo mutual means collective ownership/sharing. This means profits and losses are equally shared among all the investors.\nWho does this?\nFunds are managed by Asset Management Companies (AMC). They have their fund managers who speculate the market for returns. Since they\u0026rsquo;re doing the heavy lifting of market research and you are just putting money in, they charge you a premium.\nThis premium is called as \u0026ldquo;Expense ratio\u0026rdquo;. A 1% expense ratio means on investing 100 rupees, you have to pay 1 rupee to the AMC every year. Lastly, you will hear types of mutual funds:\nSmall cap: invest mostly in small scale companies, high risk, high reward. Mid cap: invest mostly in medium scale companies, quite stable, medium risk, medium reward. Large cap: invest mostly in large scale companies, low risk, low reward. so, in short, small scale startups can fail easily and if they boom, they reward generously too and large scale companies stock price is table so not much amount of profit, but the stock price won\u0026rsquo;t be bouncing up and down too much.\nMetrics CAGR So if you looked at any ads for mututal funds, you must have seen a metric called CAGR.\nFull form: Compound Annual Growth Rate. Basically, it is avg growth rate on a yearly basis. Growth means how much your investment increased in value. Like buying a Tata stock which was 100 rupees now became 200, so it is 100% growth.\nLet\u0026rsquo;s say u bought a mutual fund with a CAGR of 30%. But you don\u0026rsquo;t know if the fund was really lucky that one year it growed by 150% and rest of the time with 10%.\nThe problem with only looking at one metric is that you will lose insight on other important stuff. Think of it like you need to have an idea of the bigger picture of the market to make profit consistently.\nThere are a lot of metrics like:\nSharpe ratio Sharpe is basically the ratio of return over risk. So you for example, you are given two choices of buy a house.\nHouse A will give you 100% returns i.e. double the investment. It\u0026rsquo;s a very nice sea-faced apartment. House B will give you 10% returns.\nYou would buy House A, seems like a no-brainer.\nBut if something happens one day like a tsunami or something, House A will be washed way in it. So you have the risk of losing entire investment you put in. House B is in reletively safe area, no earthquakes, no natural disasters.\nWould you still buy house A now?\nSo this is what return to risk ratio does. You know how much returns you can make but you also need to know how safe investment it is.\nBeta Measures the volatility (how much a stock jumps up or down) compared to market.\nβ = 1 → moves with market β \u0026gt; 1 → more volatile than market β \u0026lt; 1 → less volatile than market β \u0026lt; 0 → moves opposite to market Capture ratio Financial Assets So I\u0026rsquo;ve been talking about stocks all the way. But there are also more types of it which are different but they work in same manner. But I think for today, just have a short overview on what they are:\n1. Equity / Stocks Ownership in a company. Profit from price appreciation and dividends. 2. Debt / Bonds Lending money to government or corporations. Earn fixed interest (aka coupon). Quite low risk, therefore low returns. 3. Cash \u0026amp; Cash Equivalents Bank deposits (like Fixed Deposits), money market instruments, treasury bills. Very low risk, highly liquid. 4. Derivatives Financial contracts whose value depends on an underlying asset. Examples: Futures, Options, Swaps. 5. Mutual Funds \u0026amp; ETFs Pooled investments in a mix of stocks, bonds, or other assets. Diversified risk. 6. Commodities Physical goods like gold, silver, oil, agricultural products. Can be invested via commodity ETFs or futures. 7. Real Estate / Property Residential, commercial, or land. Can generate rental income and capital gains. 8. Alternative Investments Hedge funds, private equity, crypto, collectibles. Typically higher risk, lower liquidity. ","permalink":"http://localhost:1313/posts/fin-for-noobs/","summary":"\u003chr\u003e\n\u003ch1 id=\"finance-for-noobs\"\u003eFinance for noobs\u003c/h1\u003e\n\u003cp\u003eI come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content is primarily relevant to India and sometimes US markets.\nThe content here is purely for educational purposes.\n\u003cstrong\u003eThis is not financial advice.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"stocks\"\u003eStocks\u003c/h2\u003e\n\u003cp\u003eStock is basically ownership of a company.\u003c/p\u003e\n\u003cp\u003eUsual ways that people make profit from a stock is:\u003c/p\u003e","title":"Finance for Noobs"},{"content":"Huffman Coding Huffman Coding is a popular algorithm used for data compression. It was developed by David A. Huffman in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\nTable of Contents Introduction How Huffman Coding Works Example of Huffman Coding Decoding with Huffman Code Advantages of Huffman Coding Applications of Huffman Coding Limitations of Huffman Coding Introduction Huffman Coding is a lossless compression algorithm, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\nHow Huffman Coding Works Step-by-Step Process Frequency Calculation:\nCount the frequency of each character in the data. Create Leaf Nodes:\nFor each character, create a leaf node containing its frequency and value. Build a Priority Queue:\nInsert all leaf nodes into a priority queue (or min-heap), sorted by frequency (smallest frequency at the top). Construct the Huffman Tree:\nRepeat the following until only one node remains in the priority queue: Extract the two nodes with the lowest frequency. Create a new node with a frequency equal to the sum of these two nodes. Set the two extracted nodes as the left and right children of the new node. Insert the new node back into the priority queue. The last remaining node is the root of the Huffman Tree. Assign Codes:\nTraverse the Huffman Tree from the root to each leaf node. Assign a binary 0 for each left edge and 1 for each right edge. The path to each character forms its Huffman Code. Example of Huffman Coding Consider the following example data:\nCharacter Frequency A 5 B 9 C 12 D 13 E 16 F 45 Step 1: Build the Huffman Tree Start with individual nodes sorted by frequency. Merge nodes with the lowest frequencies until only one node remains. The process would look like this:\nCombine A (5) and B (9) → New Node (14) Combine C (12) and D (13) → New Node (25) Combine New Node (14) and E (16) → New Node (30) Combine New Node (25) and F (45) → New Node (70) Combine New Node (30) and New Node (70) → Final Root (100) Step 2: Assign Codes After constructing the Huffman Tree, assign binary codes based on the path to each character:\nCharacter Huffman Code A 1100 B 1101 C 100 D 101 E 111 F 0 Result: The character with the highest frequency (F) has the shortest code (0), and characters with lower frequencies have longer codes.\nEncoding Example If we encode the string ABCD, it would be:\nA → 1100 B → 1101 C → 100 D → 101 Encoded string: 11001101100101\nDecoding with Huffman Code Decoding is performed by traversing the Huffman Tree:\nStart at the root. For each 0, move left; for each 1, move right. When a leaf node is reached, add the character to the output. Return to the root and repeat until the entire encoded string is decoded. Advantages of Huffman Coding Lossless Compression: No data is lost during compression. Efficiency: Saves space by assigning shorter codes to more frequent characters. Optimal for Given Frequencies: Huffman Coding guarantees the minimum number of bits required for a set of characters based on their frequencies. Limitations of Huffman Coding Fixed Frequencies: Huffman Coding is optimal for a fixed set of frequencies. Changes in frequency distribution may lead to inefficiency. Not Suitable for Real-Time Applications: For large and variable data, the tree-building process can be slow. Suboptimal for Small Files: May add overhead for very small files where the additional tree data outweighs compression benefits. Applications of Huffman Coding Data Compression:\nWidely used in file compression formats like ZIP and RAR. Multimedia Compression:\nUtilized in JPEG and MP3 formats to reduce file size. Text Compression:\nUseful in compressing text files and emails for faster transmission. Telecommunication:\nEmployed in transmission protocols to optimize data transfer efficiency. Data Transmission:\nApplied in network data packet optimization for reducing bandwidth usage. Summary Huffman Coding is a fundamental algorithm for lossless data compression, leveraging variable-length encoding to minimize storage and bandwidth requirements. By prioritizing more frequent characters with shorter codes, it efficiently reduces data size. Its applications span various fields, including file compression, multimedia, and network optimization, making it a cornerstone of efficient data handling in digital systems.\n","permalink":"http://localhost:1313/posts/huffman-coding/","summary":"\u003ch1 id=\"huffman-coding\"\u003eHuffman Coding\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eHuffman Coding\u003c/strong\u003e is a popular algorithm used for data compression. It was developed by \u003cstrong\u003eDavid A. Huffman\u003c/strong\u003e in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\u003c/p\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#how-huffman-coding-works\"\u003eHow Huffman Coding Works\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#example-of-huffman-coding\"\u003eExample of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#decoding-with-huffman-code\"\u003eDecoding with Huffman Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#advantages-of-huffman-coding\"\u003eAdvantages of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#applications-of-huffman-coding\"\u003eApplications of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#limitations-of-huffman-coding\"\u003eLimitations of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eHuffman Coding is a \u003cstrong\u003elossless compression algorithm\u003c/strong\u003e, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\u003c/p\u003e","title":"Huffman Coding"},{"content":" Embracing Git Submodules: A Journey to a Seamless Dotfiles Setup I had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was. In my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\nThe Challenge Managing dotfiles is a daunting task, especially when dealing with a complex array of configurations spread across multitudes of applications and tools. Initially, I used traditional methods like stow. But, as my setup kept evolving, I needed an even more sophisticated solution to handle not just my primary dotfiles but also various submodules, such as for Neovim.\nDiscovering Git Submodules All I heard about submodules was the scary stories of how messy it can get. However, Git submodules are a powerful feature that allows you to include and manage repositories within a repository. This feature became a game-changer in my quest for a cleaner setup. Here’s why:\n1. Seamless Integration Using Git submodules, I could integrate external repositories directly into my dotfiles repository. For e.g, integrating a Neovim configuration repository as a submodule meant that updates to plugins or configurations could be managed seamlessly without disrupting the primary dotfiles setup.\n2. Simplified Updates Managing updates with Git submodules turned out to be straightforward. With commands like git submodule update --init --recursive, I could ensure that all submodules were initialized and up-to-date with just a single command. This eliminated the need for manual updates and checks, saving time and reducing errors.\n3. Enhanced Organization By organizing my configurations into separate repositories and including them as submodules, I achieved a cleaner, more modular setup. This approach made it easier to maintain and update each component individually while keeping the main repository organized.\nThe Transition to yadm The journey didn’t stop with Git submodules. I transitioned to using yadm (Yet Another Dotfiles Manager), which enhanced the management of my dotfiles even further. Here’s how yadm fit into the picture:\n1. Advanced Dotfiles Management yadm offered advanced features tailored for dotfiles management. It provided built-in support for handling dotfiles repositories and their submodules. With commands like yadm clone, yadm pull, and yadm submodule update, I could effortlessly manage and synchronize my dotfiles across systems.\n2. Automation and Consistency Initially, it felt very taxating to think of yadm as a substitue for git with dotfiles controlling power, but after around 20 or so minutes, I was convinced that this the way I wanted to manage my dotfiles all along. No sucky symlinks, no confusion, just a simple repo which stores what I need to store without the agressive .gitignore in my home directory. Incorporating yadm into my Ansible playbook automated the setup process. The playbook cloned the dotfiles repository, executed a bootstrap script, and ensured that all submodules were initialized and updated. This automation ensured consistency across setups, reducing manual intervention and potential configuration drift.\n3. Streamlined Configuration Using yadm streamlined the configuration of my system. It handled the intricacies of managing dotfiles and submodules, allowed me to focus on enhancing my development environment rather than wrestling with configuration issues. If you read it so far, I think you should give it a fair try, it will be worth it.\nConclusion Embracing Git submodules and yadm has been a transformative experience. It has simplified the management of my dotfiles, improved organization, and enhanced the automation of my system setup. For anyone dealing with complex dotfiles setups or seeking a more efficient way to manage configurations, exploring Git submodules and yadm is highly recommended.\nThis journey has not only refined my setup but also highlighted the power of leveraging the right tools for the task at hand. The integration of Git submodules into my workflow stands as a testament to how thoughtful tooling choices can lead to a more streamlined and enjoyable development experience.\n","permalink":"http://localhost:1313/posts/git-submodules/","summary":"\u003chr\u003e\n\u003ch2 id=\"embracing-git-submodules-a-journey-to-a-seamless-dotfiles-setup\"\u003eEmbracing Git Submodules: A Journey to a Seamless Dotfiles Setup\u003c/h2\u003e\n\u003cp\u003eI had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was.\nIn my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\u003c/p\u003e","title":"Git Submodules"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"My First Post"},{"content":"Income Tax for Noobs Disclaimer This content contains very basic information about how taxation works. Please refer to official govt sites for specific information. This is not any kind of advice on how to file your Income tax and returns but just basic explanation of it. This content is for educational purposes only.\nSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\nSo I thought why not try to understand how it works to safeguard myself (and my money). While learning about it, I thought I can share the knowledge about the same, so here we are.\nSince I am a salaried person like most people, I\u0026rsquo;ll only discuss the same here.\nTaxable Income Part of your income which you are obliged to pay taxes on. The taxable income will eventually decide your tax slab.\nTax slabs is just rules that if you have taxable income over let\u0026rsquo;s say 7 Lakhs. then you have to pay 10% (for example) as an income tax on it. That means 70,000 will be your income tax.\nSounds like a lot. So we have some ways to reduce the tax amount you pay. Here is where you have to grind your brain for the most part.\nDeductions Rebates Exemptions ","permalink":"http://localhost:1313/posts/income-tax-for-noobs/","summary":"\u003ch1 id=\"income-tax-for-noobs\"\u003eIncome Tax for Noobs\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content contains very basic information about how taxation works. Please refer to official govt sites for specific information.\nThis is not any kind of advice on how to file your Income tax and returns but just basic explanation of it.\nThis content is for educational purposes only.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\u003c/p\u003e","title":"Income Tax for Noobs"},{"content":" Finance for noobs I come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\nDisclaimer This content is primarily relevant to India and sometimes US markets. The content here is purely for educational purposes. This is not financial advice.\nStocks Stock is basically ownership of a company.\nUsual ways that people make profit from a stock is:\nPrice appreciation: you bought it for 100 rupees, sold for 200. profit of 100 in your pocket. Dividends: company gives out profits to all owners yearly or so. But this is upto company whether they want to give away or not. Mutual Funds I growed up watching mutual funds advertisements many times, never really understood what they meant.\nA very common example used to explain it is a basket of stocks. However, I think most simple way to explain it is:\nIt is a collection of different stock (and stock like stuff). Reason for it to be a collection is so that risk is reduced.\nThis is done because investing solely in a single company is very high risk. What if one day there is some negative PR, and company stock hits rock bottom. Investing little bit in many companies will save u from this loss because profit of some other place can help you.\nYou will hear a popular saying, \u0026ldquo;Don\u0026rsquo;t put all your eggs in one basket.\u0026rdquo; This is what they\u0026rsquo;re talking about.\nPortfolio of a fund means which stocks they have in their collection. But your portfolio means what all of the investments you are holding.\nOne more thing u will hear is that there are stock market index funds. Think of these also as a collection of stocks.\nIn india we have two main stock indices:\nNifty-50: Top 50 companies in National Stock Exchange (NSE) Sensex: Top 30 companies in Bombay Stock Exchange (BSE) A Stock exchange is basically a place where people can sell or buy stocks under some party like Govt monitoring them. Governments try to keep regulations in place so that people don\u0026rsquo;t misbehave.\nAn index is actually not a mutual fund. It is just a public list for people to know how market is doing overall.\nAny mutual fund can mimic the index. So it means they keep their investments only in Nifty 50 for example. These mutual funds are called an Index fund or ETFs.\nNow you may wonder, why they are called \u0026ldquo;mutual\u0026rdquo; funds. What happens is that many people buy a mutual fund in bulk/pool.\nSo mutual means collective ownership/sharing. This means profits and losses are equally shared among all the investors.\nWho does this?\nFunds are managed by Asset Management Companies (AMC). They have their fund managers who speculate the market for returns. Since they\u0026rsquo;re doing the heavy lifting of market research and you are just putting money in, they charge you a premium.\nThis premium is called as \u0026ldquo;Expense ratio\u0026rdquo;. A 1% expense ratio means on investing 100 rupees, you have to pay 1 rupee to the AMC every year. Lastly, you will hear types of mutual funds:\nSmall cap: invest mostly in small scale companies, high risk, high reward. Mid cap: invest mostly in medium scale companies, quite stable, medium risk, medium reward. Large cap: invest mostly in large scale companies, low risk, low reward. so, in short, small scale startups can fail easily and if they boom, they reward generously too and large scale companies stock price is table so not much amount of profit, but the stock price won\u0026rsquo;t be bouncing up and down too much.\nMetrics CAGR So if you looked at any ads for mututal funds, you must have seen a metric called CAGR.\nFull form: Compound Annual Growth Rate. Basically, it is avg growth rate on a yearly basis. Growth means how much your investment increased in value. Like buying a Tata stock which was 100 rupees now became 200, so it is 100% growth.\nLet\u0026rsquo;s say u bought a mutual fund with a CAGR of 30%. But you don\u0026rsquo;t know if the fund was really lucky that one year it growed by 150% and rest of the time with 10%.\nThe problem with only looking at one metric is that you will lose insight on other important stuff. Think of it like you need to have an idea of the bigger picture of the market to make profit consistently.\nThere are a lot of metrics like:\nSharpe ratio Sharpe is basically the ratio of return over risk. So you for example, you are given two choices of buy a house.\nHouse A will give you 100% returns i.e. double the investment. It\u0026rsquo;s a very nice sea-faced apartment. House B will give you 10% returns.\nYou would buy House A, seems like a no-brainer.\nBut if something happens one day like a tsunami or something, House A will be washed way in it. So you have the risk of losing entire investment you put in. House B is in reletively safe area, no earthquakes, no natural disasters.\nWould you still buy house A now?\nSo this is what return to risk ratio does. You know how much returns you can make but you also need to know how safe investment it is.\nBeta Measures the volatility (how much a stock jumps up or down) compared to market.\nβ = 1 → moves with market β \u0026gt; 1 → more volatile than market β \u0026lt; 1 → less volatile than market β \u0026lt; 0 → moves opposite to market Capture ratio Financial Assets So I\u0026rsquo;ve been talking about stocks all the way. But there are also more types of it which are different but they work in same manner. But I think for today, just have a short overview on what they are:\n1. Equity / Stocks Ownership in a company. Profit from price appreciation and dividends. 2. Debt / Bonds Lending money to government or corporations. Earn fixed interest (aka coupon). Quite low risk, therefore low returns. 3. Cash \u0026amp; Cash Equivalents Bank deposits (like Fixed Deposits), money market instruments, treasury bills. Very low risk, highly liquid. 4. Derivatives Financial contracts whose value depends on an underlying asset. Examples: Futures, Options, Swaps. 5. Mutual Funds \u0026amp; ETFs Pooled investments in a mix of stocks, bonds, or other assets. Diversified risk. 6. Commodities Physical goods like gold, silver, oil, agricultural products. Can be invested via commodity ETFs or futures. 7. Real Estate / Property Residential, commercial, or land. Can generate rental income and capital gains. 8. Alternative Investments Hedge funds, private equity, crypto, collectibles. Typically higher risk, lower liquidity. ","permalink":"http://localhost:1313/posts/fin-for-noobs/","summary":"\u003chr\u003e\n\u003ch1 id=\"finance-for-noobs\"\u003eFinance for noobs\u003c/h1\u003e\n\u003cp\u003eI come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content is primarily relevant to India and sometimes US markets.\nThe content here is purely for educational purposes.\n\u003cstrong\u003eThis is not financial advice.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"stocks\"\u003eStocks\u003c/h2\u003e\n\u003cp\u003eStock is basically ownership of a company.\u003c/p\u003e\n\u003cp\u003eUsual ways that people make profit from a stock is:\u003c/p\u003e","title":"Finance for Noobs"},{"content":"Huffman Coding Huffman Coding is a popular algorithm used for data compression. It was developed by David A. Huffman in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\nTable of Contents Introduction How Huffman Coding Works Example of Huffman Coding Decoding with Huffman Code Advantages of Huffman Coding Applications of Huffman Coding Limitations of Huffman Coding Introduction Huffman Coding is a lossless compression algorithm, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\nHow Huffman Coding Works Step-by-Step Process Frequency Calculation:\nCount the frequency of each character in the data. Create Leaf Nodes:\nFor each character, create a leaf node containing its frequency and value. Build a Priority Queue:\nInsert all leaf nodes into a priority queue (or min-heap), sorted by frequency (smallest frequency at the top). Construct the Huffman Tree:\nRepeat the following until only one node remains in the priority queue: Extract the two nodes with the lowest frequency. Create a new node with a frequency equal to the sum of these two nodes. Set the two extracted nodes as the left and right children of the new node. Insert the new node back into the priority queue. The last remaining node is the root of the Huffman Tree. Assign Codes:\nTraverse the Huffman Tree from the root to each leaf node. Assign a binary 0 for each left edge and 1 for each right edge. The path to each character forms its Huffman Code. Example of Huffman Coding Consider the following example data:\nCharacter Frequency A 5 B 9 C 12 D 13 E 16 F 45 Step 1: Build the Huffman Tree Start with individual nodes sorted by frequency. Merge nodes with the lowest frequencies until only one node remains. The process would look like this:\nCombine A (5) and B (9) → New Node (14) Combine C (12) and D (13) → New Node (25) Combine New Node (14) and E (16) → New Node (30) Combine New Node (25) and F (45) → New Node (70) Combine New Node (30) and New Node (70) → Final Root (100) Step 2: Assign Codes After constructing the Huffman Tree, assign binary codes based on the path to each character:\nCharacter Huffman Code A 1100 B 1101 C 100 D 101 E 111 F 0 Result: The character with the highest frequency (F) has the shortest code (0), and characters with lower frequencies have longer codes.\nEncoding Example If we encode the string ABCD, it would be:\nA → 1100 B → 1101 C → 100 D → 101 Encoded string: 11001101100101\nDecoding with Huffman Code Decoding is performed by traversing the Huffman Tree:\nStart at the root. For each 0, move left; for each 1, move right. When a leaf node is reached, add the character to the output. Return to the root and repeat until the entire encoded string is decoded. Advantages of Huffman Coding Lossless Compression: No data is lost during compression. Efficiency: Saves space by assigning shorter codes to more frequent characters. Optimal for Given Frequencies: Huffman Coding guarantees the minimum number of bits required for a set of characters based on their frequencies. Limitations of Huffman Coding Fixed Frequencies: Huffman Coding is optimal for a fixed set of frequencies. Changes in frequency distribution may lead to inefficiency. Not Suitable for Real-Time Applications: For large and variable data, the tree-building process can be slow. Suboptimal for Small Files: May add overhead for very small files where the additional tree data outweighs compression benefits. Applications of Huffman Coding Data Compression:\nWidely used in file compression formats like ZIP and RAR. Multimedia Compression:\nUtilized in JPEG and MP3 formats to reduce file size. Text Compression:\nUseful in compressing text files and emails for faster transmission. Telecommunication:\nEmployed in transmission protocols to optimize data transfer efficiency. Data Transmission:\nApplied in network data packet optimization for reducing bandwidth usage. Summary Huffman Coding is a fundamental algorithm for lossless data compression, leveraging variable-length encoding to minimize storage and bandwidth requirements. By prioritizing more frequent characters with shorter codes, it efficiently reduces data size. Its applications span various fields, including file compression, multimedia, and network optimization, making it a cornerstone of efficient data handling in digital systems.\n","permalink":"http://localhost:1313/posts/huffman-coding/","summary":"\u003ch1 id=\"huffman-coding\"\u003eHuffman Coding\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eHuffman Coding\u003c/strong\u003e is a popular algorithm used for data compression. It was developed by \u003cstrong\u003eDavid A. Huffman\u003c/strong\u003e in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\u003c/p\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#how-huffman-coding-works\"\u003eHow Huffman Coding Works\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#example-of-huffman-coding\"\u003eExample of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#decoding-with-huffman-code\"\u003eDecoding with Huffman Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#advantages-of-huffman-coding\"\u003eAdvantages of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#applications-of-huffman-coding\"\u003eApplications of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#limitations-of-huffman-coding\"\u003eLimitations of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eHuffman Coding is a \u003cstrong\u003elossless compression algorithm\u003c/strong\u003e, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\u003c/p\u003e","title":"Huffman Coding"},{"content":" Embracing Git Submodules: A Journey to a Seamless Dotfiles Setup I had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was. In my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\nThe Challenge Managing dotfiles is a daunting task, especially when dealing with a complex array of configurations spread across multitudes of applications and tools. Initially, I used traditional methods like stow. But, as my setup kept evolving, I needed an even more sophisticated solution to handle not just my primary dotfiles but also various submodules, such as for Neovim.\nDiscovering Git Submodules All I heard about submodules was the scary stories of how messy it can get. However, Git submodules are a powerful feature that allows you to include and manage repositories within a repository. This feature became a game-changer in my quest for a cleaner setup. Here’s why:\n1. Seamless Integration Using Git submodules, I could integrate external repositories directly into my dotfiles repository. For e.g, integrating a Neovim configuration repository as a submodule meant that updates to plugins or configurations could be managed seamlessly without disrupting the primary dotfiles setup.\n2. Simplified Updates Managing updates with Git submodules turned out to be straightforward. With commands like git submodule update --init --recursive, I could ensure that all submodules were initialized and up-to-date with just a single command. This eliminated the need for manual updates and checks, saving time and reducing errors.\n3. Enhanced Organization By organizing my configurations into separate repositories and including them as submodules, I achieved a cleaner, more modular setup. This approach made it easier to maintain and update each component individually while keeping the main repository organized.\nThe Transition to yadm The journey didn’t stop with Git submodules. I transitioned to using yadm (Yet Another Dotfiles Manager), which enhanced the management of my dotfiles even further. Here’s how yadm fit into the picture:\n1. Advanced Dotfiles Management yadm offered advanced features tailored for dotfiles management. It provided built-in support for handling dotfiles repositories and their submodules. With commands like yadm clone, yadm pull, and yadm submodule update, I could effortlessly manage and synchronize my dotfiles across systems.\n2. Automation and Consistency Initially, it felt very taxating to think of yadm as a substitue for git with dotfiles controlling power, but after around 20 or so minutes, I was convinced that this the way I wanted to manage my dotfiles all along. No sucky symlinks, no confusion, just a simple repo which stores what I need to store without the agressive .gitignore in my home directory. Incorporating yadm into my Ansible playbook automated the setup process. The playbook cloned the dotfiles repository, executed a bootstrap script, and ensured that all submodules were initialized and updated. This automation ensured consistency across setups, reducing manual intervention and potential configuration drift.\n3. Streamlined Configuration Using yadm streamlined the configuration of my system. It handled the intricacies of managing dotfiles and submodules, allowed me to focus on enhancing my development environment rather than wrestling with configuration issues. If you read it so far, I think you should give it a fair try, it will be worth it.\nConclusion Embracing Git submodules and yadm has been a transformative experience. It has simplified the management of my dotfiles, improved organization, and enhanced the automation of my system setup. For anyone dealing with complex dotfiles setups or seeking a more efficient way to manage configurations, exploring Git submodules and yadm is highly recommended.\nThis journey has not only refined my setup but also highlighted the power of leveraging the right tools for the task at hand. The integration of Git submodules into my workflow stands as a testament to how thoughtful tooling choices can lead to a more streamlined and enjoyable development experience.\n","permalink":"http://localhost:1313/posts/git-submodules/","summary":"\u003chr\u003e\n\u003ch2 id=\"embracing-git-submodules-a-journey-to-a-seamless-dotfiles-setup\"\u003eEmbracing Git Submodules: A Journey to a Seamless Dotfiles Setup\u003c/h2\u003e\n\u003cp\u003eI had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was.\nIn my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\u003c/p\u003e","title":"Git Submodules"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"My First Post"},{"content":"Income Tax for Noobs Disclaimer This content contains very basic information about how taxation works. Please refer to official govt sites for specific information. This is not any kind of advice on how to file your Income tax and returns but just basic explanation of it. This content is for educational purposes only.\nSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\nSo I thought why not try to understand how it works to safeguard myself (and my money). While learning about it, I thought I can share the knowledge about the same, so here we are.\nSince I am a salaried person like most people, I\u0026rsquo;ll only discuss the same here.\nTaxable Income Part of your income which you are obliged to pay taxes on. The taxable income will eventually decide your tax slab.\nTax slabs is just rules that if you have taxable income over let\u0026rsquo;s say 7 Lakhs. then you have to pay 10% (for example) as an income tax on it. That means 70,000 will be your income tax.\nSounds like a lot. So we have some ways to reduce the tax amount you pay. Here is where you have to grind your brain for the most part.\nDeductions: make your taxable money smaller so you pay less tax, sometimes even at a lower rate. Rebates: Exemptions ","permalink":"http://localhost:1313/posts/income-tax-for-noobs/","summary":"\u003ch1 id=\"income-tax-for-noobs\"\u003eIncome Tax for Noobs\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content contains very basic information about how taxation works. Please refer to official govt sites for specific information.\nThis is not any kind of advice on how to file your Income tax and returns but just basic explanation of it.\nThis content is for educational purposes only.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\u003c/p\u003e","title":"Income Tax for Noobs"},{"content":" Finance for noobs I come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\nDisclaimer This content is primarily relevant to India and sometimes US markets. The content here is purely for educational purposes. This is not financial advice.\nStocks Stock is basically ownership of a company.\nUsual ways that people make profit from a stock is:\nPrice appreciation: you bought it for 100 rupees, sold for 200. profit of 100 in your pocket. Dividends: company gives out profits to all owners yearly or so. But this is upto company whether they want to give away or not. Mutual Funds I growed up watching mutual funds advertisements many times, never really understood what they meant.\nA very common example used to explain it is a basket of stocks. However, I think most simple way to explain it is:\nIt is a collection of different stock (and stock like stuff). Reason for it to be a collection is so that risk is reduced.\nThis is done because investing solely in a single company is very high risk. What if one day there is some negative PR, and company stock hits rock bottom. Investing little bit in many companies will save u from this loss because profit of some other place can help you.\nYou will hear a popular saying, \u0026ldquo;Don\u0026rsquo;t put all your eggs in one basket.\u0026rdquo; This is what they\u0026rsquo;re talking about.\nPortfolio of a fund means which stocks they have in their collection. But your portfolio means what all of the investments you are holding.\nOne more thing u will hear is that there are stock market index funds. Think of these also as a collection of stocks.\nIn india we have two main stock indices:\nNifty-50: Top 50 companies in National Stock Exchange (NSE) Sensex: Top 30 companies in Bombay Stock Exchange (BSE) A Stock exchange is basically a place where people can sell or buy stocks under some party like Govt monitoring them. Governments try to keep regulations in place so that people don\u0026rsquo;t misbehave.\nAn index is actually not a mutual fund. It is just a public list for people to know how market is doing overall.\nAny mutual fund can mimic the index. So it means they keep their investments only in Nifty 50 for example. These mutual funds are called an Index fund or ETFs.\nNow you may wonder, why they are called \u0026ldquo;mutual\u0026rdquo; funds. What happens is that many people buy a mutual fund in bulk/pool.\nSo mutual means collective ownership/sharing. This means profits and losses are equally shared among all the investors.\nWho does this?\nFunds are managed by Asset Management Companies (AMC). They have their fund managers who speculate the market for returns. Since they\u0026rsquo;re doing the heavy lifting of market research and you are just putting money in, they charge you a premium.\nThis premium is called as \u0026ldquo;Expense ratio\u0026rdquo;. A 1% expense ratio means on investing 100 rupees, you have to pay 1 rupee to the AMC every year. Lastly, you will hear types of mutual funds:\nSmall cap: invest mostly in small scale companies, high risk, high reward. Mid cap: invest mostly in medium scale companies, quite stable, medium risk, medium reward. Large cap: invest mostly in large scale companies, low risk, low reward. so, in short, small scale startups can fail easily and if they boom, they reward generously too and large scale companies stock price is table so not much amount of profit, but the stock price won\u0026rsquo;t be bouncing up and down too much.\nMetrics CAGR So if you looked at any ads for mututal funds, you must have seen a metric called CAGR.\nFull form: Compound Annual Growth Rate. Basically, it is avg growth rate on a yearly basis. Growth means how much your investment increased in value. Like buying a Tata stock which was 100 rupees now became 200, so it is 100% growth.\nLet\u0026rsquo;s say u bought a mutual fund with a CAGR of 30%. But you don\u0026rsquo;t know if the fund was really lucky that one year it growed by 150% and rest of the time with 10%.\nThe problem with only looking at one metric is that you will lose insight on other important stuff. Think of it like you need to have an idea of the bigger picture of the market to make profit consistently.\nThere are a lot of metrics like:\nSharpe ratio Sharpe is basically the ratio of return over risk. So you for example, you are given two choices of buy a house.\nHouse A will give you 100% returns i.e. double the investment. It\u0026rsquo;s a very nice sea-faced apartment. House B will give you 10% returns.\nYou would buy House A, seems like a no-brainer.\nBut if something happens one day like a tsunami or something, House A will be washed way in it. So you have the risk of losing entire investment you put in. House B is in reletively safe area, no earthquakes, no natural disasters.\nWould you still buy house A now?\nSo this is what return to risk ratio does. You know how much returns you can make but you also need to know how safe investment it is.\nBeta Measures the volatility (how much a stock jumps up or down) compared to market.\nβ = 1 → moves with market β \u0026gt; 1 → more volatile than market β \u0026lt; 1 → less volatile than market β \u0026lt; 0 → moves opposite to market Capture ratio Financial Assets So I\u0026rsquo;ve been talking about stocks all the way. But there are also more types of it which are different but they work in same manner. But I think for today, just have a short overview on what they are:\n1. Equity / Stocks Ownership in a company. Profit from price appreciation and dividends. 2. Debt / Bonds Lending money to government or corporations. Earn fixed interest (aka coupon). Quite low risk, therefore low returns. 3. Cash \u0026amp; Cash Equivalents Bank deposits (like Fixed Deposits), money market instruments, treasury bills. Very low risk, highly liquid. 4. Derivatives Financial contracts whose value depends on an underlying asset. Examples: Futures, Options, Swaps. 5. Mutual Funds \u0026amp; ETFs Pooled investments in a mix of stocks, bonds, or other assets. Diversified risk. 6. Commodities Physical goods like gold, silver, oil, agricultural products. Can be invested via commodity ETFs or futures. 7. Real Estate / Property Residential, commercial, or land. Can generate rental income and capital gains. 8. Alternative Investments Hedge funds, private equity, crypto, collectibles. Typically higher risk, lower liquidity. ","permalink":"http://localhost:1313/posts/fin-for-noobs/","summary":"\u003chr\u003e\n\u003ch1 id=\"finance-for-noobs\"\u003eFinance for noobs\u003c/h1\u003e\n\u003cp\u003eI come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content is primarily relevant to India and sometimes US markets.\nThe content here is purely for educational purposes.\n\u003cstrong\u003eThis is not financial advice.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"stocks\"\u003eStocks\u003c/h2\u003e\n\u003cp\u003eStock is basically ownership of a company.\u003c/p\u003e\n\u003cp\u003eUsual ways that people make profit from a stock is:\u003c/p\u003e","title":"Finance for Noobs"},{"content":"Huffman Coding Huffman Coding is a popular algorithm used for data compression. It was developed by David A. Huffman in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\nTable of Contents Introduction How Huffman Coding Works Example of Huffman Coding Decoding with Huffman Code Advantages of Huffman Coding Applications of Huffman Coding Limitations of Huffman Coding Introduction Huffman Coding is a lossless compression algorithm, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\nHow Huffman Coding Works Step-by-Step Process Frequency Calculation:\nCount the frequency of each character in the data. Create Leaf Nodes:\nFor each character, create a leaf node containing its frequency and value. Build a Priority Queue:\nInsert all leaf nodes into a priority queue (or min-heap), sorted by frequency (smallest frequency at the top). Construct the Huffman Tree:\nRepeat the following until only one node remains in the priority queue: Extract the two nodes with the lowest frequency. Create a new node with a frequency equal to the sum of these two nodes. Set the two extracted nodes as the left and right children of the new node. Insert the new node back into the priority queue. The last remaining node is the root of the Huffman Tree. Assign Codes:\nTraverse the Huffman Tree from the root to each leaf node. Assign a binary 0 for each left edge and 1 for each right edge. The path to each character forms its Huffman Code. Example of Huffman Coding Consider the following example data:\nCharacter Frequency A 5 B 9 C 12 D 13 E 16 F 45 Step 1: Build the Huffman Tree Start with individual nodes sorted by frequency. Merge nodes with the lowest frequencies until only one node remains. The process would look like this:\nCombine A (5) and B (9) → New Node (14) Combine C (12) and D (13) → New Node (25) Combine New Node (14) and E (16) → New Node (30) Combine New Node (25) and F (45) → New Node (70) Combine New Node (30) and New Node (70) → Final Root (100) Step 2: Assign Codes After constructing the Huffman Tree, assign binary codes based on the path to each character:\nCharacter Huffman Code A 1100 B 1101 C 100 D 101 E 111 F 0 Result: The character with the highest frequency (F) has the shortest code (0), and characters with lower frequencies have longer codes.\nEncoding Example If we encode the string ABCD, it would be:\nA → 1100 B → 1101 C → 100 D → 101 Encoded string: 11001101100101\nDecoding with Huffman Code Decoding is performed by traversing the Huffman Tree:\nStart at the root. For each 0, move left; for each 1, move right. When a leaf node is reached, add the character to the output. Return to the root and repeat until the entire encoded string is decoded. Advantages of Huffman Coding Lossless Compression: No data is lost during compression. Efficiency: Saves space by assigning shorter codes to more frequent characters. Optimal for Given Frequencies: Huffman Coding guarantees the minimum number of bits required for a set of characters based on their frequencies. Limitations of Huffman Coding Fixed Frequencies: Huffman Coding is optimal for a fixed set of frequencies. Changes in frequency distribution may lead to inefficiency. Not Suitable for Real-Time Applications: For large and variable data, the tree-building process can be slow. Suboptimal for Small Files: May add overhead for very small files where the additional tree data outweighs compression benefits. Applications of Huffman Coding Data Compression:\nWidely used in file compression formats like ZIP and RAR. Multimedia Compression:\nUtilized in JPEG and MP3 formats to reduce file size. Text Compression:\nUseful in compressing text files and emails for faster transmission. Telecommunication:\nEmployed in transmission protocols to optimize data transfer efficiency. Data Transmission:\nApplied in network data packet optimization for reducing bandwidth usage. Summary Huffman Coding is a fundamental algorithm for lossless data compression, leveraging variable-length encoding to minimize storage and bandwidth requirements. By prioritizing more frequent characters with shorter codes, it efficiently reduces data size. Its applications span various fields, including file compression, multimedia, and network optimization, making it a cornerstone of efficient data handling in digital systems.\n","permalink":"http://localhost:1313/posts/huffman-coding/","summary":"\u003ch1 id=\"huffman-coding\"\u003eHuffman Coding\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eHuffman Coding\u003c/strong\u003e is a popular algorithm used for data compression. It was developed by \u003cstrong\u003eDavid A. Huffman\u003c/strong\u003e in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\u003c/p\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#how-huffman-coding-works\"\u003eHow Huffman Coding Works\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#example-of-huffman-coding\"\u003eExample of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#decoding-with-huffman-code\"\u003eDecoding with Huffman Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#advantages-of-huffman-coding\"\u003eAdvantages of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#applications-of-huffman-coding\"\u003eApplications of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#limitations-of-huffman-coding\"\u003eLimitations of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eHuffman Coding is a \u003cstrong\u003elossless compression algorithm\u003c/strong\u003e, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\u003c/p\u003e","title":"Huffman Coding"},{"content":" Embracing Git Submodules: A Journey to a Seamless Dotfiles Setup I had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was. In my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\nThe Challenge Managing dotfiles is a daunting task, especially when dealing with a complex array of configurations spread across multitudes of applications and tools. Initially, I used traditional methods like stow. But, as my setup kept evolving, I needed an even more sophisticated solution to handle not just my primary dotfiles but also various submodules, such as for Neovim.\nDiscovering Git Submodules All I heard about submodules was the scary stories of how messy it can get. However, Git submodules are a powerful feature that allows you to include and manage repositories within a repository. This feature became a game-changer in my quest for a cleaner setup. Here’s why:\n1. Seamless Integration Using Git submodules, I could integrate external repositories directly into my dotfiles repository. For e.g, integrating a Neovim configuration repository as a submodule meant that updates to plugins or configurations could be managed seamlessly without disrupting the primary dotfiles setup.\n2. Simplified Updates Managing updates with Git submodules turned out to be straightforward. With commands like git submodule update --init --recursive, I could ensure that all submodules were initialized and up-to-date with just a single command. This eliminated the need for manual updates and checks, saving time and reducing errors.\n3. Enhanced Organization By organizing my configurations into separate repositories and including them as submodules, I achieved a cleaner, more modular setup. This approach made it easier to maintain and update each component individually while keeping the main repository organized.\nThe Transition to yadm The journey didn’t stop with Git submodules. I transitioned to using yadm (Yet Another Dotfiles Manager), which enhanced the management of my dotfiles even further. Here’s how yadm fit into the picture:\n1. Advanced Dotfiles Management yadm offered advanced features tailored for dotfiles management. It provided built-in support for handling dotfiles repositories and their submodules. With commands like yadm clone, yadm pull, and yadm submodule update, I could effortlessly manage and synchronize my dotfiles across systems.\n2. Automation and Consistency Initially, it felt very taxating to think of yadm as a substitue for git with dotfiles controlling power, but after around 20 or so minutes, I was convinced that this the way I wanted to manage my dotfiles all along. No sucky symlinks, no confusion, just a simple repo which stores what I need to store without the agressive .gitignore in my home directory. Incorporating yadm into my Ansible playbook automated the setup process. The playbook cloned the dotfiles repository, executed a bootstrap script, and ensured that all submodules were initialized and updated. This automation ensured consistency across setups, reducing manual intervention and potential configuration drift.\n3. Streamlined Configuration Using yadm streamlined the configuration of my system. It handled the intricacies of managing dotfiles and submodules, allowed me to focus on enhancing my development environment rather than wrestling with configuration issues. If you read it so far, I think you should give it a fair try, it will be worth it.\nConclusion Embracing Git submodules and yadm has been a transformative experience. It has simplified the management of my dotfiles, improved organization, and enhanced the automation of my system setup. For anyone dealing with complex dotfiles setups or seeking a more efficient way to manage configurations, exploring Git submodules and yadm is highly recommended.\nThis journey has not only refined my setup but also highlighted the power of leveraging the right tools for the task at hand. The integration of Git submodules into my workflow stands as a testament to how thoughtful tooling choices can lead to a more streamlined and enjoyable development experience.\n","permalink":"http://localhost:1313/posts/git-submodules/","summary":"\u003chr\u003e\n\u003ch2 id=\"embracing-git-submodules-a-journey-to-a-seamless-dotfiles-setup\"\u003eEmbracing Git Submodules: A Journey to a Seamless Dotfiles Setup\u003c/h2\u003e\n\u003cp\u003eI had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was.\nIn my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\u003c/p\u003e","title":"Git Submodules"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"My First Post"},{"content":"Income Tax for Noobs Disclaimer This content contains very basic information about how taxation works. Please refer to official govt sites for specific information. This is not any kind of advice on how to file your Income tax and returns but just basic explanation of it. This content is for educational purposes only.\nSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\nSo I thought why not try to understand how it works to safeguard myself (and my money). While learning about it, I thought I can share the knowledge about the same, so here we are.\nSince I am a salaried person like most people, I\u0026rsquo;ll only discuss the same here.\nTaxable Income Part of your income which you are obliged to pay taxes on. The taxable income will eventually decide your tax slab.\nTax slabs is just rules that if you have taxable income over let\u0026rsquo;s say 7 Lakhs. then you have to pay 10% (for example) as an income tax on it. That means 70,000 will be your income tax.\nSounds like a lot. So we have some ways to reduce the tax amount you pay. Here is where you have to grind your brain for the most part.\nDeductions: make your taxable money smaller so you pay less tax, sometimes even at a lower rate. Rebates: reduce the final tax amount directly. Exemptions: ignore some of your income to come into taxable. ","permalink":"http://localhost:1313/posts/income-tax-for-noobs/","summary":"\u003ch1 id=\"income-tax-for-noobs\"\u003eIncome Tax for Noobs\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content contains very basic information about how taxation works. Please refer to official govt sites for specific information.\nThis is not any kind of advice on how to file your Income tax and returns but just basic explanation of it.\nThis content is for educational purposes only.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\u003c/p\u003e","title":"Income Tax for Noobs"},{"content":" Finance for noobs I come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\nDisclaimer This content is primarily relevant to India and sometimes US markets. The content here is purely for educational purposes. This is not financial advice.\nStocks Stock is basically ownership of a company.\nUsual ways that people make profit from a stock is:\nPrice appreciation: you bought it for 100 rupees, sold for 200. profit of 100 in your pocket. Dividends: company gives out profits to all owners yearly or so. But this is upto company whether they want to give away or not. Mutual Funds I growed up watching mutual funds advertisements many times, never really understood what they meant.\nA very common example used to explain it is a basket of stocks. However, I think most simple way to explain it is:\nIt is a collection of different stock (and stock like stuff). Reason for it to be a collection is so that risk is reduced.\nThis is done because investing solely in a single company is very high risk. What if one day there is some negative PR, and company stock hits rock bottom. Investing little bit in many companies will save u from this loss because profit of some other place can help you.\nYou will hear a popular saying, \u0026ldquo;Don\u0026rsquo;t put all your eggs in one basket.\u0026rdquo; This is what they\u0026rsquo;re talking about.\nPortfolio of a fund means which stocks they have in their collection. But your portfolio means what all of the investments you are holding.\nOne more thing u will hear is that there are stock market index funds. Think of these also as a collection of stocks.\nIn india we have two main stock indices:\nNifty-50: Top 50 companies in National Stock Exchange (NSE) Sensex: Top 30 companies in Bombay Stock Exchange (BSE) A Stock exchange is basically a place where people can sell or buy stocks under some party like Govt monitoring them. Governments try to keep regulations in place so that people don\u0026rsquo;t misbehave.\nAn index is actually not a mutual fund. It is just a public list for people to know how market is doing overall.\nAny mutual fund can mimic the index. So it means they keep their investments only in Nifty 50 for example. These mutual funds are called an Index fund or ETFs.\nNow you may wonder, why they are called \u0026ldquo;mutual\u0026rdquo; funds. What happens is that many people buy a mutual fund in bulk/pool.\nSo mutual means collective ownership/sharing. This means profits and losses are equally shared among all the investors.\nWho does this?\nFunds are managed by Asset Management Companies (AMC). They have their fund managers who speculate the market for returns. Since they\u0026rsquo;re doing the heavy lifting of market research and you are just putting money in, they charge you a premium.\nThis premium is called as \u0026ldquo;Expense ratio\u0026rdquo;. A 1% expense ratio means on investing 100 rupees, you have to pay 1 rupee to the AMC every year. Lastly, you will hear types of mutual funds:\nSmall cap: invest mostly in small scale companies, high risk, high reward. Mid cap: invest mostly in medium scale companies, quite stable, medium risk, medium reward. Large cap: invest mostly in large scale companies, low risk, low reward. so, in short, small scale startups can fail easily and if they boom, they reward generously too and large scale companies stock price is table so not much amount of profit, but the stock price won\u0026rsquo;t be bouncing up and down too much.\nMetrics CAGR So if you looked at any ads for mututal funds, you must have seen a metric called CAGR.\nFull form: Compound Annual Growth Rate. Basically, it is avg growth rate on a yearly basis. Growth means how much your investment increased in value. Like buying a Tata stock which was 100 rupees now became 200, so it is 100% growth.\nLet\u0026rsquo;s say u bought a mutual fund with a CAGR of 30%. But you don\u0026rsquo;t know if the fund was really lucky that one year it growed by 150% and rest of the time with 10%.\nThe problem with only looking at one metric is that you will lose insight on other important stuff. Think of it like you need to have an idea of the bigger picture of the market to make profit consistently.\nThere are a lot of metrics like:\nSharpe ratio Sharpe is basically the ratio of return over risk. So you for example, you are given two choices of buy a house.\nHouse A will give you 100% returns i.e. double the investment. It\u0026rsquo;s a very nice sea-faced apartment. House B will give you 10% returns.\nYou would buy House A, seems like a no-brainer.\nBut if something happens one day like a tsunami or something, House A will be washed way in it. So you have the risk of losing entire investment you put in. House B is in reletively safe area, no earthquakes, no natural disasters.\nWould you still buy house A now?\nSo this is what return to risk ratio does. You know how much returns you can make but you also need to know how safe investment it is.\nBeta Measures the volatility (how much a stock jumps up or down) compared to market.\nβ = 1 → moves with market β \u0026gt; 1 → more volatile than market β \u0026lt; 1 → less volatile than market β \u0026lt; 0 → moves opposite to market Capture ratio Financial Assets So I\u0026rsquo;ve been talking about stocks all the way. But there are also more types of it which are different but they work in same manner. But I think for today, just have a short overview on what they are:\n1. Equity / Stocks Ownership in a company. Profit from price appreciation and dividends. 2. Debt / Bonds Lending money to government or corporations. Earn fixed interest (aka coupon). Quite low risk, therefore low returns. 3. Cash \u0026amp; Cash Equivalents Bank deposits (like Fixed Deposits), money market instruments, treasury bills. Very low risk, highly liquid. 4. Derivatives Financial contracts whose value depends on an underlying asset. Examples: Futures, Options, Swaps. 5. Mutual Funds \u0026amp; ETFs Pooled investments in a mix of stocks, bonds, or other assets. Diversified risk. 6. Commodities Physical goods like gold, silver, oil, agricultural products. Can be invested via commodity ETFs or futures. 7. Real Estate / Property Residential, commercial, or land. Can generate rental income and capital gains. 8. Alternative Investments Hedge funds, private equity, crypto, collectibles. Typically higher risk, lower liquidity. ","permalink":"http://localhost:1313/posts/fin-for-noobs/","summary":"\u003chr\u003e\n\u003ch1 id=\"finance-for-noobs\"\u003eFinance for noobs\u003c/h1\u003e\n\u003cp\u003eI come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content is primarily relevant to India and sometimes US markets.\nThe content here is purely for educational purposes.\n\u003cstrong\u003eThis is not financial advice.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"stocks\"\u003eStocks\u003c/h2\u003e\n\u003cp\u003eStock is basically ownership of a company.\u003c/p\u003e\n\u003cp\u003eUsual ways that people make profit from a stock is:\u003c/p\u003e","title":"Finance for Noobs"},{"content":"Huffman Coding Huffman Coding is a popular algorithm used for data compression. It was developed by David A. Huffman in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\nTable of Contents Introduction How Huffman Coding Works Example of Huffman Coding Decoding with Huffman Code Advantages of Huffman Coding Applications of Huffman Coding Limitations of Huffman Coding Introduction Huffman Coding is a lossless compression algorithm, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\nHow Huffman Coding Works Step-by-Step Process Frequency Calculation:\nCount the frequency of each character in the data. Create Leaf Nodes:\nFor each character, create a leaf node containing its frequency and value. Build a Priority Queue:\nInsert all leaf nodes into a priority queue (or min-heap), sorted by frequency (smallest frequency at the top). Construct the Huffman Tree:\nRepeat the following until only one node remains in the priority queue: Extract the two nodes with the lowest frequency. Create a new node with a frequency equal to the sum of these two nodes. Set the two extracted nodes as the left and right children of the new node. Insert the new node back into the priority queue. The last remaining node is the root of the Huffman Tree. Assign Codes:\nTraverse the Huffman Tree from the root to each leaf node. Assign a binary 0 for each left edge and 1 for each right edge. The path to each character forms its Huffman Code. Example of Huffman Coding Consider the following example data:\nCharacter Frequency A 5 B 9 C 12 D 13 E 16 F 45 Step 1: Build the Huffman Tree Start with individual nodes sorted by frequency. Merge nodes with the lowest frequencies until only one node remains. The process would look like this:\nCombine A (5) and B (9) → New Node (14) Combine C (12) and D (13) → New Node (25) Combine New Node (14) and E (16) → New Node (30) Combine New Node (25) and F (45) → New Node (70) Combine New Node (30) and New Node (70) → Final Root (100) Step 2: Assign Codes After constructing the Huffman Tree, assign binary codes based on the path to each character:\nCharacter Huffman Code A 1100 B 1101 C 100 D 101 E 111 F 0 Result: The character with the highest frequency (F) has the shortest code (0), and characters with lower frequencies have longer codes.\nEncoding Example If we encode the string ABCD, it would be:\nA → 1100 B → 1101 C → 100 D → 101 Encoded string: 11001101100101\nDecoding with Huffman Code Decoding is performed by traversing the Huffman Tree:\nStart at the root. For each 0, move left; for each 1, move right. When a leaf node is reached, add the character to the output. Return to the root and repeat until the entire encoded string is decoded. Advantages of Huffman Coding Lossless Compression: No data is lost during compression. Efficiency: Saves space by assigning shorter codes to more frequent characters. Optimal for Given Frequencies: Huffman Coding guarantees the minimum number of bits required for a set of characters based on their frequencies. Limitations of Huffman Coding Fixed Frequencies: Huffman Coding is optimal for a fixed set of frequencies. Changes in frequency distribution may lead to inefficiency. Not Suitable for Real-Time Applications: For large and variable data, the tree-building process can be slow. Suboptimal for Small Files: May add overhead for very small files where the additional tree data outweighs compression benefits. Applications of Huffman Coding Data Compression:\nWidely used in file compression formats like ZIP and RAR. Multimedia Compression:\nUtilized in JPEG and MP3 formats to reduce file size. Text Compression:\nUseful in compressing text files and emails for faster transmission. Telecommunication:\nEmployed in transmission protocols to optimize data transfer efficiency. Data Transmission:\nApplied in network data packet optimization for reducing bandwidth usage. Summary Huffman Coding is a fundamental algorithm for lossless data compression, leveraging variable-length encoding to minimize storage and bandwidth requirements. By prioritizing more frequent characters with shorter codes, it efficiently reduces data size. Its applications span various fields, including file compression, multimedia, and network optimization, making it a cornerstone of efficient data handling in digital systems.\n","permalink":"http://localhost:1313/posts/huffman-coding/","summary":"\u003ch1 id=\"huffman-coding\"\u003eHuffman Coding\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eHuffman Coding\u003c/strong\u003e is a popular algorithm used for data compression. It was developed by \u003cstrong\u003eDavid A. Huffman\u003c/strong\u003e in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\u003c/p\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#how-huffman-coding-works\"\u003eHow Huffman Coding Works\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#example-of-huffman-coding\"\u003eExample of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#decoding-with-huffman-code\"\u003eDecoding with Huffman Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#advantages-of-huffman-coding\"\u003eAdvantages of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#applications-of-huffman-coding\"\u003eApplications of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#limitations-of-huffman-coding\"\u003eLimitations of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eHuffman Coding is a \u003cstrong\u003elossless compression algorithm\u003c/strong\u003e, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\u003c/p\u003e","title":"Huffman Coding"},{"content":" Embracing Git Submodules: A Journey to a Seamless Dotfiles Setup I had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was. In my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\nThe Challenge Managing dotfiles is a daunting task, especially when dealing with a complex array of configurations spread across multitudes of applications and tools. Initially, I used traditional methods like stow. But, as my setup kept evolving, I needed an even more sophisticated solution to handle not just my primary dotfiles but also various submodules, such as for Neovim.\nDiscovering Git Submodules All I heard about submodules was the scary stories of how messy it can get. However, Git submodules are a powerful feature that allows you to include and manage repositories within a repository. This feature became a game-changer in my quest for a cleaner setup. Here’s why:\n1. Seamless Integration Using Git submodules, I could integrate external repositories directly into my dotfiles repository. For e.g, integrating a Neovim configuration repository as a submodule meant that updates to plugins or configurations could be managed seamlessly without disrupting the primary dotfiles setup.\n2. Simplified Updates Managing updates with Git submodules turned out to be straightforward. With commands like git submodule update --init --recursive, I could ensure that all submodules were initialized and up-to-date with just a single command. This eliminated the need for manual updates and checks, saving time and reducing errors.\n3. Enhanced Organization By organizing my configurations into separate repositories and including them as submodules, I achieved a cleaner, more modular setup. This approach made it easier to maintain and update each component individually while keeping the main repository organized.\nThe Transition to yadm The journey didn’t stop with Git submodules. I transitioned to using yadm (Yet Another Dotfiles Manager), which enhanced the management of my dotfiles even further. Here’s how yadm fit into the picture:\n1. Advanced Dotfiles Management yadm offered advanced features tailored for dotfiles management. It provided built-in support for handling dotfiles repositories and their submodules. With commands like yadm clone, yadm pull, and yadm submodule update, I could effortlessly manage and synchronize my dotfiles across systems.\n2. Automation and Consistency Initially, it felt very taxating to think of yadm as a substitue for git with dotfiles controlling power, but after around 20 or so minutes, I was convinced that this the way I wanted to manage my dotfiles all along. No sucky symlinks, no confusion, just a simple repo which stores what I need to store without the agressive .gitignore in my home directory. Incorporating yadm into my Ansible playbook automated the setup process. The playbook cloned the dotfiles repository, executed a bootstrap script, and ensured that all submodules were initialized and updated. This automation ensured consistency across setups, reducing manual intervention and potential configuration drift.\n3. Streamlined Configuration Using yadm streamlined the configuration of my system. It handled the intricacies of managing dotfiles and submodules, allowed me to focus on enhancing my development environment rather than wrestling with configuration issues. If you read it so far, I think you should give it a fair try, it will be worth it.\nConclusion Embracing Git submodules and yadm has been a transformative experience. It has simplified the management of my dotfiles, improved organization, and enhanced the automation of my system setup. For anyone dealing with complex dotfiles setups or seeking a more efficient way to manage configurations, exploring Git submodules and yadm is highly recommended.\nThis journey has not only refined my setup but also highlighted the power of leveraging the right tools for the task at hand. The integration of Git submodules into my workflow stands as a testament to how thoughtful tooling choices can lead to a more streamlined and enjoyable development experience.\n","permalink":"http://localhost:1313/posts/git-submodules/","summary":"\u003chr\u003e\n\u003ch2 id=\"embracing-git-submodules-a-journey-to-a-seamless-dotfiles-setup\"\u003eEmbracing Git Submodules: A Journey to a Seamless Dotfiles Setup\u003c/h2\u003e\n\u003cp\u003eI had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was.\nIn my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\u003c/p\u003e","title":"Git Submodules"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"My First Post"},{"content":"Income Tax for Noobs Disclaimer This content contains very basic information about how taxation works. Please refer to official govt sites for specific information. This is not any kind of advice on how to file your Income tax and returns but just basic explanation of it. This content is for educational purposes only.\nSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\nSo I thought why not try to understand how it works to safeguard myself (and my money). While learning about it, I thought I can share the knowledge about the same, so here we are.\nSince I am a salaried person like most people, I\u0026rsquo;ll only discuss the same here.\nTaxable Income Part of your income which you are obliged to pay taxes on. The taxable income will eventually decide your tax slab.\nTax slabs is just rules that if you have taxable income over let\u0026rsquo;s say 7 Lakhs. then you have to pay 10% (for example) as an income tax on it. That means 70,000 will be your income tax.\nSounds like a lot. So we have some ways to reduce the tax amount you pay. Here is where you have to grind your brain for the most part.\nDeductions: make your taxable money smaller so you pay less tax, sometimes even at a lower rate. Rebates: reduce the final tax amount directly. Exemptions: ignore some of your income to come into taxable. ","permalink":"http://localhost:1313/posts/income-tax-for-noobs/","summary":"\u003ch1 id=\"income-tax-for-noobs\"\u003eIncome Tax for Noobs\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content contains very basic information about how taxation works. Please refer to official govt sites for specific information.\nThis is not any kind of advice on how to file your Income tax and returns but just basic explanation of it.\nThis content is for educational purposes only.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\u003c/p\u003e","title":"Income Tax for Noobs"},{"content":" Finance for noobs I come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\nDisclaimer This content is primarily relevant to India and sometimes US markets. The content here is purely for educational purposes. This is not financial advice.\nStocks Stock is basically ownership of a company.\nUsual ways that people make profit from a stock is:\nPrice appreciation: you bought it for 100 rupees, sold for 200. profit of 100 in your pocket. Dividends: company gives out profits to all owners yearly or so. But this is upto company whether they want to give away or not. Mutual Funds I growed up watching mutual funds advertisements many times, never really understood what they meant.\nA very common example used to explain it is a basket of stocks. However, I think most simple way to explain it is:\nIt is a collection of different stock (and stock like stuff). Reason for it to be a collection is so that risk is reduced.\nThis is done because investing solely in a single company is very high risk. What if one day there is some negative PR, and company stock hits rock bottom. Investing little bit in many companies will save u from this loss because profit of some other place can help you.\nYou will hear a popular saying, \u0026ldquo;Don\u0026rsquo;t put all your eggs in one basket.\u0026rdquo; This is what they\u0026rsquo;re talking about.\nPortfolio of a fund means which stocks they have in their collection. But your portfolio means what all of the investments you are holding.\nOne more thing u will hear is that there are stock market index funds. Think of these also as a collection of stocks.\nIn india we have two main stock indices:\nNifty-50: Top 50 companies in National Stock Exchange (NSE) Sensex: Top 30 companies in Bombay Stock Exchange (BSE) A Stock exchange is basically a place where people can sell or buy stocks under some party like Govt monitoring them. Governments try to keep regulations in place so that people don\u0026rsquo;t misbehave.\nAn index is actually not a mutual fund. It is just a public list for people to know how market is doing overall.\nAny mutual fund can mimic the index. So it means they keep their investments only in Nifty 50 for example. These mutual funds are called an Index fund or ETFs.\nNow you may wonder, why they are called \u0026ldquo;mutual\u0026rdquo; funds. What happens is that many people buy a mutual fund in bulk/pool.\nSo mutual means collective ownership/sharing. This means profits and losses are equally shared among all the investors.\nWho does this?\nFunds are managed by Asset Management Companies (AMC). They have their fund managers who speculate the market for returns. Since they\u0026rsquo;re doing the heavy lifting of market research and you are just putting money in, they charge you a premium.\nThis premium is called as \u0026ldquo;Expense ratio\u0026rdquo;. A 1% expense ratio means on investing 100 rupees, you have to pay 1 rupee to the AMC every year. Lastly, you will hear types of mutual funds:\nSmall cap: invest mostly in small scale companies, high risk, high reward. Mid cap: invest mostly in medium scale companies, quite stable, medium risk, medium reward. Large cap: invest mostly in large scale companies, low risk, low reward. so, in short, small scale startups can fail easily and if they boom, they reward generously too and large scale companies stock price is table so not much amount of profit, but the stock price won\u0026rsquo;t be bouncing up and down too much.\nMetrics CAGR So if you looked at any ads for mututal funds, you must have seen a metric called CAGR.\nFull form: Compound Annual Growth Rate. Basically, it is avg growth rate on a yearly basis. Growth means how much your investment increased in value. Like buying a Tata stock which was 100 rupees now became 200, so it is 100% growth.\nLet\u0026rsquo;s say u bought a mutual fund with a CAGR of 30%. But you don\u0026rsquo;t know if the fund was really lucky that one year it growed by 150% and rest of the time with 10%.\nThe problem with only looking at one metric is that you will lose insight on other important stuff. Think of it like you need to have an idea of the bigger picture of the market to make profit consistently.\nThere are a lot of metrics like:\nSharpe ratio Sharpe is basically the ratio of return over risk. So you for example, you are given two choices of buy a house.\nHouse A will give you 100% returns i.e. double the investment. It\u0026rsquo;s a very nice sea-faced apartment. House B will give you 10% returns.\nYou would buy House A, seems like a no-brainer.\nBut if something happens one day like a tsunami or something, House A will be washed way in it. So you have the risk of losing entire investment you put in. House B is in reletively safe area, no earthquakes, no natural disasters.\nWould you still buy house A now?\nSo this is what return to risk ratio does. You know how much returns you can make but you also need to know how safe investment it is.\nBeta Measures the volatility (how much a stock jumps up or down) compared to market.\nβ = 1 → moves with market β \u0026gt; 1 → more volatile than market β \u0026lt; 1 → less volatile than market β \u0026lt; 0 → moves opposite to market Capture ratio Financial Assets So I\u0026rsquo;ve been talking about stocks all the way. But there are also more types of it which are different but they work in same manner. But I think for today, just have a short overview on what they are:\n1. Equity / Stocks Ownership in a company. Profit from price appreciation and dividends. 2. Debt / Bonds Lending money to government or corporations. Earn fixed interest (aka coupon). Quite low risk, therefore low returns. 3. Cash \u0026amp; Cash Equivalents Bank deposits (like Fixed Deposits), money market instruments, treasury bills. Very low risk, highly liquid. 4. Derivatives Financial contracts whose value depends on an underlying asset. Examples: Futures, Options, Swaps. 5. Mutual Funds \u0026amp; ETFs Pooled investments in a mix of stocks, bonds, or other assets. Diversified risk. 6. Commodities Physical goods like gold, silver, oil, agricultural products. Can be invested via commodity ETFs or futures. 7. Real Estate / Property Residential, commercial, or land. Can generate rental income and capital gains. 8. Alternative Investments Hedge funds, private equity, crypto, collectibles. Typically higher risk, lower liquidity. ","permalink":"http://localhost:1313/posts/fin-for-noobs/","summary":"\u003chr\u003e\n\u003ch1 id=\"finance-for-noobs\"\u003eFinance for noobs\u003c/h1\u003e\n\u003cp\u003eI come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content is primarily relevant to India and sometimes US markets.\nThe content here is purely for educational purposes.\n\u003cstrong\u003eThis is not financial advice.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"stocks\"\u003eStocks\u003c/h2\u003e\n\u003cp\u003eStock is basically ownership of a company.\u003c/p\u003e\n\u003cp\u003eUsual ways that people make profit from a stock is:\u003c/p\u003e","title":"Finance for Noobs"},{"content":"Huffman Coding Huffman Coding is a popular algorithm used for data compression. It was developed by David A. Huffman in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\nTable of Contents Introduction How Huffman Coding Works Example of Huffman Coding Decoding with Huffman Code Advantages of Huffman Coding Applications of Huffman Coding Limitations of Huffman Coding Introduction Huffman Coding is a lossless compression algorithm, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\nHow Huffman Coding Works Step-by-Step Process Frequency Calculation:\nCount the frequency of each character in the data. Create Leaf Nodes:\nFor each character, create a leaf node containing its frequency and value. Build a Priority Queue:\nInsert all leaf nodes into a priority queue (or min-heap), sorted by frequency (smallest frequency at the top). Construct the Huffman Tree:\nRepeat the following until only one node remains in the priority queue: Extract the two nodes with the lowest frequency. Create a new node with a frequency equal to the sum of these two nodes. Set the two extracted nodes as the left and right children of the new node. Insert the new node back into the priority queue. The last remaining node is the root of the Huffman Tree. Assign Codes:\nTraverse the Huffman Tree from the root to each leaf node. Assign a binary 0 for each left edge and 1 for each right edge. The path to each character forms its Huffman Code. Example of Huffman Coding Consider the following example data:\nCharacter Frequency A 5 B 9 C 12 D 13 E 16 F 45 Step 1: Build the Huffman Tree Start with individual nodes sorted by frequency. Merge nodes with the lowest frequencies until only one node remains. The process would look like this:\nCombine A (5) and B (9) → New Node (14) Combine C (12) and D (13) → New Node (25) Combine New Node (14) and E (16) → New Node (30) Combine New Node (25) and F (45) → New Node (70) Combine New Node (30) and New Node (70) → Final Root (100) Step 2: Assign Codes After constructing the Huffman Tree, assign binary codes based on the path to each character:\nCharacter Huffman Code A 1100 B 1101 C 100 D 101 E 111 F 0 Result: The character with the highest frequency (F) has the shortest code (0), and characters with lower frequencies have longer codes.\nEncoding Example If we encode the string ABCD, it would be:\nA → 1100 B → 1101 C → 100 D → 101 Encoded string: 11001101100101\nDecoding with Huffman Code Decoding is performed by traversing the Huffman Tree:\nStart at the root. For each 0, move left; for each 1, move right. When a leaf node is reached, add the character to the output. Return to the root and repeat until the entire encoded string is decoded. Advantages of Huffman Coding Lossless Compression: No data is lost during compression. Efficiency: Saves space by assigning shorter codes to more frequent characters. Optimal for Given Frequencies: Huffman Coding guarantees the minimum number of bits required for a set of characters based on their frequencies. Limitations of Huffman Coding Fixed Frequencies: Huffman Coding is optimal for a fixed set of frequencies. Changes in frequency distribution may lead to inefficiency. Not Suitable for Real-Time Applications: For large and variable data, the tree-building process can be slow. Suboptimal for Small Files: May add overhead for very small files where the additional tree data outweighs compression benefits. Applications of Huffman Coding Data Compression:\nWidely used in file compression formats like ZIP and RAR. Multimedia Compression:\nUtilized in JPEG and MP3 formats to reduce file size. Text Compression:\nUseful in compressing text files and emails for faster transmission. Telecommunication:\nEmployed in transmission protocols to optimize data transfer efficiency. Data Transmission:\nApplied in network data packet optimization for reducing bandwidth usage. Summary Huffman Coding is a fundamental algorithm for lossless data compression, leveraging variable-length encoding to minimize storage and bandwidth requirements. By prioritizing more frequent characters with shorter codes, it efficiently reduces data size. Its applications span various fields, including file compression, multimedia, and network optimization, making it a cornerstone of efficient data handling in digital systems.\n","permalink":"http://localhost:1313/posts/huffman-coding/","summary":"\u003ch1 id=\"huffman-coding\"\u003eHuffman Coding\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eHuffman Coding\u003c/strong\u003e is a popular algorithm used for data compression. It was developed by \u003cstrong\u003eDavid A. Huffman\u003c/strong\u003e in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\u003c/p\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#how-huffman-coding-works\"\u003eHow Huffman Coding Works\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#example-of-huffman-coding\"\u003eExample of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#decoding-with-huffman-code\"\u003eDecoding with Huffman Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#advantages-of-huffman-coding\"\u003eAdvantages of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#applications-of-huffman-coding\"\u003eApplications of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#limitations-of-huffman-coding\"\u003eLimitations of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eHuffman Coding is a \u003cstrong\u003elossless compression algorithm\u003c/strong\u003e, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\u003c/p\u003e","title":"Huffman Coding"},{"content":" Embracing Git Submodules: A Journey to a Seamless Dotfiles Setup I had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was. In my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\nThe Challenge Managing dotfiles is a daunting task, especially when dealing with a complex array of configurations spread across multitudes of applications and tools. Initially, I used traditional methods like stow. But, as my setup kept evolving, I needed an even more sophisticated solution to handle not just my primary dotfiles but also various submodules, such as for Neovim.\nDiscovering Git Submodules All I heard about submodules was the scary stories of how messy it can get. However, Git submodules are a powerful feature that allows you to include and manage repositories within a repository. This feature became a game-changer in my quest for a cleaner setup. Here’s why:\n1. Seamless Integration Using Git submodules, I could integrate external repositories directly into my dotfiles repository. For e.g, integrating a Neovim configuration repository as a submodule meant that updates to plugins or configurations could be managed seamlessly without disrupting the primary dotfiles setup.\n2. Simplified Updates Managing updates with Git submodules turned out to be straightforward. With commands like git submodule update --init --recursive, I could ensure that all submodules were initialized and up-to-date with just a single command. This eliminated the need for manual updates and checks, saving time and reducing errors.\n3. Enhanced Organization By organizing my configurations into separate repositories and including them as submodules, I achieved a cleaner, more modular setup. This approach made it easier to maintain and update each component individually while keeping the main repository organized.\nThe Transition to yadm The journey didn’t stop with Git submodules. I transitioned to using yadm (Yet Another Dotfiles Manager), which enhanced the management of my dotfiles even further. Here’s how yadm fit into the picture:\n1. Advanced Dotfiles Management yadm offered advanced features tailored for dotfiles management. It provided built-in support for handling dotfiles repositories and their submodules. With commands like yadm clone, yadm pull, and yadm submodule update, I could effortlessly manage and synchronize my dotfiles across systems.\n2. Automation and Consistency Initially, it felt very taxating to think of yadm as a substitue for git with dotfiles controlling power, but after around 20 or so minutes, I was convinced that this the way I wanted to manage my dotfiles all along. No sucky symlinks, no confusion, just a simple repo which stores what I need to store without the agressive .gitignore in my home directory. Incorporating yadm into my Ansible playbook automated the setup process. The playbook cloned the dotfiles repository, executed a bootstrap script, and ensured that all submodules were initialized and updated. This automation ensured consistency across setups, reducing manual intervention and potential configuration drift.\n3. Streamlined Configuration Using yadm streamlined the configuration of my system. It handled the intricacies of managing dotfiles and submodules, allowed me to focus on enhancing my development environment rather than wrestling with configuration issues. If you read it so far, I think you should give it a fair try, it will be worth it.\nConclusion Embracing Git submodules and yadm has been a transformative experience. It has simplified the management of my dotfiles, improved organization, and enhanced the automation of my system setup. For anyone dealing with complex dotfiles setups or seeking a more efficient way to manage configurations, exploring Git submodules and yadm is highly recommended.\nThis journey has not only refined my setup but also highlighted the power of leveraging the right tools for the task at hand. The integration of Git submodules into my workflow stands as a testament to how thoughtful tooling choices can lead to a more streamlined and enjoyable development experience.\n","permalink":"http://localhost:1313/posts/git-submodules/","summary":"\u003chr\u003e\n\u003ch2 id=\"embracing-git-submodules-a-journey-to-a-seamless-dotfiles-setup\"\u003eEmbracing Git Submodules: A Journey to a Seamless Dotfiles Setup\u003c/h2\u003e\n\u003cp\u003eI had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was.\nIn my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\u003c/p\u003e","title":"Git Submodules"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"My First Post"},{"content":"Income Tax for Noobs Disclaimer This content contains very basic information about how taxation works. Please refer to official govt sites for specific information. This is not any kind of advice on how to file your Income tax and returns but just basic explanation of it. This content is for educational purposes only.\nSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\nSo I thought why not try to understand how it works to safeguard myself (and my money). While learning about it, I thought I can share the knowledge about the same, so here we are.\nSince I am a salaried person like most people, I\u0026rsquo;ll only discuss the same here.\nTaxable Income Part of your income which you are obliged to pay taxes on. The taxable income will eventually decide your tax slab.\nTax slabs is just rules that if you have taxable income over let\u0026rsquo;s say 7 Lakhs. then you have to pay 10% (for example) as an income tax on it. That means 70,000 will be your income tax.\nSounds like a lot. So we have some ways to reduce the tax amount you pay. Here is where you have to grind your brain for the most part.\nDeductions: Make your taxable money smaller so you pay less tax, sometimes even at a lower rate. Rebates: Reduce the final tax amount directly. Exemptions: Exclude some of your income from being taxed. ","permalink":"http://localhost:1313/posts/income-tax-for-noobs/","summary":"\u003ch1 id=\"income-tax-for-noobs\"\u003eIncome Tax for Noobs\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content contains very basic information about how taxation works. Please refer to official govt sites for specific information.\nThis is not any kind of advice on how to file your Income tax and returns but just basic explanation of it.\nThis content is for educational purposes only.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\u003c/p\u003e","title":"Income Tax for Noobs"},{"content":" Finance for noobs I come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\nDisclaimer This content is primarily relevant to India and sometimes US markets. The content here is purely for educational purposes. This is not financial advice.\nStocks Stock is basically ownership of a company.\nUsual ways that people make profit from a stock is:\nPrice appreciation: you bought it for 100 rupees, sold for 200. profit of 100 in your pocket. Dividends: company gives out profits to all owners yearly or so. But this is upto company whether they want to give away or not. Mutual Funds I growed up watching mutual funds advertisements many times, never really understood what they meant.\nA very common example used to explain it is a basket of stocks. However, I think most simple way to explain it is:\nIt is a collection of different stock (and stock like stuff). Reason for it to be a collection is so that risk is reduced.\nThis is done because investing solely in a single company is very high risk. What if one day there is some negative PR, and company stock hits rock bottom. Investing little bit in many companies will save u from this loss because profit of some other place can help you.\nYou will hear a popular saying, \u0026ldquo;Don\u0026rsquo;t put all your eggs in one basket.\u0026rdquo; This is what they\u0026rsquo;re talking about.\nPortfolio of a fund means which stocks they have in their collection. But your portfolio means what all of the investments you are holding.\nOne more thing u will hear is that there are stock market index funds. Think of these also as a collection of stocks.\nIn india we have two main stock indices:\nNifty-50: Top 50 companies in National Stock Exchange (NSE) Sensex: Top 30 companies in Bombay Stock Exchange (BSE) A Stock exchange is basically a place where people can sell or buy stocks under some party like Govt monitoring them. Governments try to keep regulations in place so that people don\u0026rsquo;t misbehave.\nAn index is actually not a mutual fund. It is just a public list for people to know how market is doing overall.\nAny mutual fund can mimic the index. So it means they keep their investments only in Nifty 50 for example. These mutual funds are called an Index fund or ETFs.\nNow you may wonder, why they are called \u0026ldquo;mutual\u0026rdquo; funds. What happens is that many people buy a mutual fund in bulk/pool.\nSo mutual means collective ownership/sharing. This means profits and losses are equally shared among all the investors.\nWho does this?\nFunds are managed by Asset Management Companies (AMC). They have their fund managers who speculate the market for returns. Since they\u0026rsquo;re doing the heavy lifting of market research and you are just putting money in, they charge you a premium.\nThis premium is called as \u0026ldquo;Expense ratio\u0026rdquo;. A 1% expense ratio means on investing 100 rupees, you have to pay 1 rupee to the AMC every year. Lastly, you will hear types of mutual funds:\nSmall cap: invest mostly in small scale companies, high risk, high reward. Mid cap: invest mostly in medium scale companies, quite stable, medium risk, medium reward. Large cap: invest mostly in large scale companies, low risk, low reward. so, in short, small scale startups can fail easily and if they boom, they reward generously too and large scale companies stock price is table so not much amount of profit, but the stock price won\u0026rsquo;t be bouncing up and down too much.\nMetrics CAGR So if you looked at any ads for mututal funds, you must have seen a metric called CAGR.\nFull form: Compound Annual Growth Rate. Basically, it is avg growth rate on a yearly basis. Growth means how much your investment increased in value. Like buying a Tata stock which was 100 rupees now became 200, so it is 100% growth.\nLet\u0026rsquo;s say u bought a mutual fund with a CAGR of 30%. But you don\u0026rsquo;t know if the fund was really lucky that one year it growed by 150% and rest of the time with 10%.\nThe problem with only looking at one metric is that you will lose insight on other important stuff. Think of it like you need to have an idea of the bigger picture of the market to make profit consistently.\nThere are a lot of metrics like:\nSharpe ratio Sharpe is basically the ratio of return over risk. So you for example, you are given two choices of buy a house.\nHouse A will give you 100% returns i.e. double the investment. It\u0026rsquo;s a very nice sea-faced apartment. House B will give you 10% returns.\nYou would buy House A, seems like a no-brainer.\nBut if something happens one day like a tsunami or something, House A will be washed way in it. So you have the risk of losing entire investment you put in. House B is in reletively safe area, no earthquakes, no natural disasters.\nWould you still buy house A now?\nSo this is what return to risk ratio does. You know how much returns you can make but you also need to know how safe investment it is.\nBeta Measures the volatility (how much a stock jumps up or down) compared to market.\nβ = 1 → moves with market β \u0026gt; 1 → more volatile than market β \u0026lt; 1 → less volatile than market β \u0026lt; 0 → moves opposite to market Capture ratio Financial Assets So I\u0026rsquo;ve been talking about stocks all the way. But there are also more types of it which are different but they work in same manner. But I think for today, just have a short overview on what they are:\n1. Equity / Stocks Ownership in a company. Profit from price appreciation and dividends. 2. Debt / Bonds Lending money to government or corporations. Earn fixed interest (aka coupon). Quite low risk, therefore low returns. 3. Cash \u0026amp; Cash Equivalents Bank deposits (like Fixed Deposits), money market instruments, treasury bills. Very low risk, highly liquid. 4. Derivatives Financial contracts whose value depends on an underlying asset. Examples: Futures, Options, Swaps. 5. Mutual Funds \u0026amp; ETFs Pooled investments in a mix of stocks, bonds, or other assets. Diversified risk. 6. Commodities Physical goods like gold, silver, oil, agricultural products. Can be invested via commodity ETFs or futures. 7. Real Estate / Property Residential, commercial, or land. Can generate rental income and capital gains. 8. Alternative Investments Hedge funds, private equity, crypto, collectibles. Typically higher risk, lower liquidity. ","permalink":"http://localhost:1313/posts/fin-for-noobs/","summary":"\u003chr\u003e\n\u003ch1 id=\"finance-for-noobs\"\u003eFinance for noobs\u003c/h1\u003e\n\u003cp\u003eI come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content is primarily relevant to India and sometimes US markets.\nThe content here is purely for educational purposes.\n\u003cstrong\u003eThis is not financial advice.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"stocks\"\u003eStocks\u003c/h2\u003e\n\u003cp\u003eStock is basically ownership of a company.\u003c/p\u003e\n\u003cp\u003eUsual ways that people make profit from a stock is:\u003c/p\u003e","title":"Finance for Noobs"},{"content":"Huffman Coding Huffman Coding is a popular algorithm used for data compression. It was developed by David A. Huffman in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\nTable of Contents Introduction How Huffman Coding Works Example of Huffman Coding Decoding with Huffman Code Advantages of Huffman Coding Applications of Huffman Coding Limitations of Huffman Coding Introduction Huffman Coding is a lossless compression algorithm, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\nHow Huffman Coding Works Step-by-Step Process Frequency Calculation:\nCount the frequency of each character in the data. Create Leaf Nodes:\nFor each character, create a leaf node containing its frequency and value. Build a Priority Queue:\nInsert all leaf nodes into a priority queue (or min-heap), sorted by frequency (smallest frequency at the top). Construct the Huffman Tree:\nRepeat the following until only one node remains in the priority queue: Extract the two nodes with the lowest frequency. Create a new node with a frequency equal to the sum of these two nodes. Set the two extracted nodes as the left and right children of the new node. Insert the new node back into the priority queue. The last remaining node is the root of the Huffman Tree. Assign Codes:\nTraverse the Huffman Tree from the root to each leaf node. Assign a binary 0 for each left edge and 1 for each right edge. The path to each character forms its Huffman Code. Example of Huffman Coding Consider the following example data:\nCharacter Frequency A 5 B 9 C 12 D 13 E 16 F 45 Step 1: Build the Huffman Tree Start with individual nodes sorted by frequency. Merge nodes with the lowest frequencies until only one node remains. The process would look like this:\nCombine A (5) and B (9) → New Node (14) Combine C (12) and D (13) → New Node (25) Combine New Node (14) and E (16) → New Node (30) Combine New Node (25) and F (45) → New Node (70) Combine New Node (30) and New Node (70) → Final Root (100) Step 2: Assign Codes After constructing the Huffman Tree, assign binary codes based on the path to each character:\nCharacter Huffman Code A 1100 B 1101 C 100 D 101 E 111 F 0 Result: The character with the highest frequency (F) has the shortest code (0), and characters with lower frequencies have longer codes.\nEncoding Example If we encode the string ABCD, it would be:\nA → 1100 B → 1101 C → 100 D → 101 Encoded string: 11001101100101\nDecoding with Huffman Code Decoding is performed by traversing the Huffman Tree:\nStart at the root. For each 0, move left; for each 1, move right. When a leaf node is reached, add the character to the output. Return to the root and repeat until the entire encoded string is decoded. Advantages of Huffman Coding Lossless Compression: No data is lost during compression. Efficiency: Saves space by assigning shorter codes to more frequent characters. Optimal for Given Frequencies: Huffman Coding guarantees the minimum number of bits required for a set of characters based on their frequencies. Limitations of Huffman Coding Fixed Frequencies: Huffman Coding is optimal for a fixed set of frequencies. Changes in frequency distribution may lead to inefficiency. Not Suitable for Real-Time Applications: For large and variable data, the tree-building process can be slow. Suboptimal for Small Files: May add overhead for very small files where the additional tree data outweighs compression benefits. Applications of Huffman Coding Data Compression:\nWidely used in file compression formats like ZIP and RAR. Multimedia Compression:\nUtilized in JPEG and MP3 formats to reduce file size. Text Compression:\nUseful in compressing text files and emails for faster transmission. Telecommunication:\nEmployed in transmission protocols to optimize data transfer efficiency. Data Transmission:\nApplied in network data packet optimization for reducing bandwidth usage. Summary Huffman Coding is a fundamental algorithm for lossless data compression, leveraging variable-length encoding to minimize storage and bandwidth requirements. By prioritizing more frequent characters with shorter codes, it efficiently reduces data size. Its applications span various fields, including file compression, multimedia, and network optimization, making it a cornerstone of efficient data handling in digital systems.\n","permalink":"http://localhost:1313/posts/huffman-coding/","summary":"\u003ch1 id=\"huffman-coding\"\u003eHuffman Coding\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eHuffman Coding\u003c/strong\u003e is a popular algorithm used for data compression. It was developed by \u003cstrong\u003eDavid A. Huffman\u003c/strong\u003e in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\u003c/p\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#how-huffman-coding-works\"\u003eHow Huffman Coding Works\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#example-of-huffman-coding\"\u003eExample of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#decoding-with-huffman-code\"\u003eDecoding with Huffman Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#advantages-of-huffman-coding\"\u003eAdvantages of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#applications-of-huffman-coding\"\u003eApplications of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#limitations-of-huffman-coding\"\u003eLimitations of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eHuffman Coding is a \u003cstrong\u003elossless compression algorithm\u003c/strong\u003e, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\u003c/p\u003e","title":"Huffman Coding"},{"content":" Embracing Git Submodules: A Journey to a Seamless Dotfiles Setup I had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was. In my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\nThe Challenge Managing dotfiles is a daunting task, especially when dealing with a complex array of configurations spread across multitudes of applications and tools. Initially, I used traditional methods like stow. But, as my setup kept evolving, I needed an even more sophisticated solution to handle not just my primary dotfiles but also various submodules, such as for Neovim.\nDiscovering Git Submodules All I heard about submodules was the scary stories of how messy it can get. However, Git submodules are a powerful feature that allows you to include and manage repositories within a repository. This feature became a game-changer in my quest for a cleaner setup. Here’s why:\n1. Seamless Integration Using Git submodules, I could integrate external repositories directly into my dotfiles repository. For e.g, integrating a Neovim configuration repository as a submodule meant that updates to plugins or configurations could be managed seamlessly without disrupting the primary dotfiles setup.\n2. Simplified Updates Managing updates with Git submodules turned out to be straightforward. With commands like git submodule update --init --recursive, I could ensure that all submodules were initialized and up-to-date with just a single command. This eliminated the need for manual updates and checks, saving time and reducing errors.\n3. Enhanced Organization By organizing my configurations into separate repositories and including them as submodules, I achieved a cleaner, more modular setup. This approach made it easier to maintain and update each component individually while keeping the main repository organized.\nThe Transition to yadm The journey didn’t stop with Git submodules. I transitioned to using yadm (Yet Another Dotfiles Manager), which enhanced the management of my dotfiles even further. Here’s how yadm fit into the picture:\n1. Advanced Dotfiles Management yadm offered advanced features tailored for dotfiles management. It provided built-in support for handling dotfiles repositories and their submodules. With commands like yadm clone, yadm pull, and yadm submodule update, I could effortlessly manage and synchronize my dotfiles across systems.\n2. Automation and Consistency Initially, it felt very taxating to think of yadm as a substitue for git with dotfiles controlling power, but after around 20 or so minutes, I was convinced that this the way I wanted to manage my dotfiles all along. No sucky symlinks, no confusion, just a simple repo which stores what I need to store without the agressive .gitignore in my home directory. Incorporating yadm into my Ansible playbook automated the setup process. The playbook cloned the dotfiles repository, executed a bootstrap script, and ensured that all submodules were initialized and updated. This automation ensured consistency across setups, reducing manual intervention and potential configuration drift.\n3. Streamlined Configuration Using yadm streamlined the configuration of my system. It handled the intricacies of managing dotfiles and submodules, allowed me to focus on enhancing my development environment rather than wrestling with configuration issues. If you read it so far, I think you should give it a fair try, it will be worth it.\nConclusion Embracing Git submodules and yadm has been a transformative experience. It has simplified the management of my dotfiles, improved organization, and enhanced the automation of my system setup. For anyone dealing with complex dotfiles setups or seeking a more efficient way to manage configurations, exploring Git submodules and yadm is highly recommended.\nThis journey has not only refined my setup but also highlighted the power of leveraging the right tools for the task at hand. The integration of Git submodules into my workflow stands as a testament to how thoughtful tooling choices can lead to a more streamlined and enjoyable development experience.\n","permalink":"http://localhost:1313/posts/git-submodules/","summary":"\u003chr\u003e\n\u003ch2 id=\"embracing-git-submodules-a-journey-to-a-seamless-dotfiles-setup\"\u003eEmbracing Git Submodules: A Journey to a Seamless Dotfiles Setup\u003c/h2\u003e\n\u003cp\u003eI had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was.\nIn my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\u003c/p\u003e","title":"Git Submodules"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"My First Post"},{"content":"Income Tax for Noobs Disclaimer This content contains very basic information about how taxation works. Please refer to official govt sites for specific information. This is not any kind of advice on how to file your Income tax and returns but just basic explanation of it. This content is for educational purposes only.\nSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\nSo I thought why not try to understand how it works to safeguard myself (and my money). While learning about it, I thought I can share the knowledge about the same, so here we are.\nSince I am a salaried person like most people, I\u0026rsquo;ll only discuss the same here.\nTaxable Income Part of your income which you are obliged to pay taxes on. The taxable income will eventually decide your tax slab.\nTax slabs is just rules that if you have taxable income over let\u0026rsquo;s say 7 Lakhs. then you have to pay 10% (for example) as an income tax on it. That means 70,000 will be your income tax.\nSounds like a lot. So we have some ways to reduce the tax amount you pay. Here is where you have to grind your brain for the most part.\nDeductions: Make your taxable money smaller so you pay less tax, sometimes even at a lower rate. Rebates: Reduce the final tax amount directly. Exemptions: Exclude some of your income from being taxed. ","permalink":"http://localhost:1313/posts/income-tax-for-noobs/","summary":"\u003ch1 id=\"income-tax-for-noobs\"\u003eIncome Tax for Noobs\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content contains very basic information about how taxation works. Please refer to official govt sites for specific information.\nThis is not any kind of advice on how to file your Income tax and returns but just basic explanation of it.\nThis content is for educational purposes only.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\u003c/p\u003e","title":"Income Tax for Noobs"},{"content":" Finance for noobs I come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\nDisclaimer This content is primarily relevant to India and sometimes US markets. The content here is purely for educational purposes. This is not financial advice.\nStocks Stock is basically ownership of a company.\nUsual ways that people make profit from a stock is:\nPrice appreciation: you bought it for 100 rupees, sold for 200. profit of 100 in your pocket. Dividends: company gives out profits to all owners yearly or so. But this is upto company whether they want to give away or not. Mutual Funds I growed up watching mutual funds advertisements many times, never really understood what they meant.\nA very common example used to explain it is a basket of stocks. However, I think most simple way to explain it is:\nIt is a collection of different stock (and stock like stuff). Reason for it to be a collection is so that risk is reduced.\nThis is done because investing solely in a single company is very high risk. What if one day there is some negative PR, and company stock hits rock bottom. Investing little bit in many companies will save u from this loss because profit of some other place can help you.\nYou will hear a popular saying, \u0026ldquo;Don\u0026rsquo;t put all your eggs in one basket.\u0026rdquo; This is what they\u0026rsquo;re talking about.\nPortfolio of a fund means which stocks they have in their collection. But your portfolio means what all of the investments you are holding.\nOne more thing u will hear is that there are stock market index funds. Think of these also as a collection of stocks.\nIn india we have two main stock indices:\nNifty-50: Top 50 companies in National Stock Exchange (NSE) Sensex: Top 30 companies in Bombay Stock Exchange (BSE) A Stock exchange is basically a place where people can sell or buy stocks under some party like Govt monitoring them. Governments try to keep regulations in place so that people don\u0026rsquo;t misbehave.\nAn index is actually not a mutual fund. It is just a public list for people to know how market is doing overall.\nAny mutual fund can mimic the index. So it means they keep their investments only in Nifty 50 for example. These mutual funds are called an Index fund or ETFs.\nNow you may wonder, why they are called \u0026ldquo;mutual\u0026rdquo; funds. What happens is that many people buy a mutual fund in bulk/pool.\nSo mutual means collective ownership/sharing. This means profits and losses are equally shared among all the investors.\nWho does this?\nFunds are managed by Asset Management Companies (AMC). They have their fund managers who speculate the market for returns. Since they\u0026rsquo;re doing the heavy lifting of market research and you are just putting money in, they charge you a premium.\nThis premium is called as \u0026ldquo;Expense ratio\u0026rdquo;. A 1% expense ratio means on investing 100 rupees, you have to pay 1 rupee to the AMC every year. Lastly, you will hear types of mutual funds:\nSmall cap: invest mostly in small scale companies, high risk, high reward. Mid cap: invest mostly in medium scale companies, quite stable, medium risk, medium reward. Large cap: invest mostly in large scale companies, low risk, low reward. so, in short, small scale startups can fail easily and if they boom, they reward generously too and large scale companies stock price is table so not much amount of profit, but the stock price won\u0026rsquo;t be bouncing up and down too much.\nMetrics CAGR So if you looked at any ads for mututal funds, you must have seen a metric called CAGR.\nFull form: Compound Annual Growth Rate. Basically, it is avg growth rate on a yearly basis. Growth means how much your investment increased in value. Like buying a Tata stock which was 100 rupees now became 200, so it is 100% growth.\nLet\u0026rsquo;s say u bought a mutual fund with a CAGR of 30%. But you don\u0026rsquo;t know if the fund was really lucky that one year it growed by 150% and rest of the time with 10%.\nThe problem with only looking at one metric is that you will lose insight on other important stuff. Think of it like you need to have an idea of the bigger picture of the market to make profit consistently.\nThere are a lot of metrics like:\nSharpe ratio Sharpe is basically the ratio of return over risk. So you for example, you are given two choices of buy a house.\nHouse A will give you 100% returns i.e. double the investment. It\u0026rsquo;s a very nice sea-faced apartment. House B will give you 10% returns.\nYou would buy House A, seems like a no-brainer.\nBut if something happens one day like a tsunami or something, House A will be washed way in it. So you have the risk of losing entire investment you put in. House B is in reletively safe area, no earthquakes, no natural disasters.\nWould you still buy house A now?\nSo this is what return to risk ratio does. You know how much returns you can make but you also need to know how safe investment it is.\nBeta Measures the volatility (how much a stock jumps up or down) compared to market.\nβ = 1 → moves with market β \u0026gt; 1 → more volatile than market β \u0026lt; 1 → less volatile than market β \u0026lt; 0 → moves opposite to market Capture ratio Financial Assets So I\u0026rsquo;ve been talking about stocks all the way. But there are also more types of it which are different but they work in same manner. But I think for today, just have a short overview on what they are:\n1. Equity / Stocks Ownership in a company. Profit from price appreciation and dividends. 2. Debt / Bonds Lending money to government or corporations. Earn fixed interest (aka coupon). Quite low risk, therefore low returns. 3. Cash \u0026amp; Cash Equivalents Bank deposits (like Fixed Deposits), money market instruments, treasury bills. Very low risk, highly liquid. 4. Derivatives Financial contracts whose value depends on an underlying asset. Examples: Futures, Options, Swaps. 5. Mutual Funds \u0026amp; ETFs Pooled investments in a mix of stocks, bonds, or other assets. Diversified risk. 6. Commodities Physical goods like gold, silver, oil, agricultural products. Can be invested via commodity ETFs or futures. 7. Real Estate / Property Residential, commercial, or land. Can generate rental income and capital gains. 8. Alternative Investments Hedge funds, private equity, crypto, collectibles. Typically higher risk, lower liquidity. ","permalink":"http://localhost:1313/posts/fin-for-noobs/","summary":"\u003chr\u003e\n\u003ch1 id=\"finance-for-noobs\"\u003eFinance for noobs\u003c/h1\u003e\n\u003cp\u003eI come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content is primarily relevant to India and sometimes US markets.\nThe content here is purely for educational purposes.\n\u003cstrong\u003eThis is not financial advice.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"stocks\"\u003eStocks\u003c/h2\u003e\n\u003cp\u003eStock is basically ownership of a company.\u003c/p\u003e\n\u003cp\u003eUsual ways that people make profit from a stock is:\u003c/p\u003e","title":"Finance for Noobs"},{"content":"Huffman Coding Huffman Coding is a popular algorithm used for data compression. It was developed by David A. Huffman in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\nTable of Contents Introduction How Huffman Coding Works Example of Huffman Coding Decoding with Huffman Code Advantages of Huffman Coding Applications of Huffman Coding Limitations of Huffman Coding Introduction Huffman Coding is a lossless compression algorithm, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\nHow Huffman Coding Works Step-by-Step Process Frequency Calculation:\nCount the frequency of each character in the data. Create Leaf Nodes:\nFor each character, create a leaf node containing its frequency and value. Build a Priority Queue:\nInsert all leaf nodes into a priority queue (or min-heap), sorted by frequency (smallest frequency at the top). Construct the Huffman Tree:\nRepeat the following until only one node remains in the priority queue: Extract the two nodes with the lowest frequency. Create a new node with a frequency equal to the sum of these two nodes. Set the two extracted nodes as the left and right children of the new node. Insert the new node back into the priority queue. The last remaining node is the root of the Huffman Tree. Assign Codes:\nTraverse the Huffman Tree from the root to each leaf node. Assign a binary 0 for each left edge and 1 for each right edge. The path to each character forms its Huffman Code. Example of Huffman Coding Consider the following example data:\nCharacter Frequency A 5 B 9 C 12 D 13 E 16 F 45 Step 1: Build the Huffman Tree Start with individual nodes sorted by frequency. Merge nodes with the lowest frequencies until only one node remains. The process would look like this:\nCombine A (5) and B (9) → New Node (14) Combine C (12) and D (13) → New Node (25) Combine New Node (14) and E (16) → New Node (30) Combine New Node (25) and F (45) → New Node (70) Combine New Node (30) and New Node (70) → Final Root (100) Step 2: Assign Codes After constructing the Huffman Tree, assign binary codes based on the path to each character:\nCharacter Huffman Code A 1100 B 1101 C 100 D 101 E 111 F 0 Result: The character with the highest frequency (F) has the shortest code (0), and characters with lower frequencies have longer codes.\nEncoding Example If we encode the string ABCD, it would be:\nA → 1100 B → 1101 C → 100 D → 101 Encoded string: 11001101100101\nDecoding with Huffman Code Decoding is performed by traversing the Huffman Tree:\nStart at the root. For each 0, move left; for each 1, move right. When a leaf node is reached, add the character to the output. Return to the root and repeat until the entire encoded string is decoded. Advantages of Huffman Coding Lossless Compression: No data is lost during compression. Efficiency: Saves space by assigning shorter codes to more frequent characters. Optimal for Given Frequencies: Huffman Coding guarantees the minimum number of bits required for a set of characters based on their frequencies. Limitations of Huffman Coding Fixed Frequencies: Huffman Coding is optimal for a fixed set of frequencies. Changes in frequency distribution may lead to inefficiency. Not Suitable for Real-Time Applications: For large and variable data, the tree-building process can be slow. Suboptimal for Small Files: May add overhead for very small files where the additional tree data outweighs compression benefits. Applications of Huffman Coding Data Compression:\nWidely used in file compression formats like ZIP and RAR. Multimedia Compression:\nUtilized in JPEG and MP3 formats to reduce file size. Text Compression:\nUseful in compressing text files and emails for faster transmission. Telecommunication:\nEmployed in transmission protocols to optimize data transfer efficiency. Data Transmission:\nApplied in network data packet optimization for reducing bandwidth usage. Summary Huffman Coding is a fundamental algorithm for lossless data compression, leveraging variable-length encoding to minimize storage and bandwidth requirements. By prioritizing more frequent characters with shorter codes, it efficiently reduces data size. Its applications span various fields, including file compression, multimedia, and network optimization, making it a cornerstone of efficient data handling in digital systems.\n","permalink":"http://localhost:1313/posts/huffman-coding/","summary":"\u003ch1 id=\"huffman-coding\"\u003eHuffman Coding\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eHuffman Coding\u003c/strong\u003e is a popular algorithm used for data compression. It was developed by \u003cstrong\u003eDavid A. Huffman\u003c/strong\u003e in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\u003c/p\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#how-huffman-coding-works\"\u003eHow Huffman Coding Works\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#example-of-huffman-coding\"\u003eExample of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#decoding-with-huffman-code\"\u003eDecoding with Huffman Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#advantages-of-huffman-coding\"\u003eAdvantages of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#applications-of-huffman-coding\"\u003eApplications of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#limitations-of-huffman-coding\"\u003eLimitations of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eHuffman Coding is a \u003cstrong\u003elossless compression algorithm\u003c/strong\u003e, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\u003c/p\u003e","title":"Huffman Coding"},{"content":" Embracing Git Submodules: A Journey to a Seamless Dotfiles Setup I had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was. In my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\nThe Challenge Managing dotfiles is a daunting task, especially when dealing with a complex array of configurations spread across multitudes of applications and tools. Initially, I used traditional methods like stow. But, as my setup kept evolving, I needed an even more sophisticated solution to handle not just my primary dotfiles but also various submodules, such as for Neovim.\nDiscovering Git Submodules All I heard about submodules was the scary stories of how messy it can get. However, Git submodules are a powerful feature that allows you to include and manage repositories within a repository. This feature became a game-changer in my quest for a cleaner setup. Here’s why:\n1. Seamless Integration Using Git submodules, I could integrate external repositories directly into my dotfiles repository. For e.g, integrating a Neovim configuration repository as a submodule meant that updates to plugins or configurations could be managed seamlessly without disrupting the primary dotfiles setup.\n2. Simplified Updates Managing updates with Git submodules turned out to be straightforward. With commands like git submodule update --init --recursive, I could ensure that all submodules were initialized and up-to-date with just a single command. This eliminated the need for manual updates and checks, saving time and reducing errors.\n3. Enhanced Organization By organizing my configurations into separate repositories and including them as submodules, I achieved a cleaner, more modular setup. This approach made it easier to maintain and update each component individually while keeping the main repository organized.\nThe Transition to yadm The journey didn’t stop with Git submodules. I transitioned to using yadm (Yet Another Dotfiles Manager), which enhanced the management of my dotfiles even further. Here’s how yadm fit into the picture:\n1. Advanced Dotfiles Management yadm offered advanced features tailored for dotfiles management. It provided built-in support for handling dotfiles repositories and their submodules. With commands like yadm clone, yadm pull, and yadm submodule update, I could effortlessly manage and synchronize my dotfiles across systems.\n2. Automation and Consistency Initially, it felt very taxating to think of yadm as a substitue for git with dotfiles controlling power, but after around 20 or so minutes, I was convinced that this the way I wanted to manage my dotfiles all along. No sucky symlinks, no confusion, just a simple repo which stores what I need to store without the agressive .gitignore in my home directory. Incorporating yadm into my Ansible playbook automated the setup process. The playbook cloned the dotfiles repository, executed a bootstrap script, and ensured that all submodules were initialized and updated. This automation ensured consistency across setups, reducing manual intervention and potential configuration drift.\n3. Streamlined Configuration Using yadm streamlined the configuration of my system. It handled the intricacies of managing dotfiles and submodules, allowed me to focus on enhancing my development environment rather than wrestling with configuration issues. If you read it so far, I think you should give it a fair try, it will be worth it.\nConclusion Embracing Git submodules and yadm has been a transformative experience. It has simplified the management of my dotfiles, improved organization, and enhanced the automation of my system setup. For anyone dealing with complex dotfiles setups or seeking a more efficient way to manage configurations, exploring Git submodules and yadm is highly recommended.\nThis journey has not only refined my setup but also highlighted the power of leveraging the right tools for the task at hand. The integration of Git submodules into my workflow stands as a testament to how thoughtful tooling choices can lead to a more streamlined and enjoyable development experience.\n","permalink":"http://localhost:1313/posts/git-submodules/","summary":"\u003chr\u003e\n\u003ch2 id=\"embracing-git-submodules-a-journey-to-a-seamless-dotfiles-setup\"\u003eEmbracing Git Submodules: A Journey to a Seamless Dotfiles Setup\u003c/h2\u003e\n\u003cp\u003eI had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was.\nIn my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\u003c/p\u003e","title":"Git Submodules"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"My First Post"},{"content":"Income Tax for Noobs Disclaimer This is basic educational information about taxation. It is not personal tax advice. For official guidance, always check government websites.\nSo I thought why not try to understand how it works to safeguard myself (and my money). While learning about it, I thought I can share the knowledge about the same, so here we are.\nSince I am a salaried person like most people, I\u0026rsquo;ll only discuss the same here.\nTaxable Income Part of your income which you are obliged to pay taxes on. The taxable income will eventually decide your tax slab.\nTax slabs is just rules that if you have taxable income over let\u0026rsquo;s say 7 Lakhs. then you have to pay 10% (for example) as an income tax on it. That means 70,000 will be your income tax.\nSounds like a lot. So we have some ways to reduce the tax amount you pay. Here is where you have to grind your brain for the most part.\nDeductions: Make your taxable money smaller so you pay less tax, sometimes even at a lower rate. Rebates: Reduce the final tax amount directly. Exemptions: Exclude some of your income from being taxed. ","permalink":"http://localhost:1313/posts/income-tax-for-noobs/","summary":"\u003ch1 id=\"income-tax-for-noobs\"\u003eIncome Tax for Noobs\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebasic educational information about taxation\u003c/strong\u003e. It is \u003cstrong\u003enot personal tax advice\u003c/strong\u003e. For official guidance, always check \u003cstrong\u003egovernment websites\u003c/strong\u003e.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eSo I thought why not try to understand how it works to safeguard myself (and my money). While learning about it, I thought I can share the knowledge about the same, so here we are.\u003c/p\u003e\n\u003cp\u003eSince I am a salaried person like most people, I\u0026rsquo;ll only discuss the same here.\u003c/p\u003e","title":"Income Tax for Noobs"},{"content":" Finance for noobs I come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\nDisclaimer This content is primarily relevant to India and sometimes US markets. The content here is purely for educational purposes. This is not financial advice.\nStocks Stock is basically ownership of a company.\nUsual ways that people make profit from a stock is:\nPrice appreciation: you bought it for 100 rupees, sold for 200. profit of 100 in your pocket. Dividends: company gives out profits to all owners yearly or so. But this is upto company whether they want to give away or not. Mutual Funds I growed up watching mutual funds advertisements many times, never really understood what they meant.\nA very common example used to explain it is a basket of stocks. However, I think most simple way to explain it is:\nIt is a collection of different stock (and stock like stuff). Reason for it to be a collection is so that risk is reduced.\nThis is done because investing solely in a single company is very high risk. What if one day there is some negative PR, and company stock hits rock bottom. Investing little bit in many companies will save u from this loss because profit of some other place can help you.\nYou will hear a popular saying, \u0026ldquo;Don\u0026rsquo;t put all your eggs in one basket.\u0026rdquo; This is what they\u0026rsquo;re talking about.\nPortfolio of a fund means which stocks they have in their collection. But your portfolio means what all of the investments you are holding.\nOne more thing u will hear is that there are stock market index funds. Think of these also as a collection of stocks.\nIn india we have two main stock indices:\nNifty-50: Top 50 companies in National Stock Exchange (NSE) Sensex: Top 30 companies in Bombay Stock Exchange (BSE) A Stock exchange is basically a place where people can sell or buy stocks under some party like Govt monitoring them. Governments try to keep regulations in place so that people don\u0026rsquo;t misbehave.\nAn index is actually not a mutual fund. It is just a public list for people to know how market is doing overall.\nAny mutual fund can mimic the index. So it means they keep their investments only in Nifty 50 for example. These mutual funds are called an Index fund or ETFs.\nNow you may wonder, why they are called \u0026ldquo;mutual\u0026rdquo; funds. What happens is that many people buy a mutual fund in bulk/pool.\nSo mutual means collective ownership/sharing. This means profits and losses are equally shared among all the investors.\nWho does this?\nFunds are managed by Asset Management Companies (AMC). They have their fund managers who speculate the market for returns. Since they\u0026rsquo;re doing the heavy lifting of market research and you are just putting money in, they charge you a premium.\nThis premium is called as \u0026ldquo;Expense ratio\u0026rdquo;. A 1% expense ratio means on investing 100 rupees, you have to pay 1 rupee to the AMC every year. Lastly, you will hear types of mutual funds:\nSmall cap: invest mostly in small scale companies, high risk, high reward. Mid cap: invest mostly in medium scale companies, quite stable, medium risk, medium reward. Large cap: invest mostly in large scale companies, low risk, low reward. so, in short, small scale startups can fail easily and if they boom, they reward generously too and large scale companies stock price is table so not much amount of profit, but the stock price won\u0026rsquo;t be bouncing up and down too much.\nMetrics CAGR So if you looked at any ads for mututal funds, you must have seen a metric called CAGR.\nFull form: Compound Annual Growth Rate. Basically, it is avg growth rate on a yearly basis. Growth means how much your investment increased in value. Like buying a Tata stock which was 100 rupees now became 200, so it is 100% growth.\nLet\u0026rsquo;s say u bought a mutual fund with a CAGR of 30%. But you don\u0026rsquo;t know if the fund was really lucky that one year it growed by 150% and rest of the time with 10%.\nThe problem with only looking at one metric is that you will lose insight on other important stuff. Think of it like you need to have an idea of the bigger picture of the market to make profit consistently.\nThere are a lot of metrics like:\nSharpe ratio Sharpe is basically the ratio of return over risk. So you for example, you are given two choices of buy a house.\nHouse A will give you 100% returns i.e. double the investment. It\u0026rsquo;s a very nice sea-faced apartment. House B will give you 10% returns.\nYou would buy House A, seems like a no-brainer.\nBut if something happens one day like a tsunami or something, House A will be washed way in it. So you have the risk of losing entire investment you put in. House B is in reletively safe area, no earthquakes, no natural disasters.\nWould you still buy house A now?\nSo this is what return to risk ratio does. You know how much returns you can make but you also need to know how safe investment it is.\nBeta Measures the volatility (how much a stock jumps up or down) compared to market.\nβ = 1 → moves with market β \u0026gt; 1 → more volatile than market β \u0026lt; 1 → less volatile than market β \u0026lt; 0 → moves opposite to market Capture ratio Financial Assets So I\u0026rsquo;ve been talking about stocks all the way. But there are also more types of it which are different but they work in same manner. But I think for today, just have a short overview on what they are:\n1. Equity / Stocks Ownership in a company. Profit from price appreciation and dividends. 2. Debt / Bonds Lending money to government or corporations. Earn fixed interest (aka coupon). Quite low risk, therefore low returns. 3. Cash \u0026amp; Cash Equivalents Bank deposits (like Fixed Deposits), money market instruments, treasury bills. Very low risk, highly liquid. 4. Derivatives Financial contracts whose value depends on an underlying asset. Examples: Futures, Options, Swaps. 5. Mutual Funds \u0026amp; ETFs Pooled investments in a mix of stocks, bonds, or other assets. Diversified risk. 6. Commodities Physical goods like gold, silver, oil, agricultural products. Can be invested via commodity ETFs or futures. 7. Real Estate / Property Residential, commercial, or land. Can generate rental income and capital gains. 8. Alternative Investments Hedge funds, private equity, crypto, collectibles. Typically higher risk, lower liquidity. ","permalink":"http://localhost:1313/posts/fin-for-noobs/","summary":"\u003chr\u003e\n\u003ch1 id=\"finance-for-noobs\"\u003eFinance for noobs\u003c/h1\u003e\n\u003cp\u003eI come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content is primarily relevant to India and sometimes US markets.\nThe content here is purely for educational purposes.\n\u003cstrong\u003eThis is not financial advice.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"stocks\"\u003eStocks\u003c/h2\u003e\n\u003cp\u003eStock is basically ownership of a company.\u003c/p\u003e\n\u003cp\u003eUsual ways that people make profit from a stock is:\u003c/p\u003e","title":"Finance for Noobs"},{"content":"Huffman Coding Huffman Coding is a popular algorithm used for data compression. It was developed by David A. Huffman in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\nTable of Contents Introduction How Huffman Coding Works Example of Huffman Coding Decoding with Huffman Code Advantages of Huffman Coding Applications of Huffman Coding Limitations of Huffman Coding Introduction Huffman Coding is a lossless compression algorithm, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\nHow Huffman Coding Works Step-by-Step Process Frequency Calculation:\nCount the frequency of each character in the data. Create Leaf Nodes:\nFor each character, create a leaf node containing its frequency and value. Build a Priority Queue:\nInsert all leaf nodes into a priority queue (or min-heap), sorted by frequency (smallest frequency at the top). Construct the Huffman Tree:\nRepeat the following until only one node remains in the priority queue: Extract the two nodes with the lowest frequency. Create a new node with a frequency equal to the sum of these two nodes. Set the two extracted nodes as the left and right children of the new node. Insert the new node back into the priority queue. The last remaining node is the root of the Huffman Tree. Assign Codes:\nTraverse the Huffman Tree from the root to each leaf node. Assign a binary 0 for each left edge and 1 for each right edge. The path to each character forms its Huffman Code. Example of Huffman Coding Consider the following example data:\nCharacter Frequency A 5 B 9 C 12 D 13 E 16 F 45 Step 1: Build the Huffman Tree Start with individual nodes sorted by frequency. Merge nodes with the lowest frequencies until only one node remains. The process would look like this:\nCombine A (5) and B (9) → New Node (14) Combine C (12) and D (13) → New Node (25) Combine New Node (14) and E (16) → New Node (30) Combine New Node (25) and F (45) → New Node (70) Combine New Node (30) and New Node (70) → Final Root (100) Step 2: Assign Codes After constructing the Huffman Tree, assign binary codes based on the path to each character:\nCharacter Huffman Code A 1100 B 1101 C 100 D 101 E 111 F 0 Result: The character with the highest frequency (F) has the shortest code (0), and characters with lower frequencies have longer codes.\nEncoding Example If we encode the string ABCD, it would be:\nA → 1100 B → 1101 C → 100 D → 101 Encoded string: 11001101100101\nDecoding with Huffman Code Decoding is performed by traversing the Huffman Tree:\nStart at the root. For each 0, move left; for each 1, move right. When a leaf node is reached, add the character to the output. Return to the root and repeat until the entire encoded string is decoded. Advantages of Huffman Coding Lossless Compression: No data is lost during compression. Efficiency: Saves space by assigning shorter codes to more frequent characters. Optimal for Given Frequencies: Huffman Coding guarantees the minimum number of bits required for a set of characters based on their frequencies. Limitations of Huffman Coding Fixed Frequencies: Huffman Coding is optimal for a fixed set of frequencies. Changes in frequency distribution may lead to inefficiency. Not Suitable for Real-Time Applications: For large and variable data, the tree-building process can be slow. Suboptimal for Small Files: May add overhead for very small files where the additional tree data outweighs compression benefits. Applications of Huffman Coding Data Compression:\nWidely used in file compression formats like ZIP and RAR. Multimedia Compression:\nUtilized in JPEG and MP3 formats to reduce file size. Text Compression:\nUseful in compressing text files and emails for faster transmission. Telecommunication:\nEmployed in transmission protocols to optimize data transfer efficiency. Data Transmission:\nApplied in network data packet optimization for reducing bandwidth usage. Summary Huffman Coding is a fundamental algorithm for lossless data compression, leveraging variable-length encoding to minimize storage and bandwidth requirements. By prioritizing more frequent characters with shorter codes, it efficiently reduces data size. Its applications span various fields, including file compression, multimedia, and network optimization, making it a cornerstone of efficient data handling in digital systems.\n","permalink":"http://localhost:1313/posts/huffman-coding/","summary":"\u003ch1 id=\"huffman-coding\"\u003eHuffman Coding\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eHuffman Coding\u003c/strong\u003e is a popular algorithm used for data compression. It was developed by \u003cstrong\u003eDavid A. Huffman\u003c/strong\u003e in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\u003c/p\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#how-huffman-coding-works\"\u003eHow Huffman Coding Works\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#example-of-huffman-coding\"\u003eExample of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#decoding-with-huffman-code\"\u003eDecoding with Huffman Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#advantages-of-huffman-coding\"\u003eAdvantages of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#applications-of-huffman-coding\"\u003eApplications of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#limitations-of-huffman-coding\"\u003eLimitations of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eHuffman Coding is a \u003cstrong\u003elossless compression algorithm\u003c/strong\u003e, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\u003c/p\u003e","title":"Huffman Coding"},{"content":" Embracing Git Submodules: A Journey to a Seamless Dotfiles Setup I had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was. In my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\nThe Challenge Managing dotfiles is a daunting task, especially when dealing with a complex array of configurations spread across multitudes of applications and tools. Initially, I used traditional methods like stow. But, as my setup kept evolving, I needed an even more sophisticated solution to handle not just my primary dotfiles but also various submodules, such as for Neovim.\nDiscovering Git Submodules All I heard about submodules was the scary stories of how messy it can get. However, Git submodules are a powerful feature that allows you to include and manage repositories within a repository. This feature became a game-changer in my quest for a cleaner setup. Here’s why:\n1. Seamless Integration Using Git submodules, I could integrate external repositories directly into my dotfiles repository. For e.g, integrating a Neovim configuration repository as a submodule meant that updates to plugins or configurations could be managed seamlessly without disrupting the primary dotfiles setup.\n2. Simplified Updates Managing updates with Git submodules turned out to be straightforward. With commands like git submodule update --init --recursive, I could ensure that all submodules were initialized and up-to-date with just a single command. This eliminated the need for manual updates and checks, saving time and reducing errors.\n3. Enhanced Organization By organizing my configurations into separate repositories and including them as submodules, I achieved a cleaner, more modular setup. This approach made it easier to maintain and update each component individually while keeping the main repository organized.\nThe Transition to yadm The journey didn’t stop with Git submodules. I transitioned to using yadm (Yet Another Dotfiles Manager), which enhanced the management of my dotfiles even further. Here’s how yadm fit into the picture:\n1. Advanced Dotfiles Management yadm offered advanced features tailored for dotfiles management. It provided built-in support for handling dotfiles repositories and their submodules. With commands like yadm clone, yadm pull, and yadm submodule update, I could effortlessly manage and synchronize my dotfiles across systems.\n2. Automation and Consistency Initially, it felt very taxating to think of yadm as a substitue for git with dotfiles controlling power, but after around 20 or so minutes, I was convinced that this the way I wanted to manage my dotfiles all along. No sucky symlinks, no confusion, just a simple repo which stores what I need to store without the agressive .gitignore in my home directory. Incorporating yadm into my Ansible playbook automated the setup process. The playbook cloned the dotfiles repository, executed a bootstrap script, and ensured that all submodules were initialized and updated. This automation ensured consistency across setups, reducing manual intervention and potential configuration drift.\n3. Streamlined Configuration Using yadm streamlined the configuration of my system. It handled the intricacies of managing dotfiles and submodules, allowed me to focus on enhancing my development environment rather than wrestling with configuration issues. If you read it so far, I think you should give it a fair try, it will be worth it.\nConclusion Embracing Git submodules and yadm has been a transformative experience. It has simplified the management of my dotfiles, improved organization, and enhanced the automation of my system setup. For anyone dealing with complex dotfiles setups or seeking a more efficient way to manage configurations, exploring Git submodules and yadm is highly recommended.\nThis journey has not only refined my setup but also highlighted the power of leveraging the right tools for the task at hand. The integration of Git submodules into my workflow stands as a testament to how thoughtful tooling choices can lead to a more streamlined and enjoyable development experience.\n","permalink":"http://localhost:1313/posts/git-submodules/","summary":"\u003chr\u003e\n\u003ch2 id=\"embracing-git-submodules-a-journey-to-a-seamless-dotfiles-setup\"\u003eEmbracing Git Submodules: A Journey to a Seamless Dotfiles Setup\u003c/h2\u003e\n\u003cp\u003eI had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was.\nIn my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\u003c/p\u003e","title":"Git Submodules"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"My First Post"},{"content":"Income Tax for Noobs Disclaimer This is basic educational information about taxation. It is not personal tax advice. For official guidance, always check government websites.\nSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\nSo I thought why not try to understand how it works to safeguard myself (and my money). While learning about it, I thought I can share the knowledge about the same, so here we are.\nSince I am a salaried person like most people, I\u0026rsquo;ll only discuss the same here.\nTaxable Income Part of your income which you are obliged to pay taxes on. The taxable income will eventually decide your tax slab.\nTax slabs is just rules that if you have taxable income over let\u0026rsquo;s say 7 Lakhs. then you have to pay 10% (for example) as an income tax on it. That means 70,000 will be your income tax.\nSounds like a lot. So we have some ways to reduce the tax amount you pay. Here is where you have to grind your brain for the most part.\nDeductions: Make your taxable money smaller so you pay less tax, sometimes even at a lower rate. Rebates: Reduce the final tax amount directly. Exemptions: Exclude some of your income from being taxed. ","permalink":"http://localhost:1313/posts/income-tax-for-noobs/","summary":"\u003ch1 id=\"income-tax-for-noobs\"\u003eIncome Tax for Noobs\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebasic educational information about taxation\u003c/strong\u003e. It is \u003cstrong\u003enot personal tax advice\u003c/strong\u003e. For official guidance, always check \u003cstrong\u003egovernment websites\u003c/strong\u003e.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\u003c/p\u003e","title":"Income Tax for Noobs"},{"content":" Finance for noobs I come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\nDisclaimer This content is primarily relevant to India and sometimes US markets. The content here is purely for educational purposes. This is not financial advice.\nStocks Stock is basically ownership of a company.\nUsual ways that people make profit from a stock is:\nPrice appreciation: you bought it for 100 rupees, sold for 200. profit of 100 in your pocket. Dividends: company gives out profits to all owners yearly or so. But this is upto company whether they want to give away or not. Mutual Funds I growed up watching mutual funds advertisements many times, never really understood what they meant.\nA very common example used to explain it is a basket of stocks. However, I think most simple way to explain it is:\nIt is a collection of different stock (and stock like stuff). Reason for it to be a collection is so that risk is reduced.\nThis is done because investing solely in a single company is very high risk. What if one day there is some negative PR, and company stock hits rock bottom. Investing little bit in many companies will save u from this loss because profit of some other place can help you.\nYou will hear a popular saying, \u0026ldquo;Don\u0026rsquo;t put all your eggs in one basket.\u0026rdquo; This is what they\u0026rsquo;re talking about.\nPortfolio of a fund means which stocks they have in their collection. But your portfolio means what all of the investments you are holding.\nOne more thing u will hear is that there are stock market index funds. Think of these also as a collection of stocks.\nIn india we have two main stock indices:\nNifty-50: Top 50 companies in National Stock Exchange (NSE) Sensex: Top 30 companies in Bombay Stock Exchange (BSE) A Stock exchange is basically a place where people can sell or buy stocks under some party like Govt monitoring them. Governments try to keep regulations in place so that people don\u0026rsquo;t misbehave.\nAn index is actually not a mutual fund. It is just a public list for people to know how market is doing overall.\nAny mutual fund can mimic the index. So it means they keep their investments only in Nifty 50 for example. These mutual funds are called an Index fund or ETFs.\nNow you may wonder, why they are called \u0026ldquo;mutual\u0026rdquo; funds. What happens is that many people buy a mutual fund in bulk/pool.\nSo mutual means collective ownership/sharing. This means profits and losses are equally shared among all the investors.\nWho does this?\nFunds are managed by Asset Management Companies (AMC). They have their fund managers who speculate the market for returns. Since they\u0026rsquo;re doing the heavy lifting of market research and you are just putting money in, they charge you a premium.\nThis premium is called as \u0026ldquo;Expense ratio\u0026rdquo;. A 1% expense ratio means on investing 100 rupees, you have to pay 1 rupee to the AMC every year. Lastly, you will hear types of mutual funds:\nSmall cap: invest mostly in small scale companies, high risk, high reward. Mid cap: invest mostly in medium scale companies, quite stable, medium risk, medium reward. Large cap: invest mostly in large scale companies, low risk, low reward. so, in short, small scale startups can fail easily and if they boom, they reward generously too and large scale companies stock price is table so not much amount of profit, but the stock price won\u0026rsquo;t be bouncing up and down too much.\nMetrics CAGR So if you looked at any ads for mututal funds, you must have seen a metric called CAGR.\nFull form: Compound Annual Growth Rate. Basically, it is avg growth rate on a yearly basis. Growth means how much your investment increased in value. Like buying a Tata stock which was 100 rupees now became 200, so it is 100% growth.\nLet\u0026rsquo;s say u bought a mutual fund with a CAGR of 30%. But you don\u0026rsquo;t know if the fund was really lucky that one year it growed by 150% and rest of the time with 10%.\nThe problem with only looking at one metric is that you will lose insight on other important stuff. Think of it like you need to have an idea of the bigger picture of the market to make profit consistently.\nThere are a lot of metrics like:\nSharpe ratio Sharpe is basically the ratio of return over risk. So you for example, you are given two choices of buy a house.\nHouse A will give you 100% returns i.e. double the investment. It\u0026rsquo;s a very nice sea-faced apartment. House B will give you 10% returns.\nYou would buy House A, seems like a no-brainer.\nBut if something happens one day like a tsunami or something, House A will be washed way in it. So you have the risk of losing entire investment you put in. House B is in reletively safe area, no earthquakes, no natural disasters.\nWould you still buy house A now?\nSo this is what return to risk ratio does. You know how much returns you can make but you also need to know how safe investment it is.\nBeta Measures the volatility (how much a stock jumps up or down) compared to market.\nβ = 1 → moves with market β \u0026gt; 1 → more volatile than market β \u0026lt; 1 → less volatile than market β \u0026lt; 0 → moves opposite to market Capture ratio Financial Assets So I\u0026rsquo;ve been talking about stocks all the way. But there are also more types of it which are different but they work in same manner. But I think for today, just have a short overview on what they are:\n1. Equity / Stocks Ownership in a company. Profit from price appreciation and dividends. 2. Debt / Bonds Lending money to government or corporations. Earn fixed interest (aka coupon). Quite low risk, therefore low returns. 3. Cash \u0026amp; Cash Equivalents Bank deposits (like Fixed Deposits), money market instruments, treasury bills. Very low risk, highly liquid. 4. Derivatives Financial contracts whose value depends on an underlying asset. Examples: Futures, Options, Swaps. 5. Mutual Funds \u0026amp; ETFs Pooled investments in a mix of stocks, bonds, or other assets. Diversified risk. 6. Commodities Physical goods like gold, silver, oil, agricultural products. Can be invested via commodity ETFs or futures. 7. Real Estate / Property Residential, commercial, or land. Can generate rental income and capital gains. 8. Alternative Investments Hedge funds, private equity, crypto, collectibles. Typically higher risk, lower liquidity. ","permalink":"http://localhost:1313/posts/fin-for-noobs/","summary":"\u003chr\u003e\n\u003ch1 id=\"finance-for-noobs\"\u003eFinance for noobs\u003c/h1\u003e\n\u003cp\u003eI come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content is primarily relevant to India and sometimes US markets.\nThe content here is purely for educational purposes.\n\u003cstrong\u003eThis is not financial advice.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"stocks\"\u003eStocks\u003c/h2\u003e\n\u003cp\u003eStock is basically ownership of a company.\u003c/p\u003e\n\u003cp\u003eUsual ways that people make profit from a stock is:\u003c/p\u003e","title":"Finance for Noobs"},{"content":"Huffman Coding Huffman Coding is a popular algorithm used for data compression. It was developed by David A. Huffman in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\nTable of Contents Introduction How Huffman Coding Works Example of Huffman Coding Decoding with Huffman Code Advantages of Huffman Coding Applications of Huffman Coding Limitations of Huffman Coding Introduction Huffman Coding is a lossless compression algorithm, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\nHow Huffman Coding Works Step-by-Step Process Frequency Calculation:\nCount the frequency of each character in the data. Create Leaf Nodes:\nFor each character, create a leaf node containing its frequency and value. Build a Priority Queue:\nInsert all leaf nodes into a priority queue (or min-heap), sorted by frequency (smallest frequency at the top). Construct the Huffman Tree:\nRepeat the following until only one node remains in the priority queue: Extract the two nodes with the lowest frequency. Create a new node with a frequency equal to the sum of these two nodes. Set the two extracted nodes as the left and right children of the new node. Insert the new node back into the priority queue. The last remaining node is the root of the Huffman Tree. Assign Codes:\nTraverse the Huffman Tree from the root to each leaf node. Assign a binary 0 for each left edge and 1 for each right edge. The path to each character forms its Huffman Code. Example of Huffman Coding Consider the following example data:\nCharacter Frequency A 5 B 9 C 12 D 13 E 16 F 45 Step 1: Build the Huffman Tree Start with individual nodes sorted by frequency. Merge nodes with the lowest frequencies until only one node remains. The process would look like this:\nCombine A (5) and B (9) → New Node (14) Combine C (12) and D (13) → New Node (25) Combine New Node (14) and E (16) → New Node (30) Combine New Node (25) and F (45) → New Node (70) Combine New Node (30) and New Node (70) → Final Root (100) Step 2: Assign Codes After constructing the Huffman Tree, assign binary codes based on the path to each character:\nCharacter Huffman Code A 1100 B 1101 C 100 D 101 E 111 F 0 Result: The character with the highest frequency (F) has the shortest code (0), and characters with lower frequencies have longer codes.\nEncoding Example If we encode the string ABCD, it would be:\nA → 1100 B → 1101 C → 100 D → 101 Encoded string: 11001101100101\nDecoding with Huffman Code Decoding is performed by traversing the Huffman Tree:\nStart at the root. For each 0, move left; for each 1, move right. When a leaf node is reached, add the character to the output. Return to the root and repeat until the entire encoded string is decoded. Advantages of Huffman Coding Lossless Compression: No data is lost during compression. Efficiency: Saves space by assigning shorter codes to more frequent characters. Optimal for Given Frequencies: Huffman Coding guarantees the minimum number of bits required for a set of characters based on their frequencies. Limitations of Huffman Coding Fixed Frequencies: Huffman Coding is optimal for a fixed set of frequencies. Changes in frequency distribution may lead to inefficiency. Not Suitable for Real-Time Applications: For large and variable data, the tree-building process can be slow. Suboptimal for Small Files: May add overhead for very small files where the additional tree data outweighs compression benefits. Applications of Huffman Coding Data Compression:\nWidely used in file compression formats like ZIP and RAR. Multimedia Compression:\nUtilized in JPEG and MP3 formats to reduce file size. Text Compression:\nUseful in compressing text files and emails for faster transmission. Telecommunication:\nEmployed in transmission protocols to optimize data transfer efficiency. Data Transmission:\nApplied in network data packet optimization for reducing bandwidth usage. Summary Huffman Coding is a fundamental algorithm for lossless data compression, leveraging variable-length encoding to minimize storage and bandwidth requirements. By prioritizing more frequent characters with shorter codes, it efficiently reduces data size. Its applications span various fields, including file compression, multimedia, and network optimization, making it a cornerstone of efficient data handling in digital systems.\n","permalink":"http://localhost:1313/posts/huffman-coding/","summary":"\u003ch1 id=\"huffman-coding\"\u003eHuffman Coding\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eHuffman Coding\u003c/strong\u003e is a popular algorithm used for data compression. It was developed by \u003cstrong\u003eDavid A. Huffman\u003c/strong\u003e in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\u003c/p\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#how-huffman-coding-works\"\u003eHow Huffman Coding Works\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#example-of-huffman-coding\"\u003eExample of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#decoding-with-huffman-code\"\u003eDecoding with Huffman Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#advantages-of-huffman-coding\"\u003eAdvantages of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#applications-of-huffman-coding\"\u003eApplications of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#limitations-of-huffman-coding\"\u003eLimitations of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eHuffman Coding is a \u003cstrong\u003elossless compression algorithm\u003c/strong\u003e, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\u003c/p\u003e","title":"Huffman Coding"},{"content":" Embracing Git Submodules: A Journey to a Seamless Dotfiles Setup I had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was. In my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\nThe Challenge Managing dotfiles is a daunting task, especially when dealing with a complex array of configurations spread across multitudes of applications and tools. Initially, I used traditional methods like stow. But, as my setup kept evolving, I needed an even more sophisticated solution to handle not just my primary dotfiles but also various submodules, such as for Neovim.\nDiscovering Git Submodules All I heard about submodules was the scary stories of how messy it can get. However, Git submodules are a powerful feature that allows you to include and manage repositories within a repository. This feature became a game-changer in my quest for a cleaner setup. Here’s why:\n1. Seamless Integration Using Git submodules, I could integrate external repositories directly into my dotfiles repository. For e.g, integrating a Neovim configuration repository as a submodule meant that updates to plugins or configurations could be managed seamlessly without disrupting the primary dotfiles setup.\n2. Simplified Updates Managing updates with Git submodules turned out to be straightforward. With commands like git submodule update --init --recursive, I could ensure that all submodules were initialized and up-to-date with just a single command. This eliminated the need for manual updates and checks, saving time and reducing errors.\n3. Enhanced Organization By organizing my configurations into separate repositories and including them as submodules, I achieved a cleaner, more modular setup. This approach made it easier to maintain and update each component individually while keeping the main repository organized.\nThe Transition to yadm The journey didn’t stop with Git submodules. I transitioned to using yadm (Yet Another Dotfiles Manager), which enhanced the management of my dotfiles even further. Here’s how yadm fit into the picture:\n1. Advanced Dotfiles Management yadm offered advanced features tailored for dotfiles management. It provided built-in support for handling dotfiles repositories and their submodules. With commands like yadm clone, yadm pull, and yadm submodule update, I could effortlessly manage and synchronize my dotfiles across systems.\n2. Automation and Consistency Initially, it felt very taxating to think of yadm as a substitue for git with dotfiles controlling power, but after around 20 or so minutes, I was convinced that this the way I wanted to manage my dotfiles all along. No sucky symlinks, no confusion, just a simple repo which stores what I need to store without the agressive .gitignore in my home directory. Incorporating yadm into my Ansible playbook automated the setup process. The playbook cloned the dotfiles repository, executed a bootstrap script, and ensured that all submodules were initialized and updated. This automation ensured consistency across setups, reducing manual intervention and potential configuration drift.\n3. Streamlined Configuration Using yadm streamlined the configuration of my system. It handled the intricacies of managing dotfiles and submodules, allowed me to focus on enhancing my development environment rather than wrestling with configuration issues. If you read it so far, I think you should give it a fair try, it will be worth it.\nConclusion Embracing Git submodules and yadm has been a transformative experience. It has simplified the management of my dotfiles, improved organization, and enhanced the automation of my system setup. For anyone dealing with complex dotfiles setups or seeking a more efficient way to manage configurations, exploring Git submodules and yadm is highly recommended.\nThis journey has not only refined my setup but also highlighted the power of leveraging the right tools for the task at hand. The integration of Git submodules into my workflow stands as a testament to how thoughtful tooling choices can lead to a more streamlined and enjoyable development experience.\n","permalink":"http://localhost:1313/posts/git-submodules/","summary":"\u003chr\u003e\n\u003ch2 id=\"embracing-git-submodules-a-journey-to-a-seamless-dotfiles-setup\"\u003eEmbracing Git Submodules: A Journey to a Seamless Dotfiles Setup\u003c/h2\u003e\n\u003cp\u003eI had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was.\nIn my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\u003c/p\u003e","title":"Git Submodules"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"My First Post"},{"content":"Income Tax for Noobs Disclaimer This is basic educational information about taxation. It is not personal tax advice. For official guidance, always check government websites.\nSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\nSo I thought why not try to understand how it works to safeguard myself (and my money). While learning about it, I thought I can share the knowledge about the same, so here we are.\nSince I am a salaried person like most people, I\u0026rsquo;ll only discuss the same here.\nTaxable Income Part of your income which you are obliged to pay taxes on. The taxable income will eventually decide your tax slab.\nTax slabs is just rules that if you have taxable income over let\u0026rsquo;s say 7 Lakhs. then you have to pay 10% (for example) as an income tax on it. That means 70,000 will be your income tax.\nSounds like a lot. So we have some ways to reduce the tax amount you pay. Here is where you have to grind your brain for the most part.\nDeductions: Make your taxable money smaller so you pay less tax, sometimes even at a lower rate. Rebates: Reduce the final tax amount directly. Exemptions: Exclude some of your income from being taxed. How do you pay Income Tax If you are a salaried person, the tax for you is commonly taken by your employer itself. This is called Tax deducted at Source (TDS)\n","permalink":"http://localhost:1313/posts/income-tax-for-noobs/","summary":"\u003ch1 id=\"income-tax-for-noobs\"\u003eIncome Tax for Noobs\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebasic educational information about taxation\u003c/strong\u003e. It is \u003cstrong\u003enot personal tax advice\u003c/strong\u003e. For official guidance, always check \u003cstrong\u003egovernment websites\u003c/strong\u003e.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\u003c/p\u003e","title":"Income Tax for Noobs"},{"content":" Finance for noobs I come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\nDisclaimer This content is primarily relevant to India and sometimes US markets. The content here is purely for educational purposes. This is not financial advice.\nStocks Stock is basically ownership of a company.\nUsual ways that people make profit from a stock is:\nPrice appreciation: you bought it for 100 rupees, sold for 200. profit of 100 in your pocket. Dividends: company gives out profits to all owners yearly or so. But this is upto company whether they want to give away or not. Mutual Funds I growed up watching mutual funds advertisements many times, never really understood what they meant.\nA very common example used to explain it is a basket of stocks. However, I think most simple way to explain it is:\nIt is a collection of different stock (and stock like stuff). Reason for it to be a collection is so that risk is reduced.\nThis is done because investing solely in a single company is very high risk. What if one day there is some negative PR, and company stock hits rock bottom. Investing little bit in many companies will save u from this loss because profit of some other place can help you.\nYou will hear a popular saying, \u0026ldquo;Don\u0026rsquo;t put all your eggs in one basket.\u0026rdquo; This is what they\u0026rsquo;re talking about.\nPortfolio of a fund means which stocks they have in their collection. But your portfolio means what all of the investments you are holding.\nOne more thing u will hear is that there are stock market index funds. Think of these also as a collection of stocks.\nIn india we have two main stock indices:\nNifty-50: Top 50 companies in National Stock Exchange (NSE) Sensex: Top 30 companies in Bombay Stock Exchange (BSE) A Stock exchange is basically a place where people can sell or buy stocks under some party like Govt monitoring them. Governments try to keep regulations in place so that people don\u0026rsquo;t misbehave.\nAn index is actually not a mutual fund. It is just a public list for people to know how market is doing overall.\nAny mutual fund can mimic the index. So it means they keep their investments only in Nifty 50 for example. These mutual funds are called an Index fund or ETFs.\nNow you may wonder, why they are called \u0026ldquo;mutual\u0026rdquo; funds. What happens is that many people buy a mutual fund in bulk/pool.\nSo mutual means collective ownership/sharing. This means profits and losses are equally shared among all the investors.\nWho does this?\nFunds are managed by Asset Management Companies (AMC). They have their fund managers who speculate the market for returns. Since they\u0026rsquo;re doing the heavy lifting of market research and you are just putting money in, they charge you a premium.\nThis premium is called as \u0026ldquo;Expense ratio\u0026rdquo;. A 1% expense ratio means on investing 100 rupees, you have to pay 1 rupee to the AMC every year. Lastly, you will hear types of mutual funds:\nSmall cap: invest mostly in small scale companies, high risk, high reward. Mid cap: invest mostly in medium scale companies, quite stable, medium risk, medium reward. Large cap: invest mostly in large scale companies, low risk, low reward. so, in short, small scale startups can fail easily and if they boom, they reward generously too and large scale companies stock price is table so not much amount of profit, but the stock price won\u0026rsquo;t be bouncing up and down too much.\nMetrics CAGR So if you looked at any ads for mututal funds, you must have seen a metric called CAGR.\nFull form: Compound Annual Growth Rate. Basically, it is avg growth rate on a yearly basis. Growth means how much your investment increased in value. Like buying a Tata stock which was 100 rupees now became 200, so it is 100% growth.\nLet\u0026rsquo;s say u bought a mutual fund with a CAGR of 30%. But you don\u0026rsquo;t know if the fund was really lucky that one year it growed by 150% and rest of the time with 10%.\nThe problem with only looking at one metric is that you will lose insight on other important stuff. Think of it like you need to have an idea of the bigger picture of the market to make profit consistently.\nThere are a lot of metrics like:\nSharpe ratio Sharpe is basically the ratio of return over risk. So you for example, you are given two choices of buy a house.\nHouse A will give you 100% returns i.e. double the investment. It\u0026rsquo;s a very nice sea-faced apartment. House B will give you 10% returns.\nYou would buy House A, seems like a no-brainer.\nBut if something happens one day like a tsunami or something, House A will be washed way in it. So you have the risk of losing entire investment you put in. House B is in reletively safe area, no earthquakes, no natural disasters.\nWould you still buy house A now?\nSo this is what return to risk ratio does. You know how much returns you can make but you also need to know how safe investment it is.\nBeta Measures the volatility (how much a stock jumps up or down) compared to market.\nβ = 1 → moves with market β \u0026gt; 1 → more volatile than market β \u0026lt; 1 → less volatile than market β \u0026lt; 0 → moves opposite to market Capture ratio Financial Assets So I\u0026rsquo;ve been talking about stocks all the way. But there are also more types of it which are different but they work in same manner. But I think for today, just have a short overview on what they are:\n1. Equity / Stocks Ownership in a company. Profit from price appreciation and dividends. 2. Debt / Bonds Lending money to government or corporations. Earn fixed interest (aka coupon). Quite low risk, therefore low returns. 3. Cash \u0026amp; Cash Equivalents Bank deposits (like Fixed Deposits), money market instruments, treasury bills. Very low risk, highly liquid. 4. Derivatives Financial contracts whose value depends on an underlying asset. Examples: Futures, Options, Swaps. 5. Mutual Funds \u0026amp; ETFs Pooled investments in a mix of stocks, bonds, or other assets. Diversified risk. 6. Commodities Physical goods like gold, silver, oil, agricultural products. Can be invested via commodity ETFs or futures. 7. Real Estate / Property Residential, commercial, or land. Can generate rental income and capital gains. 8. Alternative Investments Hedge funds, private equity, crypto, collectibles. Typically higher risk, lower liquidity. ","permalink":"http://localhost:1313/posts/fin-for-noobs/","summary":"\u003chr\u003e\n\u003ch1 id=\"finance-for-noobs\"\u003eFinance for noobs\u003c/h1\u003e\n\u003cp\u003eI come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content is primarily relevant to India and sometimes US markets.\nThe content here is purely for educational purposes.\n\u003cstrong\u003eThis is not financial advice.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"stocks\"\u003eStocks\u003c/h2\u003e\n\u003cp\u003eStock is basically ownership of a company.\u003c/p\u003e\n\u003cp\u003eUsual ways that people make profit from a stock is:\u003c/p\u003e","title":"Finance for Noobs"},{"content":"Huffman Coding Huffman Coding is a popular algorithm used for data compression. It was developed by David A. Huffman in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\nTable of Contents Introduction How Huffman Coding Works Example of Huffman Coding Decoding with Huffman Code Advantages of Huffman Coding Applications of Huffman Coding Limitations of Huffman Coding Introduction Huffman Coding is a lossless compression algorithm, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\nHow Huffman Coding Works Step-by-Step Process Frequency Calculation:\nCount the frequency of each character in the data. Create Leaf Nodes:\nFor each character, create a leaf node containing its frequency and value. Build a Priority Queue:\nInsert all leaf nodes into a priority queue (or min-heap), sorted by frequency (smallest frequency at the top). Construct the Huffman Tree:\nRepeat the following until only one node remains in the priority queue: Extract the two nodes with the lowest frequency. Create a new node with a frequency equal to the sum of these two nodes. Set the two extracted nodes as the left and right children of the new node. Insert the new node back into the priority queue. The last remaining node is the root of the Huffman Tree. Assign Codes:\nTraverse the Huffman Tree from the root to each leaf node. Assign a binary 0 for each left edge and 1 for each right edge. The path to each character forms its Huffman Code. Example of Huffman Coding Consider the following example data:\nCharacter Frequency A 5 B 9 C 12 D 13 E 16 F 45 Step 1: Build the Huffman Tree Start with individual nodes sorted by frequency. Merge nodes with the lowest frequencies until only one node remains. The process would look like this:\nCombine A (5) and B (9) → New Node (14) Combine C (12) and D (13) → New Node (25) Combine New Node (14) and E (16) → New Node (30) Combine New Node (25) and F (45) → New Node (70) Combine New Node (30) and New Node (70) → Final Root (100) Step 2: Assign Codes After constructing the Huffman Tree, assign binary codes based on the path to each character:\nCharacter Huffman Code A 1100 B 1101 C 100 D 101 E 111 F 0 Result: The character with the highest frequency (F) has the shortest code (0), and characters with lower frequencies have longer codes.\nEncoding Example If we encode the string ABCD, it would be:\nA → 1100 B → 1101 C → 100 D → 101 Encoded string: 11001101100101\nDecoding with Huffman Code Decoding is performed by traversing the Huffman Tree:\nStart at the root. For each 0, move left; for each 1, move right. When a leaf node is reached, add the character to the output. Return to the root and repeat until the entire encoded string is decoded. Advantages of Huffman Coding Lossless Compression: No data is lost during compression. Efficiency: Saves space by assigning shorter codes to more frequent characters. Optimal for Given Frequencies: Huffman Coding guarantees the minimum number of bits required for a set of characters based on their frequencies. Limitations of Huffman Coding Fixed Frequencies: Huffman Coding is optimal for a fixed set of frequencies. Changes in frequency distribution may lead to inefficiency. Not Suitable for Real-Time Applications: For large and variable data, the tree-building process can be slow. Suboptimal for Small Files: May add overhead for very small files where the additional tree data outweighs compression benefits. Applications of Huffman Coding Data Compression:\nWidely used in file compression formats like ZIP and RAR. Multimedia Compression:\nUtilized in JPEG and MP3 formats to reduce file size. Text Compression:\nUseful in compressing text files and emails for faster transmission. Telecommunication:\nEmployed in transmission protocols to optimize data transfer efficiency. Data Transmission:\nApplied in network data packet optimization for reducing bandwidth usage. Summary Huffman Coding is a fundamental algorithm for lossless data compression, leveraging variable-length encoding to minimize storage and bandwidth requirements. By prioritizing more frequent characters with shorter codes, it efficiently reduces data size. Its applications span various fields, including file compression, multimedia, and network optimization, making it a cornerstone of efficient data handling in digital systems.\n","permalink":"http://localhost:1313/posts/huffman-coding/","summary":"\u003ch1 id=\"huffman-coding\"\u003eHuffman Coding\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eHuffman Coding\u003c/strong\u003e is a popular algorithm used for data compression. It was developed by \u003cstrong\u003eDavid A. Huffman\u003c/strong\u003e in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\u003c/p\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#how-huffman-coding-works\"\u003eHow Huffman Coding Works\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#example-of-huffman-coding\"\u003eExample of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#decoding-with-huffman-code\"\u003eDecoding with Huffman Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#advantages-of-huffman-coding\"\u003eAdvantages of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#applications-of-huffman-coding\"\u003eApplications of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#limitations-of-huffman-coding\"\u003eLimitations of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eHuffman Coding is a \u003cstrong\u003elossless compression algorithm\u003c/strong\u003e, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\u003c/p\u003e","title":"Huffman Coding"},{"content":" Embracing Git Submodules: A Journey to a Seamless Dotfiles Setup I had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was. In my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\nThe Challenge Managing dotfiles is a daunting task, especially when dealing with a complex array of configurations spread across multitudes of applications and tools. Initially, I used traditional methods like stow. But, as my setup kept evolving, I needed an even more sophisticated solution to handle not just my primary dotfiles but also various submodules, such as for Neovim.\nDiscovering Git Submodules All I heard about submodules was the scary stories of how messy it can get. However, Git submodules are a powerful feature that allows you to include and manage repositories within a repository. This feature became a game-changer in my quest for a cleaner setup. Here’s why:\n1. Seamless Integration Using Git submodules, I could integrate external repositories directly into my dotfiles repository. For e.g, integrating a Neovim configuration repository as a submodule meant that updates to plugins or configurations could be managed seamlessly without disrupting the primary dotfiles setup.\n2. Simplified Updates Managing updates with Git submodules turned out to be straightforward. With commands like git submodule update --init --recursive, I could ensure that all submodules were initialized and up-to-date with just a single command. This eliminated the need for manual updates and checks, saving time and reducing errors.\n3. Enhanced Organization By organizing my configurations into separate repositories and including them as submodules, I achieved a cleaner, more modular setup. This approach made it easier to maintain and update each component individually while keeping the main repository organized.\nThe Transition to yadm The journey didn’t stop with Git submodules. I transitioned to using yadm (Yet Another Dotfiles Manager), which enhanced the management of my dotfiles even further. Here’s how yadm fit into the picture:\n1. Advanced Dotfiles Management yadm offered advanced features tailored for dotfiles management. It provided built-in support for handling dotfiles repositories and their submodules. With commands like yadm clone, yadm pull, and yadm submodule update, I could effortlessly manage and synchronize my dotfiles across systems.\n2. Automation and Consistency Initially, it felt very taxating to think of yadm as a substitue for git with dotfiles controlling power, but after around 20 or so minutes, I was convinced that this the way I wanted to manage my dotfiles all along. No sucky symlinks, no confusion, just a simple repo which stores what I need to store without the agressive .gitignore in my home directory. Incorporating yadm into my Ansible playbook automated the setup process. The playbook cloned the dotfiles repository, executed a bootstrap script, and ensured that all submodules were initialized and updated. This automation ensured consistency across setups, reducing manual intervention and potential configuration drift.\n3. Streamlined Configuration Using yadm streamlined the configuration of my system. It handled the intricacies of managing dotfiles and submodules, allowed me to focus on enhancing my development environment rather than wrestling with configuration issues. If you read it so far, I think you should give it a fair try, it will be worth it.\nConclusion Embracing Git submodules and yadm has been a transformative experience. It has simplified the management of my dotfiles, improved organization, and enhanced the automation of my system setup. For anyone dealing with complex dotfiles setups or seeking a more efficient way to manage configurations, exploring Git submodules and yadm is highly recommended.\nThis journey has not only refined my setup but also highlighted the power of leveraging the right tools for the task at hand. The integration of Git submodules into my workflow stands as a testament to how thoughtful tooling choices can lead to a more streamlined and enjoyable development experience.\n","permalink":"http://localhost:1313/posts/git-submodules/","summary":"\u003chr\u003e\n\u003ch2 id=\"embracing-git-submodules-a-journey-to-a-seamless-dotfiles-setup\"\u003eEmbracing Git Submodules: A Journey to a Seamless Dotfiles Setup\u003c/h2\u003e\n\u003cp\u003eI had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was.\nIn my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\u003c/p\u003e","title":"Git Submodules"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"My First Post"},{"content":"Income Tax for Noobs Disclaimer This is basic educational information about taxation. It is not personal tax advice. For official guidance, always check government websites.\nSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\nSo I thought why not try to understand how it works to safeguard myself (and my money). While learning about it, I thought I can share the knowledge about the same, so here we are.\nSince I am a salaried person like most people, I\u0026rsquo;ll only discuss the same here.\nTaxable Income Part of your income which you are obliged to pay taxes on. The taxable income will eventually decide your tax slab.\nTax slabs is just rules that if you have taxable income over let\u0026rsquo;s say 7 Lakhs. then you have to pay 10% (for example) as an income tax on it. That means 70,000 will be your income tax.\nSounds like a lot. So we have some ways to reduce the tax amount you pay. Here is where you have to grind your brain for the most part.\nDeductions: Make your taxable money smaller so you pay less tax, sometimes even at a lower rate. Rebates: Reduce the final tax amount directly. Exemptions: Exclude some of your income from being taxed. How do you pay Income Tax If you are a salaried person, your employer takes a cut from your salary and pays it to the govt. This is called Tax deducted at Source (TDS)\nSo if this is the case then you only have to file in an Income Tax Return (ITR) so you can make your discounts on the tax and get some money back.\n","permalink":"http://localhost:1313/posts/income-tax-for-noobs/","summary":"\u003ch1 id=\"income-tax-for-noobs\"\u003eIncome Tax for Noobs\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebasic educational information about taxation\u003c/strong\u003e. It is \u003cstrong\u003enot personal tax advice\u003c/strong\u003e. For official guidance, always check \u003cstrong\u003egovernment websites\u003c/strong\u003e.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\u003c/p\u003e","title":"Income Tax for Noobs"},{"content":" Finance for noobs I come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\nDisclaimer This content is primarily relevant to India and sometimes US markets. The content here is purely for educational purposes. This is not financial advice.\nStocks Stock is basically ownership of a company.\nUsual ways that people make profit from a stock is:\nPrice appreciation: you bought it for 100 rupees, sold for 200. profit of 100 in your pocket. Dividends: company gives out profits to all owners yearly or so. But this is upto company whether they want to give away or not. Mutual Funds I growed up watching mutual funds advertisements many times, never really understood what they meant.\nA very common example used to explain it is a basket of stocks. However, I think most simple way to explain it is:\nIt is a collection of different stock (and stock like stuff). Reason for it to be a collection is so that risk is reduced.\nThis is done because investing solely in a single company is very high risk. What if one day there is some negative PR, and company stock hits rock bottom. Investing little bit in many companies will save u from this loss because profit of some other place can help you.\nYou will hear a popular saying, \u0026ldquo;Don\u0026rsquo;t put all your eggs in one basket.\u0026rdquo; This is what they\u0026rsquo;re talking about.\nPortfolio of a fund means which stocks they have in their collection. But your portfolio means what all of the investments you are holding.\nOne more thing u will hear is that there are stock market index funds. Think of these also as a collection of stocks.\nIn india we have two main stock indices:\nNifty-50: Top 50 companies in National Stock Exchange (NSE) Sensex: Top 30 companies in Bombay Stock Exchange (BSE) A Stock exchange is basically a place where people can sell or buy stocks under some party like Govt monitoring them. Governments try to keep regulations in place so that people don\u0026rsquo;t misbehave.\nAn index is actually not a mutual fund. It is just a public list for people to know how market is doing overall.\nAny mutual fund can mimic the index. So it means they keep their investments only in Nifty 50 for example. These mutual funds are called an Index fund or ETFs.\nNow you may wonder, why they are called \u0026ldquo;mutual\u0026rdquo; funds. What happens is that many people buy a mutual fund in bulk/pool.\nSo mutual means collective ownership/sharing. This means profits and losses are equally shared among all the investors.\nWho does this?\nFunds are managed by Asset Management Companies (AMC). They have their fund managers who speculate the market for returns. Since they\u0026rsquo;re doing the heavy lifting of market research and you are just putting money in, they charge you a premium.\nThis premium is called as \u0026ldquo;Expense ratio\u0026rdquo;. A 1% expense ratio means on investing 100 rupees, you have to pay 1 rupee to the AMC every year. Lastly, you will hear types of mutual funds:\nSmall cap: invest mostly in small scale companies, high risk, high reward. Mid cap: invest mostly in medium scale companies, quite stable, medium risk, medium reward. Large cap: invest mostly in large scale companies, low risk, low reward. so, in short, small scale startups can fail easily and if they boom, they reward generously too and large scale companies stock price is table so not much amount of profit, but the stock price won\u0026rsquo;t be bouncing up and down too much.\nMetrics CAGR So if you looked at any ads for mututal funds, you must have seen a metric called CAGR.\nFull form: Compound Annual Growth Rate. Basically, it is avg growth rate on a yearly basis. Growth means how much your investment increased in value. Like buying a Tata stock which was 100 rupees now became 200, so it is 100% growth.\nLet\u0026rsquo;s say u bought a mutual fund with a CAGR of 30%. But you don\u0026rsquo;t know if the fund was really lucky that one year it growed by 150% and rest of the time with 10%.\nThe problem with only looking at one metric is that you will lose insight on other important stuff. Think of it like you need to have an idea of the bigger picture of the market to make profit consistently.\nThere are a lot of metrics like:\nSharpe ratio Sharpe is basically the ratio of return over risk. So you for example, you are given two choices of buy a house.\nHouse A will give you 100% returns i.e. double the investment. It\u0026rsquo;s a very nice sea-faced apartment. House B will give you 10% returns.\nYou would buy House A, seems like a no-brainer.\nBut if something happens one day like a tsunami or something, House A will be washed way in it. So you have the risk of losing entire investment you put in. House B is in reletively safe area, no earthquakes, no natural disasters.\nWould you still buy house A now?\nSo this is what return to risk ratio does. You know how much returns you can make but you also need to know how safe investment it is.\nBeta Measures the volatility (how much a stock jumps up or down) compared to market.\nβ = 1 → moves with market β \u0026gt; 1 → more volatile than market β \u0026lt; 1 → less volatile than market β \u0026lt; 0 → moves opposite to market Capture ratio Financial Assets So I\u0026rsquo;ve been talking about stocks all the way. But there are also more types of it which are different but they work in same manner. But I think for today, just have a short overview on what they are:\n1. Equity / Stocks Ownership in a company. Profit from price appreciation and dividends. 2. Debt / Bonds Lending money to government or corporations. Earn fixed interest (aka coupon). Quite low risk, therefore low returns. 3. Cash \u0026amp; Cash Equivalents Bank deposits (like Fixed Deposits), money market instruments, treasury bills. Very low risk, highly liquid. 4. Derivatives Financial contracts whose value depends on an underlying asset. Examples: Futures, Options, Swaps. 5. Mutual Funds \u0026amp; ETFs Pooled investments in a mix of stocks, bonds, or other assets. Diversified risk. 6. Commodities Physical goods like gold, silver, oil, agricultural products. Can be invested via commodity ETFs or futures. 7. Real Estate / Property Residential, commercial, or land. Can generate rental income and capital gains. 8. Alternative Investments Hedge funds, private equity, crypto, collectibles. Typically higher risk, lower liquidity. ","permalink":"http://localhost:1313/posts/fin-for-noobs/","summary":"\u003chr\u003e\n\u003ch1 id=\"finance-for-noobs\"\u003eFinance for noobs\u003c/h1\u003e\n\u003cp\u003eI come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content is primarily relevant to India and sometimes US markets.\nThe content here is purely for educational purposes.\n\u003cstrong\u003eThis is not financial advice.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"stocks\"\u003eStocks\u003c/h2\u003e\n\u003cp\u003eStock is basically ownership of a company.\u003c/p\u003e\n\u003cp\u003eUsual ways that people make profit from a stock is:\u003c/p\u003e","title":"Finance for Noobs"},{"content":"Huffman Coding Huffman Coding is a popular algorithm used for data compression. It was developed by David A. Huffman in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\nTable of Contents Introduction How Huffman Coding Works Example of Huffman Coding Decoding with Huffman Code Advantages of Huffman Coding Applications of Huffman Coding Limitations of Huffman Coding Introduction Huffman Coding is a lossless compression algorithm, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\nHow Huffman Coding Works Step-by-Step Process Frequency Calculation:\nCount the frequency of each character in the data. Create Leaf Nodes:\nFor each character, create a leaf node containing its frequency and value. Build a Priority Queue:\nInsert all leaf nodes into a priority queue (or min-heap), sorted by frequency (smallest frequency at the top). Construct the Huffman Tree:\nRepeat the following until only one node remains in the priority queue: Extract the two nodes with the lowest frequency. Create a new node with a frequency equal to the sum of these two nodes. Set the two extracted nodes as the left and right children of the new node. Insert the new node back into the priority queue. The last remaining node is the root of the Huffman Tree. Assign Codes:\nTraverse the Huffman Tree from the root to each leaf node. Assign a binary 0 for each left edge and 1 for each right edge. The path to each character forms its Huffman Code. Example of Huffman Coding Consider the following example data:\nCharacter Frequency A 5 B 9 C 12 D 13 E 16 F 45 Step 1: Build the Huffman Tree Start with individual nodes sorted by frequency. Merge nodes with the lowest frequencies until only one node remains. The process would look like this:\nCombine A (5) and B (9) → New Node (14) Combine C (12) and D (13) → New Node (25) Combine New Node (14) and E (16) → New Node (30) Combine New Node (25) and F (45) → New Node (70) Combine New Node (30) and New Node (70) → Final Root (100) Step 2: Assign Codes After constructing the Huffman Tree, assign binary codes based on the path to each character:\nCharacter Huffman Code A 1100 B 1101 C 100 D 101 E 111 F 0 Result: The character with the highest frequency (F) has the shortest code (0), and characters with lower frequencies have longer codes.\nEncoding Example If we encode the string ABCD, it would be:\nA → 1100 B → 1101 C → 100 D → 101 Encoded string: 11001101100101\nDecoding with Huffman Code Decoding is performed by traversing the Huffman Tree:\nStart at the root. For each 0, move left; for each 1, move right. When a leaf node is reached, add the character to the output. Return to the root and repeat until the entire encoded string is decoded. Advantages of Huffman Coding Lossless Compression: No data is lost during compression. Efficiency: Saves space by assigning shorter codes to more frequent characters. Optimal for Given Frequencies: Huffman Coding guarantees the minimum number of bits required for a set of characters based on their frequencies. Limitations of Huffman Coding Fixed Frequencies: Huffman Coding is optimal for a fixed set of frequencies. Changes in frequency distribution may lead to inefficiency. Not Suitable for Real-Time Applications: For large and variable data, the tree-building process can be slow. Suboptimal for Small Files: May add overhead for very small files where the additional tree data outweighs compression benefits. Applications of Huffman Coding Data Compression:\nWidely used in file compression formats like ZIP and RAR. Multimedia Compression:\nUtilized in JPEG and MP3 formats to reduce file size. Text Compression:\nUseful in compressing text files and emails for faster transmission. Telecommunication:\nEmployed in transmission protocols to optimize data transfer efficiency. Data Transmission:\nApplied in network data packet optimization for reducing bandwidth usage. Summary Huffman Coding is a fundamental algorithm for lossless data compression, leveraging variable-length encoding to minimize storage and bandwidth requirements. By prioritizing more frequent characters with shorter codes, it efficiently reduces data size. Its applications span various fields, including file compression, multimedia, and network optimization, making it a cornerstone of efficient data handling in digital systems.\n","permalink":"http://localhost:1313/posts/huffman-coding/","summary":"\u003ch1 id=\"huffman-coding\"\u003eHuffman Coding\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eHuffman Coding\u003c/strong\u003e is a popular algorithm used for data compression. It was developed by \u003cstrong\u003eDavid A. Huffman\u003c/strong\u003e in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\u003c/p\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#how-huffman-coding-works\"\u003eHow Huffman Coding Works\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#example-of-huffman-coding\"\u003eExample of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#decoding-with-huffman-code\"\u003eDecoding with Huffman Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#advantages-of-huffman-coding\"\u003eAdvantages of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#applications-of-huffman-coding\"\u003eApplications of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#limitations-of-huffman-coding\"\u003eLimitations of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eHuffman Coding is a \u003cstrong\u003elossless compression algorithm\u003c/strong\u003e, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\u003c/p\u003e","title":"Huffman Coding"},{"content":" Embracing Git Submodules: A Journey to a Seamless Dotfiles Setup I had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was. In my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\nThe Challenge Managing dotfiles is a daunting task, especially when dealing with a complex array of configurations spread across multitudes of applications and tools. Initially, I used traditional methods like stow. But, as my setup kept evolving, I needed an even more sophisticated solution to handle not just my primary dotfiles but also various submodules, such as for Neovim.\nDiscovering Git Submodules All I heard about submodules was the scary stories of how messy it can get. However, Git submodules are a powerful feature that allows you to include and manage repositories within a repository. This feature became a game-changer in my quest for a cleaner setup. Here’s why:\n1. Seamless Integration Using Git submodules, I could integrate external repositories directly into my dotfiles repository. For e.g, integrating a Neovim configuration repository as a submodule meant that updates to plugins or configurations could be managed seamlessly without disrupting the primary dotfiles setup.\n2. Simplified Updates Managing updates with Git submodules turned out to be straightforward. With commands like git submodule update --init --recursive, I could ensure that all submodules were initialized and up-to-date with just a single command. This eliminated the need for manual updates and checks, saving time and reducing errors.\n3. Enhanced Organization By organizing my configurations into separate repositories and including them as submodules, I achieved a cleaner, more modular setup. This approach made it easier to maintain and update each component individually while keeping the main repository organized.\nThe Transition to yadm The journey didn’t stop with Git submodules. I transitioned to using yadm (Yet Another Dotfiles Manager), which enhanced the management of my dotfiles even further. Here’s how yadm fit into the picture:\n1. Advanced Dotfiles Management yadm offered advanced features tailored for dotfiles management. It provided built-in support for handling dotfiles repositories and their submodules. With commands like yadm clone, yadm pull, and yadm submodule update, I could effortlessly manage and synchronize my dotfiles across systems.\n2. Automation and Consistency Initially, it felt very taxating to think of yadm as a substitue for git with dotfiles controlling power, but after around 20 or so minutes, I was convinced that this the way I wanted to manage my dotfiles all along. No sucky symlinks, no confusion, just a simple repo which stores what I need to store without the agressive .gitignore in my home directory. Incorporating yadm into my Ansible playbook automated the setup process. The playbook cloned the dotfiles repository, executed a bootstrap script, and ensured that all submodules were initialized and updated. This automation ensured consistency across setups, reducing manual intervention and potential configuration drift.\n3. Streamlined Configuration Using yadm streamlined the configuration of my system. It handled the intricacies of managing dotfiles and submodules, allowed me to focus on enhancing my development environment rather than wrestling with configuration issues. If you read it so far, I think you should give it a fair try, it will be worth it.\nConclusion Embracing Git submodules and yadm has been a transformative experience. It has simplified the management of my dotfiles, improved organization, and enhanced the automation of my system setup. For anyone dealing with complex dotfiles setups or seeking a more efficient way to manage configurations, exploring Git submodules and yadm is highly recommended.\nThis journey has not only refined my setup but also highlighted the power of leveraging the right tools for the task at hand. The integration of Git submodules into my workflow stands as a testament to how thoughtful tooling choices can lead to a more streamlined and enjoyable development experience.\n","permalink":"http://localhost:1313/posts/git-submodules/","summary":"\u003chr\u003e\n\u003ch2 id=\"embracing-git-submodules-a-journey-to-a-seamless-dotfiles-setup\"\u003eEmbracing Git Submodules: A Journey to a Seamless Dotfiles Setup\u003c/h2\u003e\n\u003cp\u003eI had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was.\nIn my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\u003c/p\u003e","title":"Git Submodules"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"My First Post"},{"content":"Income Tax for Noobs Disclaimer This is basic educational information about taxation. It is not personal tax advice. For official guidance, always check government websites.\nSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\nSo I thought why not try to understand how it works to safeguard myself (and my money). While learning about it, I thought I can share the knowledge about the same, so here we are.\nSince I am a salaried person like most people, I\u0026rsquo;ll only discuss the same here.\nTaxable Income Part of your income which you are obliged to pay taxes on. The taxable income will eventually decide your tax slab.\nTax slabs is just rules that if you have taxable income over let\u0026rsquo;s say 7 Lakhs. then you have to pay 10% (for example) as an income tax on it. That means 70,000 will be your income tax.\nSounds like a lot. So we have some ways to reduce the tax amount you pay. Here is where you have to grind your brain for the most part.\nDeductions: Make your taxable money smaller so you pay less tax, sometimes even at a lower rate. Rebates: Reduce the final tax amount directly. Exemptions: Exclude some of your income from being taxed. How do you pay Income Tax If you are a salaried person, your employer takes a cut from your salary and pays it to the govt. This is called Tax deducted at Source (TDS)\nSo if this is the case then you only have to file in an Income Tax Return (ITR) so you can make your discounts on the tax and get some money back.\nITRs are for 4 types, ITR 1 to 4. We\u0026rsquo;ll only see ITR 1 and 2 since those are for salaried peops.\nITR-1 : For individuals with income up to ₹50 lakh from salary/pension, one house property, and other sources (like interest). No capital gains or foreign assets.\nITR-2: For individuals/HUFs not having business/professional income. Covers salary, multiple house properties, capital gains, foreign income/assets, and income above ₹50 lakh.\n","permalink":"http://localhost:1313/posts/income-tax-for-noobs/","summary":"\u003ch1 id=\"income-tax-for-noobs\"\u003eIncome Tax for Noobs\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebasic educational information about taxation\u003c/strong\u003e. It is \u003cstrong\u003enot personal tax advice\u003c/strong\u003e. For official guidance, always check \u003cstrong\u003egovernment websites\u003c/strong\u003e.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\u003c/p\u003e","title":"Income Tax for Noobs"},{"content":" Finance for noobs I come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\nDisclaimer This content is primarily relevant to India and sometimes US markets. The content here is purely for educational purposes. This is not financial advice.\nStocks Stock is basically ownership of a company.\nUsual ways that people make profit from a stock is:\nPrice appreciation: you bought it for 100 rupees, sold for 200. profit of 100 in your pocket. Dividends: company gives out profits to all owners yearly or so. But this is upto company whether they want to give away or not. Mutual Funds I growed up watching mutual funds advertisements many times, never really understood what they meant.\nA very common example used to explain it is a basket of stocks. However, I think most simple way to explain it is:\nIt is a collection of different stock (and stock like stuff). Reason for it to be a collection is so that risk is reduced.\nThis is done because investing solely in a single company is very high risk. What if one day there is some negative PR, and company stock hits rock bottom. Investing little bit in many companies will save u from this loss because profit of some other place can help you.\nYou will hear a popular saying, \u0026ldquo;Don\u0026rsquo;t put all your eggs in one basket.\u0026rdquo; This is what they\u0026rsquo;re talking about.\nPortfolio of a fund means which stocks they have in their collection. But your portfolio means what all of the investments you are holding.\nOne more thing u will hear is that there are stock market index funds. Think of these also as a collection of stocks.\nIn india we have two main stock indices:\nNifty-50: Top 50 companies in National Stock Exchange (NSE) Sensex: Top 30 companies in Bombay Stock Exchange (BSE) A Stock exchange is basically a place where people can sell or buy stocks under some party like Govt monitoring them. Governments try to keep regulations in place so that people don\u0026rsquo;t misbehave.\nAn index is actually not a mutual fund. It is just a public list for people to know how market is doing overall.\nAny mutual fund can mimic the index. So it means they keep their investments only in Nifty 50 for example. These mutual funds are called an Index fund or ETFs.\nNow you may wonder, why they are called \u0026ldquo;mutual\u0026rdquo; funds. What happens is that many people buy a mutual fund in bulk/pool.\nSo mutual means collective ownership/sharing. This means profits and losses are equally shared among all the investors.\nWho does this?\nFunds are managed by Asset Management Companies (AMC). They have their fund managers who speculate the market for returns. Since they\u0026rsquo;re doing the heavy lifting of market research and you are just putting money in, they charge you a premium.\nThis premium is called as \u0026ldquo;Expense ratio\u0026rdquo;. A 1% expense ratio means on investing 100 rupees, you have to pay 1 rupee to the AMC every year. Lastly, you will hear types of mutual funds:\nSmall cap: invest mostly in small scale companies, high risk, high reward. Mid cap: invest mostly in medium scale companies, quite stable, medium risk, medium reward. Large cap: invest mostly in large scale companies, low risk, low reward. so, in short, small scale startups can fail easily and if they boom, they reward generously too and large scale companies stock price is table so not much amount of profit, but the stock price won\u0026rsquo;t be bouncing up and down too much.\nMetrics CAGR So if you looked at any ads for mututal funds, you must have seen a metric called CAGR.\nFull form: Compound Annual Growth Rate. Basically, it is avg growth rate on a yearly basis. Growth means how much your investment increased in value. Like buying a Tata stock which was 100 rupees now became 200, so it is 100% growth.\nLet\u0026rsquo;s say u bought a mutual fund with a CAGR of 30%. But you don\u0026rsquo;t know if the fund was really lucky that one year it growed by 150% and rest of the time with 10%.\nThe problem with only looking at one metric is that you will lose insight on other important stuff. Think of it like you need to have an idea of the bigger picture of the market to make profit consistently.\nThere are a lot of metrics like:\nSharpe ratio Sharpe is basically the ratio of return over risk. So you for example, you are given two choices of buy a house.\nHouse A will give you 100% returns i.e. double the investment. It\u0026rsquo;s a very nice sea-faced apartment. House B will give you 10% returns.\nYou would buy House A, seems like a no-brainer.\nBut if something happens one day like a tsunami or something, House A will be washed way in it. So you have the risk of losing entire investment you put in. House B is in reletively safe area, no earthquakes, no natural disasters.\nWould you still buy house A now?\nSo this is what return to risk ratio does. You know how much returns you can make but you also need to know how safe investment it is.\nBeta Measures the volatility (how much a stock jumps up or down) compared to market.\nβ = 1 → moves with market β \u0026gt; 1 → more volatile than market β \u0026lt; 1 → less volatile than market β \u0026lt; 0 → moves opposite to market Capture ratio Financial Assets So I\u0026rsquo;ve been talking about stocks all the way. But there are also more types of it which are different but they work in same manner. But I think for today, just have a short overview on what they are:\n1. Equity / Stocks Ownership in a company. Profit from price appreciation and dividends. 2. Debt / Bonds Lending money to government or corporations. Earn fixed interest (aka coupon). Quite low risk, therefore low returns. 3. Cash \u0026amp; Cash Equivalents Bank deposits (like Fixed Deposits), money market instruments, treasury bills. Very low risk, highly liquid. 4. Derivatives Financial contracts whose value depends on an underlying asset. Examples: Futures, Options, Swaps. 5. Mutual Funds \u0026amp; ETFs Pooled investments in a mix of stocks, bonds, or other assets. Diversified risk. 6. Commodities Physical goods like gold, silver, oil, agricultural products. Can be invested via commodity ETFs or futures. 7. Real Estate / Property Residential, commercial, or land. Can generate rental income and capital gains. 8. Alternative Investments Hedge funds, private equity, crypto, collectibles. Typically higher risk, lower liquidity. ","permalink":"http://localhost:1313/posts/fin-for-noobs/","summary":"\u003chr\u003e\n\u003ch1 id=\"finance-for-noobs\"\u003eFinance for noobs\u003c/h1\u003e\n\u003cp\u003eI come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content is primarily relevant to India and sometimes US markets.\nThe content here is purely for educational purposes.\n\u003cstrong\u003eThis is not financial advice.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"stocks\"\u003eStocks\u003c/h2\u003e\n\u003cp\u003eStock is basically ownership of a company.\u003c/p\u003e\n\u003cp\u003eUsual ways that people make profit from a stock is:\u003c/p\u003e","title":"Finance for Noobs"},{"content":"Huffman Coding Huffman Coding is a popular algorithm used for data compression. It was developed by David A. Huffman in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\nTable of Contents Introduction How Huffman Coding Works Example of Huffman Coding Decoding with Huffman Code Advantages of Huffman Coding Applications of Huffman Coding Limitations of Huffman Coding Introduction Huffman Coding is a lossless compression algorithm, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\nHow Huffman Coding Works Step-by-Step Process Frequency Calculation:\nCount the frequency of each character in the data. Create Leaf Nodes:\nFor each character, create a leaf node containing its frequency and value. Build a Priority Queue:\nInsert all leaf nodes into a priority queue (or min-heap), sorted by frequency (smallest frequency at the top). Construct the Huffman Tree:\nRepeat the following until only one node remains in the priority queue: Extract the two nodes with the lowest frequency. Create a new node with a frequency equal to the sum of these two nodes. Set the two extracted nodes as the left and right children of the new node. Insert the new node back into the priority queue. The last remaining node is the root of the Huffman Tree. Assign Codes:\nTraverse the Huffman Tree from the root to each leaf node. Assign a binary 0 for each left edge and 1 for each right edge. The path to each character forms its Huffman Code. Example of Huffman Coding Consider the following example data:\nCharacter Frequency A 5 B 9 C 12 D 13 E 16 F 45 Step 1: Build the Huffman Tree Start with individual nodes sorted by frequency. Merge nodes with the lowest frequencies until only one node remains. The process would look like this:\nCombine A (5) and B (9) → New Node (14) Combine C (12) and D (13) → New Node (25) Combine New Node (14) and E (16) → New Node (30) Combine New Node (25) and F (45) → New Node (70) Combine New Node (30) and New Node (70) → Final Root (100) Step 2: Assign Codes After constructing the Huffman Tree, assign binary codes based on the path to each character:\nCharacter Huffman Code A 1100 B 1101 C 100 D 101 E 111 F 0 Result: The character with the highest frequency (F) has the shortest code (0), and characters with lower frequencies have longer codes.\nEncoding Example If we encode the string ABCD, it would be:\nA → 1100 B → 1101 C → 100 D → 101 Encoded string: 11001101100101\nDecoding with Huffman Code Decoding is performed by traversing the Huffman Tree:\nStart at the root. For each 0, move left; for each 1, move right. When a leaf node is reached, add the character to the output. Return to the root and repeat until the entire encoded string is decoded. Advantages of Huffman Coding Lossless Compression: No data is lost during compression. Efficiency: Saves space by assigning shorter codes to more frequent characters. Optimal for Given Frequencies: Huffman Coding guarantees the minimum number of bits required for a set of characters based on their frequencies. Limitations of Huffman Coding Fixed Frequencies: Huffman Coding is optimal for a fixed set of frequencies. Changes in frequency distribution may lead to inefficiency. Not Suitable for Real-Time Applications: For large and variable data, the tree-building process can be slow. Suboptimal for Small Files: May add overhead for very small files where the additional tree data outweighs compression benefits. Applications of Huffman Coding Data Compression:\nWidely used in file compression formats like ZIP and RAR. Multimedia Compression:\nUtilized in JPEG and MP3 formats to reduce file size. Text Compression:\nUseful in compressing text files and emails for faster transmission. Telecommunication:\nEmployed in transmission protocols to optimize data transfer efficiency. Data Transmission:\nApplied in network data packet optimization for reducing bandwidth usage. Summary Huffman Coding is a fundamental algorithm for lossless data compression, leveraging variable-length encoding to minimize storage and bandwidth requirements. By prioritizing more frequent characters with shorter codes, it efficiently reduces data size. Its applications span various fields, including file compression, multimedia, and network optimization, making it a cornerstone of efficient data handling in digital systems.\n","permalink":"http://localhost:1313/posts/huffman-coding/","summary":"\u003ch1 id=\"huffman-coding\"\u003eHuffman Coding\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eHuffman Coding\u003c/strong\u003e is a popular algorithm used for data compression. It was developed by \u003cstrong\u003eDavid A. Huffman\u003c/strong\u003e in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\u003c/p\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#how-huffman-coding-works\"\u003eHow Huffman Coding Works\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#example-of-huffman-coding\"\u003eExample of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#decoding-with-huffman-code\"\u003eDecoding with Huffman Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#advantages-of-huffman-coding\"\u003eAdvantages of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#applications-of-huffman-coding\"\u003eApplications of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#limitations-of-huffman-coding\"\u003eLimitations of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eHuffman Coding is a \u003cstrong\u003elossless compression algorithm\u003c/strong\u003e, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\u003c/p\u003e","title":"Huffman Coding"},{"content":" Embracing Git Submodules: A Journey to a Seamless Dotfiles Setup I had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was. In my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\nThe Challenge Managing dotfiles is a daunting task, especially when dealing with a complex array of configurations spread across multitudes of applications and tools. Initially, I used traditional methods like stow. But, as my setup kept evolving, I needed an even more sophisticated solution to handle not just my primary dotfiles but also various submodules, such as for Neovim.\nDiscovering Git Submodules All I heard about submodules was the scary stories of how messy it can get. However, Git submodules are a powerful feature that allows you to include and manage repositories within a repository. This feature became a game-changer in my quest for a cleaner setup. Here’s why:\n1. Seamless Integration Using Git submodules, I could integrate external repositories directly into my dotfiles repository. For e.g, integrating a Neovim configuration repository as a submodule meant that updates to plugins or configurations could be managed seamlessly without disrupting the primary dotfiles setup.\n2. Simplified Updates Managing updates with Git submodules turned out to be straightforward. With commands like git submodule update --init --recursive, I could ensure that all submodules were initialized and up-to-date with just a single command. This eliminated the need for manual updates and checks, saving time and reducing errors.\n3. Enhanced Organization By organizing my configurations into separate repositories and including them as submodules, I achieved a cleaner, more modular setup. This approach made it easier to maintain and update each component individually while keeping the main repository organized.\nThe Transition to yadm The journey didn’t stop with Git submodules. I transitioned to using yadm (Yet Another Dotfiles Manager), which enhanced the management of my dotfiles even further. Here’s how yadm fit into the picture:\n1. Advanced Dotfiles Management yadm offered advanced features tailored for dotfiles management. It provided built-in support for handling dotfiles repositories and their submodules. With commands like yadm clone, yadm pull, and yadm submodule update, I could effortlessly manage and synchronize my dotfiles across systems.\n2. Automation and Consistency Initially, it felt very taxating to think of yadm as a substitue for git with dotfiles controlling power, but after around 20 or so minutes, I was convinced that this the way I wanted to manage my dotfiles all along. No sucky symlinks, no confusion, just a simple repo which stores what I need to store without the agressive .gitignore in my home directory. Incorporating yadm into my Ansible playbook automated the setup process. The playbook cloned the dotfiles repository, executed a bootstrap script, and ensured that all submodules were initialized and updated. This automation ensured consistency across setups, reducing manual intervention and potential configuration drift.\n3. Streamlined Configuration Using yadm streamlined the configuration of my system. It handled the intricacies of managing dotfiles and submodules, allowed me to focus on enhancing my development environment rather than wrestling with configuration issues. If you read it so far, I think you should give it a fair try, it will be worth it.\nConclusion Embracing Git submodules and yadm has been a transformative experience. It has simplified the management of my dotfiles, improved organization, and enhanced the automation of my system setup. For anyone dealing with complex dotfiles setups or seeking a more efficient way to manage configurations, exploring Git submodules and yadm is highly recommended.\nThis journey has not only refined my setup but also highlighted the power of leveraging the right tools for the task at hand. The integration of Git submodules into my workflow stands as a testament to how thoughtful tooling choices can lead to a more streamlined and enjoyable development experience.\n","permalink":"http://localhost:1313/posts/git-submodules/","summary":"\u003chr\u003e\n\u003ch2 id=\"embracing-git-submodules-a-journey-to-a-seamless-dotfiles-setup\"\u003eEmbracing Git Submodules: A Journey to a Seamless Dotfiles Setup\u003c/h2\u003e\n\u003cp\u003eI had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was.\nIn my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\u003c/p\u003e","title":"Git Submodules"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"My First Post"},{"content":"Income Tax for Noobs Disclaimer This is basic educational information about taxation. It is not personal tax advice. For official guidance, always check government websites.\nSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\nSo I thought why not try to understand how it works to safeguard myself (and my money). While learning about it, I thought I can share the knowledge about the same, so here we are.\nSince I am a salaried person like most people, I\u0026rsquo;ll only discuss the same here.\nTaxable Income Part of your income which you are obliged to pay taxes on. The taxable income will eventually decide your tax slab.\nTax slabs is just rules that if you have taxable income over let\u0026rsquo;s say 7 Lakhs. then you have to pay 10% (for example) as an income tax on it. That means 70,000 will be your income tax.\nSounds like a lot. So we have some ways to reduce the tax amount you pay. Here is where you have to grind your brain for the most part.\nDeductions: Make your taxable money smaller so you pay less tax, sometimes even at a lower rate. Rebates: Reduce the final tax amount directly. Exemptions: Exclude some of your income from being taxed. How do you pay Income Tax If you are a salaried person, your employer takes a cut from your salary and pays it to the govt. This is called Tax deducted at Source (TDS)\nSo if this is the case then you only have to file in an Income Tax Return (ITR) so you can make your discounts on the tax and get some money back.\nITRs are for 4 types, ITR 1 to 4. We\u0026rsquo;ll only see ITR 1 and 2 since those are for salaried peops.\nITR-1: For individuals with income up to ₹50 lakh from salary/pension, one house property, and other sources (like interest). No capital gains or foreign assets.\nITR-2: For individuals/HUFs not having business/professional income. Covers salary, multiple house properties, capital gains, foreign income/assets, and income above ₹50 lakh.\n","permalink":"http://localhost:1313/posts/income-tax-for-noobs/","summary":"\u003ch1 id=\"income-tax-for-noobs\"\u003eIncome Tax for Noobs\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebasic educational information about taxation\u003c/strong\u003e. It is \u003cstrong\u003enot personal tax advice\u003c/strong\u003e. For official guidance, always check \u003cstrong\u003egovernment websites\u003c/strong\u003e.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\u003c/p\u003e","title":"Income Tax for Noobs"},{"content":" Finance for noobs I come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\nDisclaimer This content is primarily relevant to India and sometimes US markets. The content here is purely for educational purposes. This is not financial advice.\nStocks Stock is basically ownership of a company.\nUsual ways that people make profit from a stock is:\nPrice appreciation: you bought it for 100 rupees, sold for 200. profit of 100 in your pocket. Dividends: company gives out profits to all owners yearly or so. But this is upto company whether they want to give away or not. Mutual Funds I growed up watching mutual funds advertisements many times, never really understood what they meant.\nA very common example used to explain it is a basket of stocks. However, I think most simple way to explain it is:\nIt is a collection of different stock (and stock like stuff). Reason for it to be a collection is so that risk is reduced.\nThis is done because investing solely in a single company is very high risk. What if one day there is some negative PR, and company stock hits rock bottom. Investing little bit in many companies will save u from this loss because profit of some other place can help you.\nYou will hear a popular saying, \u0026ldquo;Don\u0026rsquo;t put all your eggs in one basket.\u0026rdquo; This is what they\u0026rsquo;re talking about.\nPortfolio of a fund means which stocks they have in their collection. But your portfolio means what all of the investments you are holding.\nOne more thing u will hear is that there are stock market index funds. Think of these also as a collection of stocks.\nIn india we have two main stock indices:\nNifty-50: Top 50 companies in National Stock Exchange (NSE) Sensex: Top 30 companies in Bombay Stock Exchange (BSE) A Stock exchange is basically a place where people can sell or buy stocks under some party like Govt monitoring them. Governments try to keep regulations in place so that people don\u0026rsquo;t misbehave.\nAn index is actually not a mutual fund. It is just a public list for people to know how market is doing overall.\nAny mutual fund can mimic the index. So it means they keep their investments only in Nifty 50 for example. These mutual funds are called an Index fund or ETFs.\nNow you may wonder, why they are called \u0026ldquo;mutual\u0026rdquo; funds. What happens is that many people buy a mutual fund in bulk/pool.\nSo mutual means collective ownership/sharing. This means profits and losses are equally shared among all the investors.\nWho does this?\nFunds are managed by Asset Management Companies (AMC). They have their fund managers who speculate the market for returns. Since they\u0026rsquo;re doing the heavy lifting of market research and you are just putting money in, they charge you a premium.\nThis premium is called as \u0026ldquo;Expense ratio\u0026rdquo;. A 1% expense ratio means on investing 100 rupees, you have to pay 1 rupee to the AMC every year. Lastly, you will hear types of mutual funds:\nSmall cap: invest mostly in small scale companies, high risk, high reward. Mid cap: invest mostly in medium scale companies, quite stable, medium risk, medium reward. Large cap: invest mostly in large scale companies, low risk, low reward. so, in short, small scale startups can fail easily and if they boom, they reward generously too and large scale companies stock price is table so not much amount of profit, but the stock price won\u0026rsquo;t be bouncing up and down too much.\nMetrics CAGR So if you looked at any ads for mututal funds, you must have seen a metric called CAGR.\nFull form: Compound Annual Growth Rate. Basically, it is avg growth rate on a yearly basis. Growth means how much your investment increased in value. Like buying a Tata stock which was 100 rupees now became 200, so it is 100% growth.\nLet\u0026rsquo;s say u bought a mutual fund with a CAGR of 30%. But you don\u0026rsquo;t know if the fund was really lucky that one year it growed by 150% and rest of the time with 10%.\nThe problem with only looking at one metric is that you will lose insight on other important stuff. Think of it like you need to have an idea of the bigger picture of the market to make profit consistently.\nThere are a lot of metrics like:\nSharpe ratio Sharpe is basically the ratio of return over risk. So you for example, you are given two choices of buy a house.\nHouse A will give you 100% returns i.e. double the investment. It\u0026rsquo;s a very nice sea-faced apartment. House B will give you 10% returns.\nYou would buy House A, seems like a no-brainer.\nBut if something happens one day like a tsunami or something, House A will be washed way in it. So you have the risk of losing entire investment you put in. House B is in reletively safe area, no earthquakes, no natural disasters.\nWould you still buy house A now?\nSo this is what return to risk ratio does. You know how much returns you can make but you also need to know how safe investment it is.\nBeta Measures the volatility (how much a stock jumps up or down) compared to market.\nβ = 1 → moves with market β \u0026gt; 1 → more volatile than market β \u0026lt; 1 → less volatile than market β \u0026lt; 0 → moves opposite to market Capture ratio Financial Assets So I\u0026rsquo;ve been talking about stocks all the way. But there are also more types of it which are different but they work in same manner. But I think for today, just have a short overview on what they are:\n1. Equity / Stocks Ownership in a company. Profit from price appreciation and dividends. 2. Debt / Bonds Lending money to government or corporations. Earn fixed interest (aka coupon). Quite low risk, therefore low returns. 3. Cash \u0026amp; Cash Equivalents Bank deposits (like Fixed Deposits), money market instruments, treasury bills. Very low risk, highly liquid. 4. Derivatives Financial contracts whose value depends on an underlying asset. Examples: Futures, Options, Swaps. 5. Mutual Funds \u0026amp; ETFs Pooled investments in a mix of stocks, bonds, or other assets. Diversified risk. 6. Commodities Physical goods like gold, silver, oil, agricultural products. Can be invested via commodity ETFs or futures. 7. Real Estate / Property Residential, commercial, or land. Can generate rental income and capital gains. 8. Alternative Investments Hedge funds, private equity, crypto, collectibles. Typically higher risk, lower liquidity. ","permalink":"http://localhost:1313/posts/fin-for-noobs/","summary":"\u003chr\u003e\n\u003ch1 id=\"finance-for-noobs\"\u003eFinance for noobs\u003c/h1\u003e\n\u003cp\u003eI come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content is primarily relevant to India and sometimes US markets.\nThe content here is purely for educational purposes.\n\u003cstrong\u003eThis is not financial advice.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"stocks\"\u003eStocks\u003c/h2\u003e\n\u003cp\u003eStock is basically ownership of a company.\u003c/p\u003e\n\u003cp\u003eUsual ways that people make profit from a stock is:\u003c/p\u003e","title":"Finance for Noobs"},{"content":"Huffman Coding Huffman Coding is a popular algorithm used for data compression. It was developed by David A. Huffman in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\nTable of Contents Introduction How Huffman Coding Works Example of Huffman Coding Decoding with Huffman Code Advantages of Huffman Coding Applications of Huffman Coding Limitations of Huffman Coding Introduction Huffman Coding is a lossless compression algorithm, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\nHow Huffman Coding Works Step-by-Step Process Frequency Calculation:\nCount the frequency of each character in the data. Create Leaf Nodes:\nFor each character, create a leaf node containing its frequency and value. Build a Priority Queue:\nInsert all leaf nodes into a priority queue (or min-heap), sorted by frequency (smallest frequency at the top). Construct the Huffman Tree:\nRepeat the following until only one node remains in the priority queue: Extract the two nodes with the lowest frequency. Create a new node with a frequency equal to the sum of these two nodes. Set the two extracted nodes as the left and right children of the new node. Insert the new node back into the priority queue. The last remaining node is the root of the Huffman Tree. Assign Codes:\nTraverse the Huffman Tree from the root to each leaf node. Assign a binary 0 for each left edge and 1 for each right edge. The path to each character forms its Huffman Code. Example of Huffman Coding Consider the following example data:\nCharacter Frequency A 5 B 9 C 12 D 13 E 16 F 45 Step 1: Build the Huffman Tree Start with individual nodes sorted by frequency. Merge nodes with the lowest frequencies until only one node remains. The process would look like this:\nCombine A (5) and B (9) → New Node (14) Combine C (12) and D (13) → New Node (25) Combine New Node (14) and E (16) → New Node (30) Combine New Node (25) and F (45) → New Node (70) Combine New Node (30) and New Node (70) → Final Root (100) Step 2: Assign Codes After constructing the Huffman Tree, assign binary codes based on the path to each character:\nCharacter Huffman Code A 1100 B 1101 C 100 D 101 E 111 F 0 Result: The character with the highest frequency (F) has the shortest code (0), and characters with lower frequencies have longer codes.\nEncoding Example If we encode the string ABCD, it would be:\nA → 1100 B → 1101 C → 100 D → 101 Encoded string: 11001101100101\nDecoding with Huffman Code Decoding is performed by traversing the Huffman Tree:\nStart at the root. For each 0, move left; for each 1, move right. When a leaf node is reached, add the character to the output. Return to the root and repeat until the entire encoded string is decoded. Advantages of Huffman Coding Lossless Compression: No data is lost during compression. Efficiency: Saves space by assigning shorter codes to more frequent characters. Optimal for Given Frequencies: Huffman Coding guarantees the minimum number of bits required for a set of characters based on their frequencies. Limitations of Huffman Coding Fixed Frequencies: Huffman Coding is optimal for a fixed set of frequencies. Changes in frequency distribution may lead to inefficiency. Not Suitable for Real-Time Applications: For large and variable data, the tree-building process can be slow. Suboptimal for Small Files: May add overhead for very small files where the additional tree data outweighs compression benefits. Applications of Huffman Coding Data Compression:\nWidely used in file compression formats like ZIP and RAR. Multimedia Compression:\nUtilized in JPEG and MP3 formats to reduce file size. Text Compression:\nUseful in compressing text files and emails for faster transmission. Telecommunication:\nEmployed in transmission protocols to optimize data transfer efficiency. Data Transmission:\nApplied in network data packet optimization for reducing bandwidth usage. Summary Huffman Coding is a fundamental algorithm for lossless data compression, leveraging variable-length encoding to minimize storage and bandwidth requirements. By prioritizing more frequent characters with shorter codes, it efficiently reduces data size. Its applications span various fields, including file compression, multimedia, and network optimization, making it a cornerstone of efficient data handling in digital systems.\n","permalink":"http://localhost:1313/posts/huffman-coding/","summary":"\u003ch1 id=\"huffman-coding\"\u003eHuffman Coding\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eHuffman Coding\u003c/strong\u003e is a popular algorithm used for data compression. It was developed by \u003cstrong\u003eDavid A. Huffman\u003c/strong\u003e in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\u003c/p\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#how-huffman-coding-works\"\u003eHow Huffman Coding Works\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#example-of-huffman-coding\"\u003eExample of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#decoding-with-huffman-code\"\u003eDecoding with Huffman Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#advantages-of-huffman-coding\"\u003eAdvantages of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#applications-of-huffman-coding\"\u003eApplications of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#limitations-of-huffman-coding\"\u003eLimitations of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eHuffman Coding is a \u003cstrong\u003elossless compression algorithm\u003c/strong\u003e, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\u003c/p\u003e","title":"Huffman Coding"},{"content":" Embracing Git Submodules: A Journey to a Seamless Dotfiles Setup I had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was. In my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\nThe Challenge Managing dotfiles is a daunting task, especially when dealing with a complex array of configurations spread across multitudes of applications and tools. Initially, I used traditional methods like stow. But, as my setup kept evolving, I needed an even more sophisticated solution to handle not just my primary dotfiles but also various submodules, such as for Neovim.\nDiscovering Git Submodules All I heard about submodules was the scary stories of how messy it can get. However, Git submodules are a powerful feature that allows you to include and manage repositories within a repository. This feature became a game-changer in my quest for a cleaner setup. Here’s why:\n1. Seamless Integration Using Git submodules, I could integrate external repositories directly into my dotfiles repository. For e.g, integrating a Neovim configuration repository as a submodule meant that updates to plugins or configurations could be managed seamlessly without disrupting the primary dotfiles setup.\n2. Simplified Updates Managing updates with Git submodules turned out to be straightforward. With commands like git submodule update --init --recursive, I could ensure that all submodules were initialized and up-to-date with just a single command. This eliminated the need for manual updates and checks, saving time and reducing errors.\n3. Enhanced Organization By organizing my configurations into separate repositories and including them as submodules, I achieved a cleaner, more modular setup. This approach made it easier to maintain and update each component individually while keeping the main repository organized.\nThe Transition to yadm The journey didn’t stop with Git submodules. I transitioned to using yadm (Yet Another Dotfiles Manager), which enhanced the management of my dotfiles even further. Here’s how yadm fit into the picture:\n1. Advanced Dotfiles Management yadm offered advanced features tailored for dotfiles management. It provided built-in support for handling dotfiles repositories and their submodules. With commands like yadm clone, yadm pull, and yadm submodule update, I could effortlessly manage and synchronize my dotfiles across systems.\n2. Automation and Consistency Initially, it felt very taxating to think of yadm as a substitue for git with dotfiles controlling power, but after around 20 or so minutes, I was convinced that this the way I wanted to manage my dotfiles all along. No sucky symlinks, no confusion, just a simple repo which stores what I need to store without the agressive .gitignore in my home directory. Incorporating yadm into my Ansible playbook automated the setup process. The playbook cloned the dotfiles repository, executed a bootstrap script, and ensured that all submodules were initialized and updated. This automation ensured consistency across setups, reducing manual intervention and potential configuration drift.\n3. Streamlined Configuration Using yadm streamlined the configuration of my system. It handled the intricacies of managing dotfiles and submodules, allowed me to focus on enhancing my development environment rather than wrestling with configuration issues. If you read it so far, I think you should give it a fair try, it will be worth it.\nConclusion Embracing Git submodules and yadm has been a transformative experience. It has simplified the management of my dotfiles, improved organization, and enhanced the automation of my system setup. For anyone dealing with complex dotfiles setups or seeking a more efficient way to manage configurations, exploring Git submodules and yadm is highly recommended.\nThis journey has not only refined my setup but also highlighted the power of leveraging the right tools for the task at hand. The integration of Git submodules into my workflow stands as a testament to how thoughtful tooling choices can lead to a more streamlined and enjoyable development experience.\n","permalink":"http://localhost:1313/posts/git-submodules/","summary":"\u003chr\u003e\n\u003ch2 id=\"embracing-git-submodules-a-journey-to-a-seamless-dotfiles-setup\"\u003eEmbracing Git Submodules: A Journey to a Seamless Dotfiles Setup\u003c/h2\u003e\n\u003cp\u003eI had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was.\nIn my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\u003c/p\u003e","title":"Git Submodules"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"My First Post"},{"content":"Income Tax for Noobs Disclaimer This is basic educational information about taxation. It is not personal tax advice. For official guidance, always check government websites.\nSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\nSo I thought why not try to understand how it works to safeguard myself (and my money). While learning about it, I thought I can share the knowledge about the same, so here we are.\nSince I am a salaried person like most people, I\u0026rsquo;ll only discuss the same here.\nTaxable Income Part of your income which you are obliged to pay taxes on. The taxable income will eventually decide your tax slab.\nTax slabs is just rules that if you have taxable income over let\u0026rsquo;s say 7 Lakhs. then you have to pay 10% (for example) as an income tax on it. That means 70,000 will be your income tax.\nSounds like a lot. So we have some ways to reduce the tax amount you pay. Here is where you have to grind your brain for the most part.\nDeductions: Make your taxable money smaller so you pay less tax, sometimes even at a lower rate. Rebates: Reduce the final tax amount directly. Exemptions: Exclude some of your income from being taxed. How do you pay Income Tax If you are a salaried person, your employer takes a cut from your salary and pays it to the govt. This is called Tax deducted at Source (TDS)\nSo if this is the case then you only have to file in an Income Tax Return (ITR) so you can make your discounts on the tax and get some money back.\nITRs are for 4 types, ITR 1 to 4. We\u0026rsquo;ll only see ITR 1 and 2 since those are for salaried peops.\nITR-1: For individuals with income up to ₹50 lakh from salary/pension, one house property, and other sources (like interest). No capital gains or foreign assets.\nITR-2: For individuals/HUFs not having business/professional income. Covers salary, multiple house properties, capital gains, foreign income/assets, and income above ₹50 lakh.\n","permalink":"http://localhost:1313/posts/income-tax-for-noobs/","summary":"\u003ch1 id=\"income-tax-for-noobs\"\u003eIncome Tax for Noobs\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebasic educational information about taxation\u003c/strong\u003e. It is \u003cstrong\u003enot personal tax advice\u003c/strong\u003e. For official guidance, always check \u003cstrong\u003egovernment websites\u003c/strong\u003e.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\u003c/p\u003e","title":"Income Tax for Noobs"},{"content":" Finance for noobs I come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\nDisclaimer This content is primarily relevant to India and sometimes US markets. The content here is purely for educational purposes. This is not financial advice.\nStocks Stock is basically ownership of a company.\nUsual ways that people make profit from a stock is:\nPrice appreciation: you bought it for 100 rupees, sold for 200. profit of 100 in your pocket. Dividends: company gives out profits to all owners yearly or so. But this is upto company whether they want to give away or not. Mutual Funds I growed up watching mutual funds advertisements many times, never really understood what they meant.\nA very common example used to explain it is a basket of stocks. However, I think most simple way to explain it is:\nIt is a collection of different stock (and stock like stuff). Reason for it to be a collection is so that risk is reduced.\nThis is done because investing solely in a single company is very high risk. What if one day there is some negative PR, and company stock hits rock bottom. Investing little bit in many companies will save u from this loss because profit of some other place can help you.\nYou will hear a popular saying, \u0026ldquo;Don\u0026rsquo;t put all your eggs in one basket.\u0026rdquo; This is what they\u0026rsquo;re talking about.\nPortfolio of a fund means which stocks they have in their collection. But your portfolio means what all of the investments you are holding.\nOne more thing u will hear is that there are stock market index funds. Think of these also as a collection of stocks.\nIn india we have two main stock indices:\nNifty-50: Top 50 companies in National Stock Exchange (NSE) Sensex: Top 30 companies in Bombay Stock Exchange (BSE) A Stock exchange is basically a place where people can sell or buy stocks under some party like Govt monitoring them. Governments try to keep regulations in place so that people don\u0026rsquo;t misbehave.\nAn index is actually not a mutual fund. It is just a public list for people to know how market is doing overall.\nAny mutual fund can mimic the index. So it means they keep their investments only in Nifty 50 for example. These mutual funds are called an Index fund or ETFs.\nNow you may wonder, why they are called \u0026ldquo;mutual\u0026rdquo; funds. What happens is that many people buy a mutual fund in bulk/pool.\nSo mutual means collective ownership/sharing. This means profits and losses are equally shared among all the investors.\nWho does this?\nFunds are managed by Asset Management Companies (AMC). They have their fund managers who speculate the market for returns. Since they\u0026rsquo;re doing the heavy lifting of market research and you are just putting money in, they charge you a premium.\nThis premium is called as \u0026ldquo;Expense ratio\u0026rdquo;. A 1% expense ratio means on investing 100 rupees, you have to pay 1 rupee to the AMC every year. Lastly, you will hear types of mutual funds:\nSmall cap: invest mostly in small scale companies, high risk, high reward. Mid cap: invest mostly in medium scale companies, quite stable, medium risk, medium reward. Large cap: invest mostly in large scale companies, low risk, low reward. so, in short, small scale startups can fail easily and if they boom, they reward generously too and large scale companies stock price is table so not much amount of profit, but the stock price won\u0026rsquo;t be bouncing up and down too much.\nMetrics CAGR So if you looked at any ads for mututal funds, you must have seen a metric called CAGR.\nFull form: Compound Annual Growth Rate. Basically, it is avg growth rate on a yearly basis. Growth means how much your investment increased in value. Like buying a Tata stock which was 100 rupees now became 200, so it is 100% growth.\nLet\u0026rsquo;s say u bought a mutual fund with a CAGR of 30%. But you don\u0026rsquo;t know if the fund was really lucky that one year it growed by 150% and rest of the time with 10%.\nThe problem with only looking at one metric is that you will lose insight on other important stuff. Think of it like you need to have an idea of the bigger picture of the market to make profit consistently.\nThere are a lot of metrics like:\nSharpe ratio Sharpe is basically the ratio of return over risk. So you for example, you are given two choices of buy a house.\nHouse A will give you 100% returns i.e. double the investment. It\u0026rsquo;s a very nice sea-faced apartment. House B will give you 10% returns.\nYou would buy House A, seems like a no-brainer.\nBut if something happens one day like a tsunami or something, House A will be washed way in it. So you have the risk of losing entire investment you put in. House B is in reletively safe area, no earthquakes, no natural disasters.\nWould you still buy house A now?\nSo this is what return to risk ratio does. You know how much returns you can make but you also need to know how safe investment it is.\nBeta Measures the volatility (how much a stock jumps up or down) compared to market.\nβ = 1 → moves with market β \u0026gt; 1 → more volatile than market β \u0026lt; 1 → less volatile than market β \u0026lt; 0 → moves opposite to market Capture ratio Financial Assets So I\u0026rsquo;ve been talking about stocks all the way. But there are also more types of it which are different but they work in same manner. But I think for today, just have a short overview on what they are:\n1. Equity / Stocks Ownership in a company. Profit from price appreciation and dividends. 2. Debt / Bonds Lending money to government or corporations. Earn fixed interest (aka coupon). Quite low risk, therefore low returns. 3. Cash \u0026amp; Cash Equivalents Bank deposits (like Fixed Deposits), money market instruments, treasury bills. Very low risk, highly liquid. 4. Derivatives Financial contracts whose value depends on an underlying asset. Examples: Futures, Options, Swaps. 5. Mutual Funds \u0026amp; ETFs Pooled investments in a mix of stocks, bonds, or other assets. Diversified risk. 6. Commodities Physical goods like gold, silver, oil, agricultural products. Can be invested via commodity ETFs or futures. 7. Real Estate / Property Residential, commercial, or land. Can generate rental income and capital gains. 8. Alternative Investments Hedge funds, private equity, crypto, collectibles. Typically higher risk, lower liquidity. ","permalink":"http://localhost:1313/posts/fin-for-noobs/","summary":"\u003chr\u003e\n\u003ch1 id=\"finance-for-noobs\"\u003eFinance for noobs\u003c/h1\u003e\n\u003cp\u003eI come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content is primarily relevant to India and sometimes US markets.\nThe content here is purely for educational purposes.\n\u003cstrong\u003eThis is not financial advice.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"stocks\"\u003eStocks\u003c/h2\u003e\n\u003cp\u003eStock is basically ownership of a company.\u003c/p\u003e\n\u003cp\u003eUsual ways that people make profit from a stock is:\u003c/p\u003e","title":"Finance for Noobs"},{"content":"Huffman Coding Huffman Coding is a popular algorithm used for data compression. It was developed by David A. Huffman in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\nTable of Contents Introduction How Huffman Coding Works Example of Huffman Coding Decoding with Huffman Code Advantages of Huffman Coding Applications of Huffman Coding Limitations of Huffman Coding Introduction Huffman Coding is a lossless compression algorithm, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\nHow Huffman Coding Works Step-by-Step Process Frequency Calculation:\nCount the frequency of each character in the data. Create Leaf Nodes:\nFor each character, create a leaf node containing its frequency and value. Build a Priority Queue:\nInsert all leaf nodes into a priority queue (or min-heap), sorted by frequency (smallest frequency at the top). Construct the Huffman Tree:\nRepeat the following until only one node remains in the priority queue: Extract the two nodes with the lowest frequency. Create a new node with a frequency equal to the sum of these two nodes. Set the two extracted nodes as the left and right children of the new node. Insert the new node back into the priority queue. The last remaining node is the root of the Huffman Tree. Assign Codes:\nTraverse the Huffman Tree from the root to each leaf node. Assign a binary 0 for each left edge and 1 for each right edge. The path to each character forms its Huffman Code. Example of Huffman Coding Consider the following example data:\nCharacter Frequency A 5 B 9 C 12 D 13 E 16 F 45 Step 1: Build the Huffman Tree Start with individual nodes sorted by frequency. Merge nodes with the lowest frequencies until only one node remains. The process would look like this:\nCombine A (5) and B (9) → New Node (14) Combine C (12) and D (13) → New Node (25) Combine New Node (14) and E (16) → New Node (30) Combine New Node (25) and F (45) → New Node (70) Combine New Node (30) and New Node (70) → Final Root (100) Step 2: Assign Codes After constructing the Huffman Tree, assign binary codes based on the path to each character:\nCharacter Huffman Code A 1100 B 1101 C 100 D 101 E 111 F 0 Result: The character with the highest frequency (F) has the shortest code (0), and characters with lower frequencies have longer codes.\nEncoding Example If we encode the string ABCD, it would be:\nA → 1100 B → 1101 C → 100 D → 101 Encoded string: 11001101100101\nDecoding with Huffman Code Decoding is performed by traversing the Huffman Tree:\nStart at the root. For each 0, move left; for each 1, move right. When a leaf node is reached, add the character to the output. Return to the root and repeat until the entire encoded string is decoded. Advantages of Huffman Coding Lossless Compression: No data is lost during compression. Efficiency: Saves space by assigning shorter codes to more frequent characters. Optimal for Given Frequencies: Huffman Coding guarantees the minimum number of bits required for a set of characters based on their frequencies. Limitations of Huffman Coding Fixed Frequencies: Huffman Coding is optimal for a fixed set of frequencies. Changes in frequency distribution may lead to inefficiency. Not Suitable for Real-Time Applications: For large and variable data, the tree-building process can be slow. Suboptimal for Small Files: May add overhead for very small files where the additional tree data outweighs compression benefits. Applications of Huffman Coding Data Compression:\nWidely used in file compression formats like ZIP and RAR. Multimedia Compression:\nUtilized in JPEG and MP3 formats to reduce file size. Text Compression:\nUseful in compressing text files and emails for faster transmission. Telecommunication:\nEmployed in transmission protocols to optimize data transfer efficiency. Data Transmission:\nApplied in network data packet optimization for reducing bandwidth usage. Summary Huffman Coding is a fundamental algorithm for lossless data compression, leveraging variable-length encoding to minimize storage and bandwidth requirements. By prioritizing more frequent characters with shorter codes, it efficiently reduces data size. Its applications span various fields, including file compression, multimedia, and network optimization, making it a cornerstone of efficient data handling in digital systems.\n","permalink":"http://localhost:1313/posts/huffman-coding/","summary":"\u003ch1 id=\"huffman-coding\"\u003eHuffman Coding\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eHuffman Coding\u003c/strong\u003e is a popular algorithm used for data compression. It was developed by \u003cstrong\u003eDavid A. Huffman\u003c/strong\u003e in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\u003c/p\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#how-huffman-coding-works\"\u003eHow Huffman Coding Works\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#example-of-huffman-coding\"\u003eExample of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#decoding-with-huffman-code\"\u003eDecoding with Huffman Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#advantages-of-huffman-coding\"\u003eAdvantages of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#applications-of-huffman-coding\"\u003eApplications of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#limitations-of-huffman-coding\"\u003eLimitations of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eHuffman Coding is a \u003cstrong\u003elossless compression algorithm\u003c/strong\u003e, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\u003c/p\u003e","title":"Huffman Coding"},{"content":" Embracing Git Submodules: A Journey to a Seamless Dotfiles Setup I had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was. In my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\nThe Challenge Managing dotfiles is a daunting task, especially when dealing with a complex array of configurations spread across multitudes of applications and tools. Initially, I used traditional methods like stow. But, as my setup kept evolving, I needed an even more sophisticated solution to handle not just my primary dotfiles but also various submodules, such as for Neovim.\nDiscovering Git Submodules All I heard about submodules was the scary stories of how messy it can get. However, Git submodules are a powerful feature that allows you to include and manage repositories within a repository. This feature became a game-changer in my quest for a cleaner setup. Here’s why:\n1. Seamless Integration Using Git submodules, I could integrate external repositories directly into my dotfiles repository. For e.g, integrating a Neovim configuration repository as a submodule meant that updates to plugins or configurations could be managed seamlessly without disrupting the primary dotfiles setup.\n2. Simplified Updates Managing updates with Git submodules turned out to be straightforward. With commands like git submodule update --init --recursive, I could ensure that all submodules were initialized and up-to-date with just a single command. This eliminated the need for manual updates and checks, saving time and reducing errors.\n3. Enhanced Organization By organizing my configurations into separate repositories and including them as submodules, I achieved a cleaner, more modular setup. This approach made it easier to maintain and update each component individually while keeping the main repository organized.\nThe Transition to yadm The journey didn’t stop with Git submodules. I transitioned to using yadm (Yet Another Dotfiles Manager), which enhanced the management of my dotfiles even further. Here’s how yadm fit into the picture:\n1. Advanced Dotfiles Management yadm offered advanced features tailored for dotfiles management. It provided built-in support for handling dotfiles repositories and their submodules. With commands like yadm clone, yadm pull, and yadm submodule update, I could effortlessly manage and synchronize my dotfiles across systems.\n2. Automation and Consistency Initially, it felt very taxating to think of yadm as a substitue for git with dotfiles controlling power, but after around 20 or so minutes, I was convinced that this the way I wanted to manage my dotfiles all along. No sucky symlinks, no confusion, just a simple repo which stores what I need to store without the agressive .gitignore in my home directory. Incorporating yadm into my Ansible playbook automated the setup process. The playbook cloned the dotfiles repository, executed a bootstrap script, and ensured that all submodules were initialized and updated. This automation ensured consistency across setups, reducing manual intervention and potential configuration drift.\n3. Streamlined Configuration Using yadm streamlined the configuration of my system. It handled the intricacies of managing dotfiles and submodules, allowed me to focus on enhancing my development environment rather than wrestling with configuration issues. If you read it so far, I think you should give it a fair try, it will be worth it.\nConclusion Embracing Git submodules and yadm has been a transformative experience. It has simplified the management of my dotfiles, improved organization, and enhanced the automation of my system setup. For anyone dealing with complex dotfiles setups or seeking a more efficient way to manage configurations, exploring Git submodules and yadm is highly recommended.\nThis journey has not only refined my setup but also highlighted the power of leveraging the right tools for the task at hand. The integration of Git submodules into my workflow stands as a testament to how thoughtful tooling choices can lead to a more streamlined and enjoyable development experience.\n","permalink":"http://localhost:1313/posts/git-submodules/","summary":"\u003chr\u003e\n\u003ch2 id=\"embracing-git-submodules-a-journey-to-a-seamless-dotfiles-setup\"\u003eEmbracing Git Submodules: A Journey to a Seamless Dotfiles Setup\u003c/h2\u003e\n\u003cp\u003eI had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was.\nIn my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\u003c/p\u003e","title":"Git Submodules"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"My First Post"},{"content":"Income Tax for Noobs Disclaimer This is basic educational information about taxation. It is not personal tax advice. For official guidance, always check government websites.\nSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\nSo I thought why not try to understand how it works to safeguard myself (and my money). While learning about it, I thought I can share the knowledge about the same, so here we are.\nSince I am a salaried person like most people, I\u0026rsquo;ll only discuss the same here.\nTaxable Income Part of your income which you are obliged to pay taxes on. The taxable income will eventually decide your tax slab.\nTax slabs is just rules that if you have taxable income over let\u0026rsquo;s say 7 Lakhs. then you have to pay 10% (for example) as an income tax on it. That means 70,000 will be your income tax.\nSounds like a lot. So we have some ways to reduce the tax amount you pay. Here is where you have to grind your brain for the most part.\nDeductions: Make your taxable money smaller so you pay less tax, sometimes even at a lower rate. Rebates: Reduce the final tax amount directly. Exemptions: Exclude some of your income from being taxed. How do you pay Income Tax If you are a salaried person, your employer takes a cut from your salary and pays it to the govt. This is called Tax deducted at Source (TDS)\nOn the financial year end, your employer will give you a form 16, which details all the tax paid, deductions, etc from you.\nSo if this is the case then you only have to file in an Income Tax Return (ITR) so you can make your discounts on the tax and get some money back.\nITRs are for 4 types, ITR 1 to 4. We\u0026rsquo;ll only see ITR 1 and 2 since those are for salaried peops.\nITR-1: For individuals with income up to ₹50 lakh from salary/pension, one house property, and other sources (like interest). No capital gains or foreign assets.\nITR-2: For individuals/HUFs not having business/professional income. Covers salary, multiple house properties, capital gains, foreign income/assets, and income above ₹50 lakh.\n","permalink":"http://localhost:1313/posts/income-tax-for-noobs/","summary":"\u003ch1 id=\"income-tax-for-noobs\"\u003eIncome Tax for Noobs\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebasic educational information about taxation\u003c/strong\u003e. It is \u003cstrong\u003enot personal tax advice\u003c/strong\u003e. For official guidance, always check \u003cstrong\u003egovernment websites\u003c/strong\u003e.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\u003c/p\u003e","title":"Income Tax for Noobs"},{"content":" Finance for noobs I come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\nDisclaimer This content is primarily relevant to India and sometimes US markets. The content here is purely for educational purposes. This is not financial advice.\nStocks Stock is basically ownership of a company.\nUsual ways that people make profit from a stock is:\nPrice appreciation: you bought it for 100 rupees, sold for 200. profit of 100 in your pocket. Dividends: company gives out profits to all owners yearly or so. But this is upto company whether they want to give away or not. Mutual Funds I growed up watching mutual funds advertisements many times, never really understood what they meant.\nA very common example used to explain it is a basket of stocks. However, I think most simple way to explain it is:\nIt is a collection of different stock (and stock like stuff). Reason for it to be a collection is so that risk is reduced.\nThis is done because investing solely in a single company is very high risk. What if one day there is some negative PR, and company stock hits rock bottom. Investing little bit in many companies will save u from this loss because profit of some other place can help you.\nYou will hear a popular saying, \u0026ldquo;Don\u0026rsquo;t put all your eggs in one basket.\u0026rdquo; This is what they\u0026rsquo;re talking about.\nPortfolio of a fund means which stocks they have in their collection. But your portfolio means what all of the investments you are holding.\nOne more thing u will hear is that there are stock market index funds. Think of these also as a collection of stocks.\nIn india we have two main stock indices:\nNifty-50: Top 50 companies in National Stock Exchange (NSE) Sensex: Top 30 companies in Bombay Stock Exchange (BSE) A Stock exchange is basically a place where people can sell or buy stocks under some party like Govt monitoring them. Governments try to keep regulations in place so that people don\u0026rsquo;t misbehave.\nAn index is actually not a mutual fund. It is just a public list for people to know how market is doing overall.\nAny mutual fund can mimic the index. So it means they keep their investments only in Nifty 50 for example. These mutual funds are called an Index fund or ETFs.\nNow you may wonder, why they are called \u0026ldquo;mutual\u0026rdquo; funds. What happens is that many people buy a mutual fund in bulk/pool.\nSo mutual means collective ownership/sharing. This means profits and losses are equally shared among all the investors.\nWho does this?\nFunds are managed by Asset Management Companies (AMC). They have their fund managers who speculate the market for returns. Since they\u0026rsquo;re doing the heavy lifting of market research and you are just putting money in, they charge you a premium.\nThis premium is called as \u0026ldquo;Expense ratio\u0026rdquo;. A 1% expense ratio means on investing 100 rupees, you have to pay 1 rupee to the AMC every year. Lastly, you will hear types of mutual funds:\nSmall cap: invest mostly in small scale companies, high risk, high reward. Mid cap: invest mostly in medium scale companies, quite stable, medium risk, medium reward. Large cap: invest mostly in large scale companies, low risk, low reward. so, in short, small scale startups can fail easily and if they boom, they reward generously too and large scale companies stock price is table so not much amount of profit, but the stock price won\u0026rsquo;t be bouncing up and down too much.\nMetrics CAGR So if you looked at any ads for mututal funds, you must have seen a metric called CAGR.\nFull form: Compound Annual Growth Rate. Basically, it is avg growth rate on a yearly basis. Growth means how much your investment increased in value. Like buying a Tata stock which was 100 rupees now became 200, so it is 100% growth.\nLet\u0026rsquo;s say u bought a mutual fund with a CAGR of 30%. But you don\u0026rsquo;t know if the fund was really lucky that one year it growed by 150% and rest of the time with 10%.\nThe problem with only looking at one metric is that you will lose insight on other important stuff. Think of it like you need to have an idea of the bigger picture of the market to make profit consistently.\nThere are a lot of metrics like:\nSharpe ratio Sharpe is basically the ratio of return over risk. So you for example, you are given two choices of buy a house.\nHouse A will give you 100% returns i.e. double the investment. It\u0026rsquo;s a very nice sea-faced apartment. House B will give you 10% returns.\nYou would buy House A, seems like a no-brainer.\nBut if something happens one day like a tsunami or something, House A will be washed way in it. So you have the risk of losing entire investment you put in. House B is in reletively safe area, no earthquakes, no natural disasters.\nWould you still buy house A now?\nSo this is what return to risk ratio does. You know how much returns you can make but you also need to know how safe investment it is.\nBeta Measures the volatility (how much a stock jumps up or down) compared to market.\nβ = 1 → moves with market β \u0026gt; 1 → more volatile than market β \u0026lt; 1 → less volatile than market β \u0026lt; 0 → moves opposite to market Capture ratio Financial Assets So I\u0026rsquo;ve been talking about stocks all the way. But there are also more types of it which are different but they work in same manner. But I think for today, just have a short overview on what they are:\n1. Equity / Stocks Ownership in a company. Profit from price appreciation and dividends. 2. Debt / Bonds Lending money to government or corporations. Earn fixed interest (aka coupon). Quite low risk, therefore low returns. 3. Cash \u0026amp; Cash Equivalents Bank deposits (like Fixed Deposits), money market instruments, treasury bills. Very low risk, highly liquid. 4. Derivatives Financial contracts whose value depends on an underlying asset. Examples: Futures, Options, Swaps. 5. Mutual Funds \u0026amp; ETFs Pooled investments in a mix of stocks, bonds, or other assets. Diversified risk. 6. Commodities Physical goods like gold, silver, oil, agricultural products. Can be invested via commodity ETFs or futures. 7. Real Estate / Property Residential, commercial, or land. Can generate rental income and capital gains. 8. Alternative Investments Hedge funds, private equity, crypto, collectibles. Typically higher risk, lower liquidity. ","permalink":"http://localhost:1313/posts/fin-for-noobs/","summary":"\u003chr\u003e\n\u003ch1 id=\"finance-for-noobs\"\u003eFinance for noobs\u003c/h1\u003e\n\u003cp\u003eI come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content is primarily relevant to India and sometimes US markets.\nThe content here is purely for educational purposes.\n\u003cstrong\u003eThis is not financial advice.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"stocks\"\u003eStocks\u003c/h2\u003e\n\u003cp\u003eStock is basically ownership of a company.\u003c/p\u003e\n\u003cp\u003eUsual ways that people make profit from a stock is:\u003c/p\u003e","title":"Finance for Noobs"},{"content":"Huffman Coding Huffman Coding is a popular algorithm used for data compression. It was developed by David A. Huffman in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\nTable of Contents Introduction How Huffman Coding Works Example of Huffman Coding Decoding with Huffman Code Advantages of Huffman Coding Applications of Huffman Coding Limitations of Huffman Coding Introduction Huffman Coding is a lossless compression algorithm, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\nHow Huffman Coding Works Step-by-Step Process Frequency Calculation:\nCount the frequency of each character in the data. Create Leaf Nodes:\nFor each character, create a leaf node containing its frequency and value. Build a Priority Queue:\nInsert all leaf nodes into a priority queue (or min-heap), sorted by frequency (smallest frequency at the top). Construct the Huffman Tree:\nRepeat the following until only one node remains in the priority queue: Extract the two nodes with the lowest frequency. Create a new node with a frequency equal to the sum of these two nodes. Set the two extracted nodes as the left and right children of the new node. Insert the new node back into the priority queue. The last remaining node is the root of the Huffman Tree. Assign Codes:\nTraverse the Huffman Tree from the root to each leaf node. Assign a binary 0 for each left edge and 1 for each right edge. The path to each character forms its Huffman Code. Example of Huffman Coding Consider the following example data:\nCharacter Frequency A 5 B 9 C 12 D 13 E 16 F 45 Step 1: Build the Huffman Tree Start with individual nodes sorted by frequency. Merge nodes with the lowest frequencies until only one node remains. The process would look like this:\nCombine A (5) and B (9) → New Node (14) Combine C (12) and D (13) → New Node (25) Combine New Node (14) and E (16) → New Node (30) Combine New Node (25) and F (45) → New Node (70) Combine New Node (30) and New Node (70) → Final Root (100) Step 2: Assign Codes After constructing the Huffman Tree, assign binary codes based on the path to each character:\nCharacter Huffman Code A 1100 B 1101 C 100 D 101 E 111 F 0 Result: The character with the highest frequency (F) has the shortest code (0), and characters with lower frequencies have longer codes.\nEncoding Example If we encode the string ABCD, it would be:\nA → 1100 B → 1101 C → 100 D → 101 Encoded string: 11001101100101\nDecoding with Huffman Code Decoding is performed by traversing the Huffman Tree:\nStart at the root. For each 0, move left; for each 1, move right. When a leaf node is reached, add the character to the output. Return to the root and repeat until the entire encoded string is decoded. Advantages of Huffman Coding Lossless Compression: No data is lost during compression. Efficiency: Saves space by assigning shorter codes to more frequent characters. Optimal for Given Frequencies: Huffman Coding guarantees the minimum number of bits required for a set of characters based on their frequencies. Limitations of Huffman Coding Fixed Frequencies: Huffman Coding is optimal for a fixed set of frequencies. Changes in frequency distribution may lead to inefficiency. Not Suitable for Real-Time Applications: For large and variable data, the tree-building process can be slow. Suboptimal for Small Files: May add overhead for very small files where the additional tree data outweighs compression benefits. Applications of Huffman Coding Data Compression:\nWidely used in file compression formats like ZIP and RAR. Multimedia Compression:\nUtilized in JPEG and MP3 formats to reduce file size. Text Compression:\nUseful in compressing text files and emails for faster transmission. Telecommunication:\nEmployed in transmission protocols to optimize data transfer efficiency. Data Transmission:\nApplied in network data packet optimization for reducing bandwidth usage. Summary Huffman Coding is a fundamental algorithm for lossless data compression, leveraging variable-length encoding to minimize storage and bandwidth requirements. By prioritizing more frequent characters with shorter codes, it efficiently reduces data size. Its applications span various fields, including file compression, multimedia, and network optimization, making it a cornerstone of efficient data handling in digital systems.\n","permalink":"http://localhost:1313/posts/huffman-coding/","summary":"\u003ch1 id=\"huffman-coding\"\u003eHuffman Coding\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eHuffman Coding\u003c/strong\u003e is a popular algorithm used for data compression. It was developed by \u003cstrong\u003eDavid A. Huffman\u003c/strong\u003e in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\u003c/p\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#how-huffman-coding-works\"\u003eHow Huffman Coding Works\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#example-of-huffman-coding\"\u003eExample of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#decoding-with-huffman-code\"\u003eDecoding with Huffman Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#advantages-of-huffman-coding\"\u003eAdvantages of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#applications-of-huffman-coding\"\u003eApplications of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#limitations-of-huffman-coding\"\u003eLimitations of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eHuffman Coding is a \u003cstrong\u003elossless compression algorithm\u003c/strong\u003e, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\u003c/p\u003e","title":"Huffman Coding"},{"content":" Embracing Git Submodules: A Journey to a Seamless Dotfiles Setup I had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was. In my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\nThe Challenge Managing dotfiles is a daunting task, especially when dealing with a complex array of configurations spread across multitudes of applications and tools. Initially, I used traditional methods like stow. But, as my setup kept evolving, I needed an even more sophisticated solution to handle not just my primary dotfiles but also various submodules, such as for Neovim.\nDiscovering Git Submodules All I heard about submodules was the scary stories of how messy it can get. However, Git submodules are a powerful feature that allows you to include and manage repositories within a repository. This feature became a game-changer in my quest for a cleaner setup. Here’s why:\n1. Seamless Integration Using Git submodules, I could integrate external repositories directly into my dotfiles repository. For e.g, integrating a Neovim configuration repository as a submodule meant that updates to plugins or configurations could be managed seamlessly without disrupting the primary dotfiles setup.\n2. Simplified Updates Managing updates with Git submodules turned out to be straightforward. With commands like git submodule update --init --recursive, I could ensure that all submodules were initialized and up-to-date with just a single command. This eliminated the need for manual updates and checks, saving time and reducing errors.\n3. Enhanced Organization By organizing my configurations into separate repositories and including them as submodules, I achieved a cleaner, more modular setup. This approach made it easier to maintain and update each component individually while keeping the main repository organized.\nThe Transition to yadm The journey didn’t stop with Git submodules. I transitioned to using yadm (Yet Another Dotfiles Manager), which enhanced the management of my dotfiles even further. Here’s how yadm fit into the picture:\n1. Advanced Dotfiles Management yadm offered advanced features tailored for dotfiles management. It provided built-in support for handling dotfiles repositories and their submodules. With commands like yadm clone, yadm pull, and yadm submodule update, I could effortlessly manage and synchronize my dotfiles across systems.\n2. Automation and Consistency Initially, it felt very taxating to think of yadm as a substitue for git with dotfiles controlling power, but after around 20 or so minutes, I was convinced that this the way I wanted to manage my dotfiles all along. No sucky symlinks, no confusion, just a simple repo which stores what I need to store without the agressive .gitignore in my home directory. Incorporating yadm into my Ansible playbook automated the setup process. The playbook cloned the dotfiles repository, executed a bootstrap script, and ensured that all submodules were initialized and updated. This automation ensured consistency across setups, reducing manual intervention and potential configuration drift.\n3. Streamlined Configuration Using yadm streamlined the configuration of my system. It handled the intricacies of managing dotfiles and submodules, allowed me to focus on enhancing my development environment rather than wrestling with configuration issues. If you read it so far, I think you should give it a fair try, it will be worth it.\nConclusion Embracing Git submodules and yadm has been a transformative experience. It has simplified the management of my dotfiles, improved organization, and enhanced the automation of my system setup. For anyone dealing with complex dotfiles setups or seeking a more efficient way to manage configurations, exploring Git submodules and yadm is highly recommended.\nThis journey has not only refined my setup but also highlighted the power of leveraging the right tools for the task at hand. The integration of Git submodules into my workflow stands as a testament to how thoughtful tooling choices can lead to a more streamlined and enjoyable development experience.\n","permalink":"http://localhost:1313/posts/git-submodules/","summary":"\u003chr\u003e\n\u003ch2 id=\"embracing-git-submodules-a-journey-to-a-seamless-dotfiles-setup\"\u003eEmbracing Git Submodules: A Journey to a Seamless Dotfiles Setup\u003c/h2\u003e\n\u003cp\u003eI had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was.\nIn my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\u003c/p\u003e","title":"Git Submodules"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"My First Post"},{"content":"Income Tax for Noobs Disclaimer This is basic educational information about taxation. It is not personal tax advice. For official guidance, always check government websites.\nSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\nSo I thought why not try to understand how it works to safeguard myself (and my money). While learning about it, I thought I can share the knowledge about the same, so here we are.\nSince I am a salaried person like most people, I\u0026rsquo;ll only discuss the same here.\nTaxable Income Part of your income which you are obliged to pay taxes on. The taxable income will eventually decide your tax slab.\nTax slabs is just rules that if you have taxable income over let\u0026rsquo;s say 7 Lakhs. then you have to pay 10% (for example) as an income tax on it. That means 70,000 will be your income tax.\nSounds like a lot. So we have some ways to reduce the tax amount you pay. Here is where you have to grind your brain for the most part.\nDeductions: Make your taxable money smaller so you pay less tax, sometimes even at a lower rate. Rebates: Reduce the final tax amount directly. Exemptions: Exclude some of your income from being taxed. How do you pay Income Tax If you are a salaried person, your employer takes a cut from your salary and pays it to the govt. This is called Tax deducted at Source (TDS)\nOn the financial year end, your employer will give you a form 16, which details all the tax paid, deductions, etc from you.\nNow it is your work to calculate whether your actual liability is less or more than the TDS cut from you. In most cases it is more.\nSo if this is the case then you only have to file in an Income Tax Return (ITR) so you can make your discounts on the tax and get some money back.\nITRs are for 4 types, ITR 1 to 4. We\u0026rsquo;ll only see ITR 1 and 2 since those are for salaried peops.\nITR-1: For individuals with income up to ₹50 lakh from salary/pension, one house property, and other sources (like interest). No capital gains or foreign assets.\nITR-2: For individuals/HUFs not having business/professional income. Covers salary, multiple house properties, capital gains, foreign income/assets, and income above ₹50 lakh.\n","permalink":"http://localhost:1313/posts/income-tax-for-noobs/","summary":"\u003ch1 id=\"income-tax-for-noobs\"\u003eIncome Tax for Noobs\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebasic educational information about taxation\u003c/strong\u003e. It is \u003cstrong\u003enot personal tax advice\u003c/strong\u003e. For official guidance, always check \u003cstrong\u003egovernment websites\u003c/strong\u003e.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\u003c/p\u003e","title":"Income Tax for Noobs"},{"content":" Finance for noobs I come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\nDisclaimer This content is primarily relevant to India and sometimes US markets. The content here is purely for educational purposes. This is not financial advice.\nStocks Stock is basically ownership of a company.\nUsual ways that people make profit from a stock is:\nPrice appreciation: you bought it for 100 rupees, sold for 200. profit of 100 in your pocket. Dividends: company gives out profits to all owners yearly or so. But this is upto company whether they want to give away or not. Mutual Funds I growed up watching mutual funds advertisements many times, never really understood what they meant.\nA very common example used to explain it is a basket of stocks. However, I think most simple way to explain it is:\nIt is a collection of different stock (and stock like stuff). Reason for it to be a collection is so that risk is reduced.\nThis is done because investing solely in a single company is very high risk. What if one day there is some negative PR, and company stock hits rock bottom. Investing little bit in many companies will save u from this loss because profit of some other place can help you.\nYou will hear a popular saying, \u0026ldquo;Don\u0026rsquo;t put all your eggs in one basket.\u0026rdquo; This is what they\u0026rsquo;re talking about.\nPortfolio of a fund means which stocks they have in their collection. But your portfolio means what all of the investments you are holding.\nOne more thing u will hear is that there are stock market index funds. Think of these also as a collection of stocks.\nIn india we have two main stock indices:\nNifty-50: Top 50 companies in National Stock Exchange (NSE) Sensex: Top 30 companies in Bombay Stock Exchange (BSE) A Stock exchange is basically a place where people can sell or buy stocks under some party like Govt monitoring them. Governments try to keep regulations in place so that people don\u0026rsquo;t misbehave.\nAn index is actually not a mutual fund. It is just a public list for people to know how market is doing overall.\nAny mutual fund can mimic the index. So it means they keep their investments only in Nifty 50 for example. These mutual funds are called an Index fund or ETFs.\nNow you may wonder, why they are called \u0026ldquo;mutual\u0026rdquo; funds. What happens is that many people buy a mutual fund in bulk/pool.\nSo mutual means collective ownership/sharing. This means profits and losses are equally shared among all the investors.\nWho does this?\nFunds are managed by Asset Management Companies (AMC). They have their fund managers who speculate the market for returns. Since they\u0026rsquo;re doing the heavy lifting of market research and you are just putting money in, they charge you a premium.\nThis premium is called as \u0026ldquo;Expense ratio\u0026rdquo;. A 1% expense ratio means on investing 100 rupees, you have to pay 1 rupee to the AMC every year. Lastly, you will hear types of mutual funds:\nSmall cap: invest mostly in small scale companies, high risk, high reward. Mid cap: invest mostly in medium scale companies, quite stable, medium risk, medium reward. Large cap: invest mostly in large scale companies, low risk, low reward. so, in short, small scale startups can fail easily and if they boom, they reward generously too and large scale companies stock price is table so not much amount of profit, but the stock price won\u0026rsquo;t be bouncing up and down too much.\nMetrics CAGR So if you looked at any ads for mututal funds, you must have seen a metric called CAGR.\nFull form: Compound Annual Growth Rate. Basically, it is avg growth rate on a yearly basis. Growth means how much your investment increased in value. Like buying a Tata stock which was 100 rupees now became 200, so it is 100% growth.\nLet\u0026rsquo;s say u bought a mutual fund with a CAGR of 30%. But you don\u0026rsquo;t know if the fund was really lucky that one year it growed by 150% and rest of the time with 10%.\nThe problem with only looking at one metric is that you will lose insight on other important stuff. Think of it like you need to have an idea of the bigger picture of the market to make profit consistently.\nThere are a lot of metrics like:\nSharpe ratio Sharpe is basically the ratio of return over risk. So you for example, you are given two choices of buy a house.\nHouse A will give you 100% returns i.e. double the investment. It\u0026rsquo;s a very nice sea-faced apartment. House B will give you 10% returns.\nYou would buy House A, seems like a no-brainer.\nBut if something happens one day like a tsunami or something, House A will be washed way in it. So you have the risk of losing entire investment you put in. House B is in reletively safe area, no earthquakes, no natural disasters.\nWould you still buy house A now?\nSo this is what return to risk ratio does. You know how much returns you can make but you also need to know how safe investment it is.\nBeta Measures the volatility (how much a stock jumps up or down) compared to market.\nβ = 1 → moves with market β \u0026gt; 1 → more volatile than market β \u0026lt; 1 → less volatile than market β \u0026lt; 0 → moves opposite to market Capture ratio Financial Assets So I\u0026rsquo;ve been talking about stocks all the way. But there are also more types of it which are different but they work in same manner. But I think for today, just have a short overview on what they are:\n1. Equity / Stocks Ownership in a company. Profit from price appreciation and dividends. 2. Debt / Bonds Lending money to government or corporations. Earn fixed interest (aka coupon). Quite low risk, therefore low returns. 3. Cash \u0026amp; Cash Equivalents Bank deposits (like Fixed Deposits), money market instruments, treasury bills. Very low risk, highly liquid. 4. Derivatives Financial contracts whose value depends on an underlying asset. Examples: Futures, Options, Swaps. 5. Mutual Funds \u0026amp; ETFs Pooled investments in a mix of stocks, bonds, or other assets. Diversified risk. 6. Commodities Physical goods like gold, silver, oil, agricultural products. Can be invested via commodity ETFs or futures. 7. Real Estate / Property Residential, commercial, or land. Can generate rental income and capital gains. 8. Alternative Investments Hedge funds, private equity, crypto, collectibles. Typically higher risk, lower liquidity. ","permalink":"http://localhost:1313/posts/fin-for-noobs/","summary":"\u003chr\u003e\n\u003ch1 id=\"finance-for-noobs\"\u003eFinance for noobs\u003c/h1\u003e\n\u003cp\u003eI come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content is primarily relevant to India and sometimes US markets.\nThe content here is purely for educational purposes.\n\u003cstrong\u003eThis is not financial advice.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"stocks\"\u003eStocks\u003c/h2\u003e\n\u003cp\u003eStock is basically ownership of a company.\u003c/p\u003e\n\u003cp\u003eUsual ways that people make profit from a stock is:\u003c/p\u003e","title":"Finance for Noobs"},{"content":"Huffman Coding Huffman Coding is a popular algorithm used for data compression. It was developed by David A. Huffman in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\nTable of Contents Introduction How Huffman Coding Works Example of Huffman Coding Decoding with Huffman Code Advantages of Huffman Coding Applications of Huffman Coding Limitations of Huffman Coding Introduction Huffman Coding is a lossless compression algorithm, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\nHow Huffman Coding Works Step-by-Step Process Frequency Calculation:\nCount the frequency of each character in the data. Create Leaf Nodes:\nFor each character, create a leaf node containing its frequency and value. Build a Priority Queue:\nInsert all leaf nodes into a priority queue (or min-heap), sorted by frequency (smallest frequency at the top). Construct the Huffman Tree:\nRepeat the following until only one node remains in the priority queue: Extract the two nodes with the lowest frequency. Create a new node with a frequency equal to the sum of these two nodes. Set the two extracted nodes as the left and right children of the new node. Insert the new node back into the priority queue. The last remaining node is the root of the Huffman Tree. Assign Codes:\nTraverse the Huffman Tree from the root to each leaf node. Assign a binary 0 for each left edge and 1 for each right edge. The path to each character forms its Huffman Code. Example of Huffman Coding Consider the following example data:\nCharacter Frequency A 5 B 9 C 12 D 13 E 16 F 45 Step 1: Build the Huffman Tree Start with individual nodes sorted by frequency. Merge nodes with the lowest frequencies until only one node remains. The process would look like this:\nCombine A (5) and B (9) → New Node (14) Combine C (12) and D (13) → New Node (25) Combine New Node (14) and E (16) → New Node (30) Combine New Node (25) and F (45) → New Node (70) Combine New Node (30) and New Node (70) → Final Root (100) Step 2: Assign Codes After constructing the Huffman Tree, assign binary codes based on the path to each character:\nCharacter Huffman Code A 1100 B 1101 C 100 D 101 E 111 F 0 Result: The character with the highest frequency (F) has the shortest code (0), and characters with lower frequencies have longer codes.\nEncoding Example If we encode the string ABCD, it would be:\nA → 1100 B → 1101 C → 100 D → 101 Encoded string: 11001101100101\nDecoding with Huffman Code Decoding is performed by traversing the Huffman Tree:\nStart at the root. For each 0, move left; for each 1, move right. When a leaf node is reached, add the character to the output. Return to the root and repeat until the entire encoded string is decoded. Advantages of Huffman Coding Lossless Compression: No data is lost during compression. Efficiency: Saves space by assigning shorter codes to more frequent characters. Optimal for Given Frequencies: Huffman Coding guarantees the minimum number of bits required for a set of characters based on their frequencies. Limitations of Huffman Coding Fixed Frequencies: Huffman Coding is optimal for a fixed set of frequencies. Changes in frequency distribution may lead to inefficiency. Not Suitable for Real-Time Applications: For large and variable data, the tree-building process can be slow. Suboptimal for Small Files: May add overhead for very small files where the additional tree data outweighs compression benefits. Applications of Huffman Coding Data Compression:\nWidely used in file compression formats like ZIP and RAR. Multimedia Compression:\nUtilized in JPEG and MP3 formats to reduce file size. Text Compression:\nUseful in compressing text files and emails for faster transmission. Telecommunication:\nEmployed in transmission protocols to optimize data transfer efficiency. Data Transmission:\nApplied in network data packet optimization for reducing bandwidth usage. Summary Huffman Coding is a fundamental algorithm for lossless data compression, leveraging variable-length encoding to minimize storage and bandwidth requirements. By prioritizing more frequent characters with shorter codes, it efficiently reduces data size. Its applications span various fields, including file compression, multimedia, and network optimization, making it a cornerstone of efficient data handling in digital systems.\n","permalink":"http://localhost:1313/posts/huffman-coding/","summary":"\u003ch1 id=\"huffman-coding\"\u003eHuffman Coding\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eHuffman Coding\u003c/strong\u003e is a popular algorithm used for data compression. It was developed by \u003cstrong\u003eDavid A. Huffman\u003c/strong\u003e in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\u003c/p\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#how-huffman-coding-works\"\u003eHow Huffman Coding Works\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#example-of-huffman-coding\"\u003eExample of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#decoding-with-huffman-code\"\u003eDecoding with Huffman Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#advantages-of-huffman-coding\"\u003eAdvantages of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#applications-of-huffman-coding\"\u003eApplications of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#limitations-of-huffman-coding\"\u003eLimitations of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eHuffman Coding is a \u003cstrong\u003elossless compression algorithm\u003c/strong\u003e, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\u003c/p\u003e","title":"Huffman Coding"},{"content":" Embracing Git Submodules: A Journey to a Seamless Dotfiles Setup I had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was. In my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\nThe Challenge Managing dotfiles is a daunting task, especially when dealing with a complex array of configurations spread across multitudes of applications and tools. Initially, I used traditional methods like stow. But, as my setup kept evolving, I needed an even more sophisticated solution to handle not just my primary dotfiles but also various submodules, such as for Neovim.\nDiscovering Git Submodules All I heard about submodules was the scary stories of how messy it can get. However, Git submodules are a powerful feature that allows you to include and manage repositories within a repository. This feature became a game-changer in my quest for a cleaner setup. Here’s why:\n1. Seamless Integration Using Git submodules, I could integrate external repositories directly into my dotfiles repository. For e.g, integrating a Neovim configuration repository as a submodule meant that updates to plugins or configurations could be managed seamlessly without disrupting the primary dotfiles setup.\n2. Simplified Updates Managing updates with Git submodules turned out to be straightforward. With commands like git submodule update --init --recursive, I could ensure that all submodules were initialized and up-to-date with just a single command. This eliminated the need for manual updates and checks, saving time and reducing errors.\n3. Enhanced Organization By organizing my configurations into separate repositories and including them as submodules, I achieved a cleaner, more modular setup. This approach made it easier to maintain and update each component individually while keeping the main repository organized.\nThe Transition to yadm The journey didn’t stop with Git submodules. I transitioned to using yadm (Yet Another Dotfiles Manager), which enhanced the management of my dotfiles even further. Here’s how yadm fit into the picture:\n1. Advanced Dotfiles Management yadm offered advanced features tailored for dotfiles management. It provided built-in support for handling dotfiles repositories and their submodules. With commands like yadm clone, yadm pull, and yadm submodule update, I could effortlessly manage and synchronize my dotfiles across systems.\n2. Automation and Consistency Initially, it felt very taxating to think of yadm as a substitue for git with dotfiles controlling power, but after around 20 or so minutes, I was convinced that this the way I wanted to manage my dotfiles all along. No sucky symlinks, no confusion, just a simple repo which stores what I need to store without the agressive .gitignore in my home directory. Incorporating yadm into my Ansible playbook automated the setup process. The playbook cloned the dotfiles repository, executed a bootstrap script, and ensured that all submodules were initialized and updated. This automation ensured consistency across setups, reducing manual intervention and potential configuration drift.\n3. Streamlined Configuration Using yadm streamlined the configuration of my system. It handled the intricacies of managing dotfiles and submodules, allowed me to focus on enhancing my development environment rather than wrestling with configuration issues. If you read it so far, I think you should give it a fair try, it will be worth it.\nConclusion Embracing Git submodules and yadm has been a transformative experience. It has simplified the management of my dotfiles, improved organization, and enhanced the automation of my system setup. For anyone dealing with complex dotfiles setups or seeking a more efficient way to manage configurations, exploring Git submodules and yadm is highly recommended.\nThis journey has not only refined my setup but also highlighted the power of leveraging the right tools for the task at hand. The integration of Git submodules into my workflow stands as a testament to how thoughtful tooling choices can lead to a more streamlined and enjoyable development experience.\n","permalink":"http://localhost:1313/posts/git-submodules/","summary":"\u003chr\u003e\n\u003ch2 id=\"embracing-git-submodules-a-journey-to-a-seamless-dotfiles-setup\"\u003eEmbracing Git Submodules: A Journey to a Seamless Dotfiles Setup\u003c/h2\u003e\n\u003cp\u003eI had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was.\nIn my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\u003c/p\u003e","title":"Git Submodules"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"My First Post"},{"content":"Income Tax for Noobs Disclaimer This is basic educational information about taxation. It is not personal tax advice. For official guidance, always check government websites.\nSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\nSo I thought why not try to understand how it works to safeguard myself (and my money). While learning about it, I thought I can share the knowledge about the same, so here we are.\nSince I am a salaried person like most people, I\u0026rsquo;ll only discuss the same here.\nTaxable Income Part of your income which you are obliged to pay taxes on. The taxable income will eventually decide your tax slab.\nTax slabs is just rules that if you have taxable income over let\u0026rsquo;s say 7 Lakhs. then you have to pay 10% (for example) as an income tax on it. That means 70,000 will be your income tax.\nSounds like a lot. So we have some ways to reduce the tax amount you pay. Here is where you have to grind your brain for the most part.\nDeductions: Make your taxable money smaller so you pay less tax, sometimes even at a lower rate. Rebates: Reduce the final tax amount directly. Exemptions: Exclude some of your income from being taxed. How do you pay Income Tax If you are a salaried person, your employer takes a cut from your salary and pays it to the govt. This is called Tax deducted at Source (TDS)\nOn the financial year end, your employer will give you a form 16, which details all the tax paid, deductions, etc from you.\nNow it is your work to calculate whether your actual liability is less or more than the TDS cut from you. In most cases it is more.\nSo if this is the case then you only have to file in an Income Tax Return (ITR) so you can make your discounts on the tax and get some money back.\nITRs are for 4 types, ITR 1 to 4. We\u0026rsquo;ll only see ITR 1 and 2 since those are for salaried peops.\nITR-1: For individuals with income up to ₹50 lakh from salary/pension, one house property, and other sources (like interest). No capital gains or foreign assets.\nITR-2: For individuals/HUFs not having business/professional income. Covers salary, multiple house properties, capital gains, foreign income/assets, and income above ₹50 lakh.\n","permalink":"http://localhost:1313/posts/income-tax-for-noobs/","summary":"\u003ch1 id=\"income-tax-for-noobs\"\u003eIncome Tax for Noobs\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebasic educational information about taxation\u003c/strong\u003e. It is \u003cstrong\u003enot personal tax advice\u003c/strong\u003e. For official guidance, always check \u003cstrong\u003egovernment websites\u003c/strong\u003e.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\u003c/p\u003e","title":"Income Tax for Noobs"},{"content":" Finance for noobs I come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\nDisclaimer This content is primarily relevant to India and sometimes US markets. The content here is purely for educational purposes. This is not financial advice.\nStocks Stock is basically ownership of a company.\nUsual ways that people make profit from a stock is:\nPrice appreciation: you bought it for 100 rupees, sold for 200. profit of 100 in your pocket. Dividends: company gives out profits to all owners yearly or so. But this is upto company whether they want to give away or not. Mutual Funds I growed up watching mutual funds advertisements many times, never really understood what they meant.\nA very common example used to explain it is a basket of stocks. However, I think most simple way to explain it is:\nIt is a collection of different stock (and stock like stuff). Reason for it to be a collection is so that risk is reduced.\nThis is done because investing solely in a single company is very high risk. What if one day there is some negative PR, and company stock hits rock bottom. Investing little bit in many companies will save u from this loss because profit of some other place can help you.\nYou will hear a popular saying, \u0026ldquo;Don\u0026rsquo;t put all your eggs in one basket.\u0026rdquo; This is what they\u0026rsquo;re talking about.\nPortfolio of a fund means which stocks they have in their collection. But your portfolio means what all of the investments you are holding.\nOne more thing u will hear is that there are stock market index funds. Think of these also as a collection of stocks.\nIn india we have two main stock indices:\nNifty-50: Top 50 companies in National Stock Exchange (NSE) Sensex: Top 30 companies in Bombay Stock Exchange (BSE) A Stock exchange is basically a place where people can sell or buy stocks under some party like Govt monitoring them. Governments try to keep regulations in place so that people don\u0026rsquo;t misbehave.\nAn index is actually not a mutual fund. It is just a public list for people to know how market is doing overall.\nAny mutual fund can mimic the index. So it means they keep their investments only in Nifty 50 for example. These mutual funds are called an Index fund or ETFs.\nNow you may wonder, why they are called \u0026ldquo;mutual\u0026rdquo; funds. What happens is that many people buy a mutual fund in bulk/pool.\nSo mutual means collective ownership/sharing. This means profits and losses are equally shared among all the investors.\nWho does this?\nFunds are managed by Asset Management Companies (AMC). They have their fund managers who speculate the market for returns. Since they\u0026rsquo;re doing the heavy lifting of market research and you are just putting money in, they charge you a premium.\nThis premium is called as \u0026ldquo;Expense ratio\u0026rdquo;. A 1% expense ratio means on investing 100 rupees, you have to pay 1 rupee to the AMC every year. Lastly, you will hear types of mutual funds:\nSmall cap: invest mostly in small scale companies, high risk, high reward. Mid cap: invest mostly in medium scale companies, quite stable, medium risk, medium reward. Large cap: invest mostly in large scale companies, low risk, low reward. so, in short, small scale startups can fail easily and if they boom, they reward generously too and large scale companies stock price is table so not much amount of profit, but the stock price won\u0026rsquo;t be bouncing up and down too much.\nMetrics CAGR So if you looked at any ads for mututal funds, you must have seen a metric called CAGR.\nFull form: Compound Annual Growth Rate. Basically, it is avg growth rate on a yearly basis. Growth means how much your investment increased in value. Like buying a Tata stock which was 100 rupees now became 200, so it is 100% growth.\nLet\u0026rsquo;s say u bought a mutual fund with a CAGR of 30%. But you don\u0026rsquo;t know if the fund was really lucky that one year it growed by 150% and rest of the time with 10%.\nThe problem with only looking at one metric is that you will lose insight on other important stuff. Think of it like you need to have an idea of the bigger picture of the market to make profit consistently.\nThere are a lot of metrics like:\nSharpe ratio Sharpe is basically the ratio of return over risk. So you for example, you are given two choices of buy a house.\nHouse A will give you 100% returns i.e. double the investment. It\u0026rsquo;s a very nice sea-faced apartment. House B will give you 10% returns.\nYou would buy House A, seems like a no-brainer.\nBut if something happens one day like a tsunami or something, House A will be washed way in it. So you have the risk of losing entire investment you put in. House B is in reletively safe area, no earthquakes, no natural disasters.\nWould you still buy house A now?\nSo this is what return to risk ratio does. You know how much returns you can make but you also need to know how safe investment it is.\nBeta Measures the volatility (how much a stock jumps up or down) compared to market.\nβ = 1 → moves with market β \u0026gt; 1 → more volatile than market β \u0026lt; 1 → less volatile than market β \u0026lt; 0 → moves opposite to market Capture ratio Financial Assets So I\u0026rsquo;ve been talking about stocks all the way. But there are also more types of it which are different but they work in same manner. But I think for today, just have a short overview on what they are:\n1. Equity / Stocks Ownership in a company. Profit from price appreciation and dividends. 2. Debt / Bonds Lending money to government or corporations. Earn fixed interest (aka coupon). Quite low risk, therefore low returns. 3. Cash \u0026amp; Cash Equivalents Bank deposits (like Fixed Deposits), money market instruments, treasury bills. Very low risk, highly liquid. 4. Derivatives Financial contracts whose value depends on an underlying asset. Examples: Futures, Options, Swaps. 5. Mutual Funds \u0026amp; ETFs Pooled investments in a mix of stocks, bonds, or other assets. Diversified risk. 6. Commodities Physical goods like gold, silver, oil, agricultural products. Can be invested via commodity ETFs or futures. 7. Real Estate / Property Residential, commercial, or land. Can generate rental income and capital gains. 8. Alternative Investments Hedge funds, private equity, crypto, collectibles. Typically higher risk, lower liquidity. ","permalink":"http://localhost:1313/posts/fin-for-noobs/","summary":"\u003chr\u003e\n\u003ch1 id=\"finance-for-noobs\"\u003eFinance for noobs\u003c/h1\u003e\n\u003cp\u003eI come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content is primarily relevant to India and sometimes US markets.\nThe content here is purely for educational purposes.\n\u003cstrong\u003eThis is not financial advice.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"stocks\"\u003eStocks\u003c/h2\u003e\n\u003cp\u003eStock is basically ownership of a company.\u003c/p\u003e\n\u003cp\u003eUsual ways that people make profit from a stock is:\u003c/p\u003e","title":"Finance for Noobs"},{"content":"Huffman Coding Huffman Coding is a popular algorithm used for data compression. It was developed by David A. Huffman in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\nTable of Contents Introduction How Huffman Coding Works Example of Huffman Coding Decoding with Huffman Code Advantages of Huffman Coding Applications of Huffman Coding Limitations of Huffman Coding Introduction Huffman Coding is a lossless compression algorithm, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\nHow Huffman Coding Works Step-by-Step Process Frequency Calculation:\nCount the frequency of each character in the data. Create Leaf Nodes:\nFor each character, create a leaf node containing its frequency and value. Build a Priority Queue:\nInsert all leaf nodes into a priority queue (or min-heap), sorted by frequency (smallest frequency at the top). Construct the Huffman Tree:\nRepeat the following until only one node remains in the priority queue: Extract the two nodes with the lowest frequency. Create a new node with a frequency equal to the sum of these two nodes. Set the two extracted nodes as the left and right children of the new node. Insert the new node back into the priority queue. The last remaining node is the root of the Huffman Tree. Assign Codes:\nTraverse the Huffman Tree from the root to each leaf node. Assign a binary 0 for each left edge and 1 for each right edge. The path to each character forms its Huffman Code. Example of Huffman Coding Consider the following example data:\nCharacter Frequency A 5 B 9 C 12 D 13 E 16 F 45 Step 1: Build the Huffman Tree Start with individual nodes sorted by frequency. Merge nodes with the lowest frequencies until only one node remains. The process would look like this:\nCombine A (5) and B (9) → New Node (14) Combine C (12) and D (13) → New Node (25) Combine New Node (14) and E (16) → New Node (30) Combine New Node (25) and F (45) → New Node (70) Combine New Node (30) and New Node (70) → Final Root (100) Step 2: Assign Codes After constructing the Huffman Tree, assign binary codes based on the path to each character:\nCharacter Huffman Code A 1100 B 1101 C 100 D 101 E 111 F 0 Result: The character with the highest frequency (F) has the shortest code (0), and characters with lower frequencies have longer codes.\nEncoding Example If we encode the string ABCD, it would be:\nA → 1100 B → 1101 C → 100 D → 101 Encoded string: 11001101100101\nDecoding with Huffman Code Decoding is performed by traversing the Huffman Tree:\nStart at the root. For each 0, move left; for each 1, move right. When a leaf node is reached, add the character to the output. Return to the root and repeat until the entire encoded string is decoded. Advantages of Huffman Coding Lossless Compression: No data is lost during compression. Efficiency: Saves space by assigning shorter codes to more frequent characters. Optimal for Given Frequencies: Huffman Coding guarantees the minimum number of bits required for a set of characters based on their frequencies. Limitations of Huffman Coding Fixed Frequencies: Huffman Coding is optimal for a fixed set of frequencies. Changes in frequency distribution may lead to inefficiency. Not Suitable for Real-Time Applications: For large and variable data, the tree-building process can be slow. Suboptimal for Small Files: May add overhead for very small files where the additional tree data outweighs compression benefits. Applications of Huffman Coding Data Compression:\nWidely used in file compression formats like ZIP and RAR. Multimedia Compression:\nUtilized in JPEG and MP3 formats to reduce file size. Text Compression:\nUseful in compressing text files and emails for faster transmission. Telecommunication:\nEmployed in transmission protocols to optimize data transfer efficiency. Data Transmission:\nApplied in network data packet optimization for reducing bandwidth usage. Summary Huffman Coding is a fundamental algorithm for lossless data compression, leveraging variable-length encoding to minimize storage and bandwidth requirements. By prioritizing more frequent characters with shorter codes, it efficiently reduces data size. Its applications span various fields, including file compression, multimedia, and network optimization, making it a cornerstone of efficient data handling in digital systems.\n","permalink":"http://localhost:1313/posts/huffman-coding/","summary":"\u003ch1 id=\"huffman-coding\"\u003eHuffman Coding\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eHuffman Coding\u003c/strong\u003e is a popular algorithm used for data compression. It was developed by \u003cstrong\u003eDavid A. Huffman\u003c/strong\u003e in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\u003c/p\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#how-huffman-coding-works\"\u003eHow Huffman Coding Works\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#example-of-huffman-coding\"\u003eExample of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#decoding-with-huffman-code\"\u003eDecoding with Huffman Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#advantages-of-huffman-coding\"\u003eAdvantages of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#applications-of-huffman-coding\"\u003eApplications of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#limitations-of-huffman-coding\"\u003eLimitations of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eHuffman Coding is a \u003cstrong\u003elossless compression algorithm\u003c/strong\u003e, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\u003c/p\u003e","title":"Huffman Coding"},{"content":" Embracing Git Submodules: A Journey to a Seamless Dotfiles Setup I had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was. In my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\nThe Challenge Managing dotfiles is a daunting task, especially when dealing with a complex array of configurations spread across multitudes of applications and tools. Initially, I used traditional methods like stow. But, as my setup kept evolving, I needed an even more sophisticated solution to handle not just my primary dotfiles but also various submodules, such as for Neovim.\nDiscovering Git Submodules All I heard about submodules was the scary stories of how messy it can get. However, Git submodules are a powerful feature that allows you to include and manage repositories within a repository. This feature became a game-changer in my quest for a cleaner setup. Here’s why:\n1. Seamless Integration Using Git submodules, I could integrate external repositories directly into my dotfiles repository. For e.g, integrating a Neovim configuration repository as a submodule meant that updates to plugins or configurations could be managed seamlessly without disrupting the primary dotfiles setup.\n2. Simplified Updates Managing updates with Git submodules turned out to be straightforward. With commands like git submodule update --init --recursive, I could ensure that all submodules were initialized and up-to-date with just a single command. This eliminated the need for manual updates and checks, saving time and reducing errors.\n3. Enhanced Organization By organizing my configurations into separate repositories and including them as submodules, I achieved a cleaner, more modular setup. This approach made it easier to maintain and update each component individually while keeping the main repository organized.\nThe Transition to yadm The journey didn’t stop with Git submodules. I transitioned to using yadm (Yet Another Dotfiles Manager), which enhanced the management of my dotfiles even further. Here’s how yadm fit into the picture:\n1. Advanced Dotfiles Management yadm offered advanced features tailored for dotfiles management. It provided built-in support for handling dotfiles repositories and their submodules. With commands like yadm clone, yadm pull, and yadm submodule update, I could effortlessly manage and synchronize my dotfiles across systems.\n2. Automation and Consistency Initially, it felt very taxating to think of yadm as a substitue for git with dotfiles controlling power, but after around 20 or so minutes, I was convinced that this the way I wanted to manage my dotfiles all along. No sucky symlinks, no confusion, just a simple repo which stores what I need to store without the agressive .gitignore in my home directory. Incorporating yadm into my Ansible playbook automated the setup process. The playbook cloned the dotfiles repository, executed a bootstrap script, and ensured that all submodules were initialized and updated. This automation ensured consistency across setups, reducing manual intervention and potential configuration drift.\n3. Streamlined Configuration Using yadm streamlined the configuration of my system. It handled the intricacies of managing dotfiles and submodules, allowed me to focus on enhancing my development environment rather than wrestling with configuration issues. If you read it so far, I think you should give it a fair try, it will be worth it.\nConclusion Embracing Git submodules and yadm has been a transformative experience. It has simplified the management of my dotfiles, improved organization, and enhanced the automation of my system setup. For anyone dealing with complex dotfiles setups or seeking a more efficient way to manage configurations, exploring Git submodules and yadm is highly recommended.\nThis journey has not only refined my setup but also highlighted the power of leveraging the right tools for the task at hand. The integration of Git submodules into my workflow stands as a testament to how thoughtful tooling choices can lead to a more streamlined and enjoyable development experience.\n","permalink":"http://localhost:1313/posts/git-submodules/","summary":"\u003chr\u003e\n\u003ch2 id=\"embracing-git-submodules-a-journey-to-a-seamless-dotfiles-setup\"\u003eEmbracing Git Submodules: A Journey to a Seamless Dotfiles Setup\u003c/h2\u003e\n\u003cp\u003eI had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was.\nIn my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\u003c/p\u003e","title":"Git Submodules"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"My First Post"},{"content":"Income Tax for Noobs Disclaimer This is basic educational information about taxation. It is not personal tax advice. For official guidance, always check government websites.\nSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\nSo I thought why not try to understand how it works to safeguard myself (and my money). While learning about it, I thought I can share the knowledge about the same, so here we are.\nSince I am a salaried person like most people, I\u0026rsquo;ll only discuss the same here.\nTaxable Income Part of your income which you are obliged to pay taxes on. The taxable income will eventually decide your tax slab.\nTax slabs is just rules that if you have taxable income over let\u0026rsquo;s say 7 Lakhs. then you have to pay 10% (for example) as an income tax on it. That means 70,000 will be your income tax.\nSounds like a lot. So we have some ways to reduce the tax amount you pay. Here is where you have to grind your brain for the most part.\nDeductions: Make your taxable money smaller so you pay less tax, sometimes even at a lower rate. Rebates: Reduce the final tax amount directly. Exemptions: Exclude some of your income from being taxed. How do you pay Income Tax If you are a salaried person, your employer takes a cut from your salary and pays it to the govt. This is called Tax deducted at Source (TDS)\nOn the financial year end, your employer will give you a form 16, which details all the tax paid, deductions, etc from you.\nNow it is your work to calculate whether your actual liability from the gross income is less or more than the TDS cut from you. In most cases it is more.\nSo if this is the case then you only have to file in an Income Tax Return (ITR) so you can make your discounts on the tax and get some money back.\nITRs are for 4 types, ITR 1 to 4. We\u0026rsquo;ll only see ITR 1 and 2 since those are for salaried peops.\nITR-1: For individuals with income up to ₹50 lakh from salary/pension, one house property, and other sources (like interest). No capital gains or foreign assets.\nITR-2: For individuals/HUFs not having business/professional income. Covers salary, multiple house properties, capital gains, foreign income/assets, and income above ₹50 lakh.\n","permalink":"http://localhost:1313/posts/income-tax-for-noobs/","summary":"\u003ch1 id=\"income-tax-for-noobs\"\u003eIncome Tax for Noobs\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebasic educational information about taxation\u003c/strong\u003e. It is \u003cstrong\u003enot personal tax advice\u003c/strong\u003e. For official guidance, always check \u003cstrong\u003egovernment websites\u003c/strong\u003e.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\u003c/p\u003e","title":"Income Tax for Noobs"},{"content":" Finance for noobs I come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\nDisclaimer This content is primarily relevant to India and sometimes US markets. The content here is purely for educational purposes. This is not financial advice.\nStocks Stock is basically ownership of a company.\nUsual ways that people make profit from a stock is:\nPrice appreciation: you bought it for 100 rupees, sold for 200. profit of 100 in your pocket. Dividends: company gives out profits to all owners yearly or so. But this is upto company whether they want to give away or not. Mutual Funds I growed up watching mutual funds advertisements many times, never really understood what they meant.\nA very common example used to explain it is a basket of stocks. However, I think most simple way to explain it is:\nIt is a collection of different stock (and stock like stuff). Reason for it to be a collection is so that risk is reduced.\nThis is done because investing solely in a single company is very high risk. What if one day there is some negative PR, and company stock hits rock bottom. Investing little bit in many companies will save u from this loss because profit of some other place can help you.\nYou will hear a popular saying, \u0026ldquo;Don\u0026rsquo;t put all your eggs in one basket.\u0026rdquo; This is what they\u0026rsquo;re talking about.\nPortfolio of a fund means which stocks they have in their collection. But your portfolio means what all of the investments you are holding.\nOne more thing u will hear is that there are stock market index funds. Think of these also as a collection of stocks.\nIn india we have two main stock indices:\nNifty-50: Top 50 companies in National Stock Exchange (NSE) Sensex: Top 30 companies in Bombay Stock Exchange (BSE) A Stock exchange is basically a place where people can sell or buy stocks under some party like Govt monitoring them. Governments try to keep regulations in place so that people don\u0026rsquo;t misbehave.\nAn index is actually not a mutual fund. It is just a public list for people to know how market is doing overall.\nAny mutual fund can mimic the index. So it means they keep their investments only in Nifty 50 for example. These mutual funds are called an Index fund or ETFs.\nNow you may wonder, why they are called \u0026ldquo;mutual\u0026rdquo; funds. What happens is that many people buy a mutual fund in bulk/pool.\nSo mutual means collective ownership/sharing. This means profits and losses are equally shared among all the investors.\nWho does this?\nFunds are managed by Asset Management Companies (AMC). They have their fund managers who speculate the market for returns. Since they\u0026rsquo;re doing the heavy lifting of market research and you are just putting money in, they charge you a premium.\nThis premium is called as \u0026ldquo;Expense ratio\u0026rdquo;. A 1% expense ratio means on investing 100 rupees, you have to pay 1 rupee to the AMC every year. Lastly, you will hear types of mutual funds:\nSmall cap: invest mostly in small scale companies, high risk, high reward. Mid cap: invest mostly in medium scale companies, quite stable, medium risk, medium reward. Large cap: invest mostly in large scale companies, low risk, low reward. so, in short, small scale startups can fail easily and if they boom, they reward generously too and large scale companies stock price is table so not much amount of profit, but the stock price won\u0026rsquo;t be bouncing up and down too much.\nMetrics CAGR So if you looked at any ads for mututal funds, you must have seen a metric called CAGR.\nFull form: Compound Annual Growth Rate. Basically, it is avg growth rate on a yearly basis. Growth means how much your investment increased in value. Like buying a Tata stock which was 100 rupees now became 200, so it is 100% growth.\nLet\u0026rsquo;s say u bought a mutual fund with a CAGR of 30%. But you don\u0026rsquo;t know if the fund was really lucky that one year it growed by 150% and rest of the time with 10%.\nThe problem with only looking at one metric is that you will lose insight on other important stuff. Think of it like you need to have an idea of the bigger picture of the market to make profit consistently.\nThere are a lot of metrics like:\nSharpe ratio Sharpe is basically the ratio of return over risk. So you for example, you are given two choices of buy a house.\nHouse A will give you 100% returns i.e. double the investment. It\u0026rsquo;s a very nice sea-faced apartment. House B will give you 10% returns.\nYou would buy House A, seems like a no-brainer.\nBut if something happens one day like a tsunami or something, House A will be washed way in it. So you have the risk of losing entire investment you put in. House B is in reletively safe area, no earthquakes, no natural disasters.\nWould you still buy house A now?\nSo this is what return to risk ratio does. You know how much returns you can make but you also need to know how safe investment it is.\nBeta Measures the volatility (how much a stock jumps up or down) compared to market.\nβ = 1 → moves with market β \u0026gt; 1 → more volatile than market β \u0026lt; 1 → less volatile than market β \u0026lt; 0 → moves opposite to market Capture ratio Financial Assets So I\u0026rsquo;ve been talking about stocks all the way. But there are also more types of it which are different but they work in same manner. But I think for today, just have a short overview on what they are:\n1. Equity / Stocks Ownership in a company. Profit from price appreciation and dividends. 2. Debt / Bonds Lending money to government or corporations. Earn fixed interest (aka coupon). Quite low risk, therefore low returns. 3. Cash \u0026amp; Cash Equivalents Bank deposits (like Fixed Deposits), money market instruments, treasury bills. Very low risk, highly liquid. 4. Derivatives Financial contracts whose value depends on an underlying asset. Examples: Futures, Options, Swaps. 5. Mutual Funds \u0026amp; ETFs Pooled investments in a mix of stocks, bonds, or other assets. Diversified risk. 6. Commodities Physical goods like gold, silver, oil, agricultural products. Can be invested via commodity ETFs or futures. 7. Real Estate / Property Residential, commercial, or land. Can generate rental income and capital gains. 8. Alternative Investments Hedge funds, private equity, crypto, collectibles. Typically higher risk, lower liquidity. ","permalink":"http://localhost:1313/posts/fin-for-noobs/","summary":"\u003chr\u003e\n\u003ch1 id=\"finance-for-noobs\"\u003eFinance for noobs\u003c/h1\u003e\n\u003cp\u003eI come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content is primarily relevant to India and sometimes US markets.\nThe content here is purely for educational purposes.\n\u003cstrong\u003eThis is not financial advice.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"stocks\"\u003eStocks\u003c/h2\u003e\n\u003cp\u003eStock is basically ownership of a company.\u003c/p\u003e\n\u003cp\u003eUsual ways that people make profit from a stock is:\u003c/p\u003e","title":"Finance for Noobs"},{"content":"Huffman Coding Huffman Coding is a popular algorithm used for data compression. It was developed by David A. Huffman in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\nTable of Contents Introduction How Huffman Coding Works Example of Huffman Coding Decoding with Huffman Code Advantages of Huffman Coding Applications of Huffman Coding Limitations of Huffman Coding Introduction Huffman Coding is a lossless compression algorithm, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\nHow Huffman Coding Works Step-by-Step Process Frequency Calculation:\nCount the frequency of each character in the data. Create Leaf Nodes:\nFor each character, create a leaf node containing its frequency and value. Build a Priority Queue:\nInsert all leaf nodes into a priority queue (or min-heap), sorted by frequency (smallest frequency at the top). Construct the Huffman Tree:\nRepeat the following until only one node remains in the priority queue: Extract the two nodes with the lowest frequency. Create a new node with a frequency equal to the sum of these two nodes. Set the two extracted nodes as the left and right children of the new node. Insert the new node back into the priority queue. The last remaining node is the root of the Huffman Tree. Assign Codes:\nTraverse the Huffman Tree from the root to each leaf node. Assign a binary 0 for each left edge and 1 for each right edge. The path to each character forms its Huffman Code. Example of Huffman Coding Consider the following example data:\nCharacter Frequency A 5 B 9 C 12 D 13 E 16 F 45 Step 1: Build the Huffman Tree Start with individual nodes sorted by frequency. Merge nodes with the lowest frequencies until only one node remains. The process would look like this:\nCombine A (5) and B (9) → New Node (14) Combine C (12) and D (13) → New Node (25) Combine New Node (14) and E (16) → New Node (30) Combine New Node (25) and F (45) → New Node (70) Combine New Node (30) and New Node (70) → Final Root (100) Step 2: Assign Codes After constructing the Huffman Tree, assign binary codes based on the path to each character:\nCharacter Huffman Code A 1100 B 1101 C 100 D 101 E 111 F 0 Result: The character with the highest frequency (F) has the shortest code (0), and characters with lower frequencies have longer codes.\nEncoding Example If we encode the string ABCD, it would be:\nA → 1100 B → 1101 C → 100 D → 101 Encoded string: 11001101100101\nDecoding with Huffman Code Decoding is performed by traversing the Huffman Tree:\nStart at the root. For each 0, move left; for each 1, move right. When a leaf node is reached, add the character to the output. Return to the root and repeat until the entire encoded string is decoded. Advantages of Huffman Coding Lossless Compression: No data is lost during compression. Efficiency: Saves space by assigning shorter codes to more frequent characters. Optimal for Given Frequencies: Huffman Coding guarantees the minimum number of bits required for a set of characters based on their frequencies. Limitations of Huffman Coding Fixed Frequencies: Huffman Coding is optimal for a fixed set of frequencies. Changes in frequency distribution may lead to inefficiency. Not Suitable for Real-Time Applications: For large and variable data, the tree-building process can be slow. Suboptimal for Small Files: May add overhead for very small files where the additional tree data outweighs compression benefits. Applications of Huffman Coding Data Compression:\nWidely used in file compression formats like ZIP and RAR. Multimedia Compression:\nUtilized in JPEG and MP3 formats to reduce file size. Text Compression:\nUseful in compressing text files and emails for faster transmission. Telecommunication:\nEmployed in transmission protocols to optimize data transfer efficiency. Data Transmission:\nApplied in network data packet optimization for reducing bandwidth usage. Summary Huffman Coding is a fundamental algorithm for lossless data compression, leveraging variable-length encoding to minimize storage and bandwidth requirements. By prioritizing more frequent characters with shorter codes, it efficiently reduces data size. Its applications span various fields, including file compression, multimedia, and network optimization, making it a cornerstone of efficient data handling in digital systems.\n","permalink":"http://localhost:1313/posts/huffman-coding/","summary":"\u003ch1 id=\"huffman-coding\"\u003eHuffman Coding\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eHuffman Coding\u003c/strong\u003e is a popular algorithm used for data compression. It was developed by \u003cstrong\u003eDavid A. Huffman\u003c/strong\u003e in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\u003c/p\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#how-huffman-coding-works\"\u003eHow Huffman Coding Works\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#example-of-huffman-coding\"\u003eExample of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#decoding-with-huffman-code\"\u003eDecoding with Huffman Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#advantages-of-huffman-coding\"\u003eAdvantages of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#applications-of-huffman-coding\"\u003eApplications of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#limitations-of-huffman-coding\"\u003eLimitations of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eHuffman Coding is a \u003cstrong\u003elossless compression algorithm\u003c/strong\u003e, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\u003c/p\u003e","title":"Huffman Coding"},{"content":" Embracing Git Submodules: A Journey to a Seamless Dotfiles Setup I had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was. In my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\nThe Challenge Managing dotfiles is a daunting task, especially when dealing with a complex array of configurations spread across multitudes of applications and tools. Initially, I used traditional methods like stow. But, as my setup kept evolving, I needed an even more sophisticated solution to handle not just my primary dotfiles but also various submodules, such as for Neovim.\nDiscovering Git Submodules All I heard about submodules was the scary stories of how messy it can get. However, Git submodules are a powerful feature that allows you to include and manage repositories within a repository. This feature became a game-changer in my quest for a cleaner setup. Here’s why:\n1. Seamless Integration Using Git submodules, I could integrate external repositories directly into my dotfiles repository. For e.g, integrating a Neovim configuration repository as a submodule meant that updates to plugins or configurations could be managed seamlessly without disrupting the primary dotfiles setup.\n2. Simplified Updates Managing updates with Git submodules turned out to be straightforward. With commands like git submodule update --init --recursive, I could ensure that all submodules were initialized and up-to-date with just a single command. This eliminated the need for manual updates and checks, saving time and reducing errors.\n3. Enhanced Organization By organizing my configurations into separate repositories and including them as submodules, I achieved a cleaner, more modular setup. This approach made it easier to maintain and update each component individually while keeping the main repository organized.\nThe Transition to yadm The journey didn’t stop with Git submodules. I transitioned to using yadm (Yet Another Dotfiles Manager), which enhanced the management of my dotfiles even further. Here’s how yadm fit into the picture:\n1. Advanced Dotfiles Management yadm offered advanced features tailored for dotfiles management. It provided built-in support for handling dotfiles repositories and their submodules. With commands like yadm clone, yadm pull, and yadm submodule update, I could effortlessly manage and synchronize my dotfiles across systems.\n2. Automation and Consistency Initially, it felt very taxating to think of yadm as a substitue for git with dotfiles controlling power, but after around 20 or so minutes, I was convinced that this the way I wanted to manage my dotfiles all along. No sucky symlinks, no confusion, just a simple repo which stores what I need to store without the agressive .gitignore in my home directory. Incorporating yadm into my Ansible playbook automated the setup process. The playbook cloned the dotfiles repository, executed a bootstrap script, and ensured that all submodules were initialized and updated. This automation ensured consistency across setups, reducing manual intervention and potential configuration drift.\n3. Streamlined Configuration Using yadm streamlined the configuration of my system. It handled the intricacies of managing dotfiles and submodules, allowed me to focus on enhancing my development environment rather than wrestling with configuration issues. If you read it so far, I think you should give it a fair try, it will be worth it.\nConclusion Embracing Git submodules and yadm has been a transformative experience. It has simplified the management of my dotfiles, improved organization, and enhanced the automation of my system setup. For anyone dealing with complex dotfiles setups or seeking a more efficient way to manage configurations, exploring Git submodules and yadm is highly recommended.\nThis journey has not only refined my setup but also highlighted the power of leveraging the right tools for the task at hand. The integration of Git submodules into my workflow stands as a testament to how thoughtful tooling choices can lead to a more streamlined and enjoyable development experience.\n","permalink":"http://localhost:1313/posts/git-submodules/","summary":"\u003chr\u003e\n\u003ch2 id=\"embracing-git-submodules-a-journey-to-a-seamless-dotfiles-setup\"\u003eEmbracing Git Submodules: A Journey to a Seamless Dotfiles Setup\u003c/h2\u003e\n\u003cp\u003eI had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was.\nIn my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\u003c/p\u003e","title":"Git Submodules"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"My First Post"},{"content":"Income Tax for Noobs Disclaimer This is basic educational information about taxation. It is not personal tax advice. For official guidance, always check government websites.\nSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\nSo I thought why not try to understand how it works to safeguard myself (and my money). While learning about it, I thought I can share the knowledge about the same, so here we are.\nSince I am a salaried person like most people, I\u0026rsquo;ll only discuss the same here.\nTaxable Income Part of your income which you are obliged to pay taxes on. The taxable income will eventually decide your tax slab.\nTax slabs is just rules that if you have taxable income over let\u0026rsquo;s say 7 Lakhs. then you have to pay 10% (for example) as an income tax on it. That means 70,000 will be your income tax.\nSounds like a lot. So we have some ways to reduce the tax amount you pay. Here is where you have to grind your brain for the most part.\nDeductions: Make your taxable money smaller so you pay less tax, sometimes even at a lower rate. Rebates: Reduce the final tax amount directly. Exemptions: Exclude some of your income from being taxed. How do you pay Income Tax If you are a salaried person, your employer takes a cut from your salary and pays it to the govt. This is called Tax deducted at Source (TDS)\nOn the financial year end, your employer will give you a form 16, which details all the tax paid, deductions, etc from you.\nNow it is your work to calculate whether your actual liability is less or more than the TDS cut from you. In most cases it is more.\nSo if this is the case then you only have to file in an Income Tax Return (ITR) so you can make your discounts on the tax and get some money back.\nITRs are for 4 types, ITR 1 to 4. We\u0026rsquo;ll only see ITR 1 and 2 since those are for salaried peops.\nITR-1: For individuals with income up to ₹50 lakh from salary/pension, one house property, and other sources (like interest). No capital gains or foreign assets.\nITR-2: For individuals/HUFs not having business/professional income. Covers salary, multiple house properties, capital gains, foreign income/assets, and income above ₹50 lakh.\n","permalink":"http://localhost:1313/posts/income-tax-for-noobs/","summary":"\u003ch1 id=\"income-tax-for-noobs\"\u003eIncome Tax for Noobs\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebasic educational information about taxation\u003c/strong\u003e. It is \u003cstrong\u003enot personal tax advice\u003c/strong\u003e. For official guidance, always check \u003cstrong\u003egovernment websites\u003c/strong\u003e.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\u003c/p\u003e","title":"Income Tax for Noobs"},{"content":" Finance for noobs I come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\nDisclaimer This content is primarily relevant to India and sometimes US markets. The content here is purely for educational purposes. This is not financial advice.\nStocks Stock is basically ownership of a company.\nUsual ways that people make profit from a stock is:\nPrice appreciation: you bought it for 100 rupees, sold for 200. profit of 100 in your pocket. Dividends: company gives out profits to all owners yearly or so. But this is upto company whether they want to give away or not. Mutual Funds I growed up watching mutual funds advertisements many times, never really understood what they meant.\nA very common example used to explain it is a basket of stocks. However, I think most simple way to explain it is:\nIt is a collection of different stock (and stock like stuff). Reason for it to be a collection is so that risk is reduced.\nThis is done because investing solely in a single company is very high risk. What if one day there is some negative PR, and company stock hits rock bottom. Investing little bit in many companies will save u from this loss because profit of some other place can help you.\nYou will hear a popular saying, \u0026ldquo;Don\u0026rsquo;t put all your eggs in one basket.\u0026rdquo; This is what they\u0026rsquo;re talking about.\nPortfolio of a fund means which stocks they have in their collection. But your portfolio means what all of the investments you are holding.\nOne more thing u will hear is that there are stock market index funds. Think of these also as a collection of stocks.\nIn india we have two main stock indices:\nNifty-50: Top 50 companies in National Stock Exchange (NSE) Sensex: Top 30 companies in Bombay Stock Exchange (BSE) A Stock exchange is basically a place where people can sell or buy stocks under some party like Govt monitoring them. Governments try to keep regulations in place so that people don\u0026rsquo;t misbehave.\nAn index is actually not a mutual fund. It is just a public list for people to know how market is doing overall.\nAny mutual fund can mimic the index. So it means they keep their investments only in Nifty 50 for example. These mutual funds are called an Index fund or ETFs.\nNow you may wonder, why they are called \u0026ldquo;mutual\u0026rdquo; funds. What happens is that many people buy a mutual fund in bulk/pool.\nSo mutual means collective ownership/sharing. This means profits and losses are equally shared among all the investors.\nWho does this?\nFunds are managed by Asset Management Companies (AMC). They have their fund managers who speculate the market for returns. Since they\u0026rsquo;re doing the heavy lifting of market research and you are just putting money in, they charge you a premium.\nThis premium is called as \u0026ldquo;Expense ratio\u0026rdquo;. A 1% expense ratio means on investing 100 rupees, you have to pay 1 rupee to the AMC every year. Lastly, you will hear types of mutual funds:\nSmall cap: invest mostly in small scale companies, high risk, high reward. Mid cap: invest mostly in medium scale companies, quite stable, medium risk, medium reward. Large cap: invest mostly in large scale companies, low risk, low reward. so, in short, small scale startups can fail easily and if they boom, they reward generously too and large scale companies stock price is table so not much amount of profit, but the stock price won\u0026rsquo;t be bouncing up and down too much.\nMetrics CAGR So if you looked at any ads for mututal funds, you must have seen a metric called CAGR.\nFull form: Compound Annual Growth Rate. Basically, it is avg growth rate on a yearly basis. Growth means how much your investment increased in value. Like buying a Tata stock which was 100 rupees now became 200, so it is 100% growth.\nLet\u0026rsquo;s say u bought a mutual fund with a CAGR of 30%. But you don\u0026rsquo;t know if the fund was really lucky that one year it growed by 150% and rest of the time with 10%.\nThe problem with only looking at one metric is that you will lose insight on other important stuff. Think of it like you need to have an idea of the bigger picture of the market to make profit consistently.\nThere are a lot of metrics like:\nSharpe ratio Sharpe is basically the ratio of return over risk. So you for example, you are given two choices of buy a house.\nHouse A will give you 100% returns i.e. double the investment. It\u0026rsquo;s a very nice sea-faced apartment. House B will give you 10% returns.\nYou would buy House A, seems like a no-brainer.\nBut if something happens one day like a tsunami or something, House A will be washed way in it. So you have the risk of losing entire investment you put in. House B is in reletively safe area, no earthquakes, no natural disasters.\nWould you still buy house A now?\nSo this is what return to risk ratio does. You know how much returns you can make but you also need to know how safe investment it is.\nBeta Measures the volatility (how much a stock jumps up or down) compared to market.\nβ = 1 → moves with market β \u0026gt; 1 → more volatile than market β \u0026lt; 1 → less volatile than market β \u0026lt; 0 → moves opposite to market Capture ratio Financial Assets So I\u0026rsquo;ve been talking about stocks all the way. But there are also more types of it which are different but they work in same manner. But I think for today, just have a short overview on what they are:\n1. Equity / Stocks Ownership in a company. Profit from price appreciation and dividends. 2. Debt / Bonds Lending money to government or corporations. Earn fixed interest (aka coupon). Quite low risk, therefore low returns. 3. Cash \u0026amp; Cash Equivalents Bank deposits (like Fixed Deposits), money market instruments, treasury bills. Very low risk, highly liquid. 4. Derivatives Financial contracts whose value depends on an underlying asset. Examples: Futures, Options, Swaps. 5. Mutual Funds \u0026amp; ETFs Pooled investments in a mix of stocks, bonds, or other assets. Diversified risk. 6. Commodities Physical goods like gold, silver, oil, agricultural products. Can be invested via commodity ETFs or futures. 7. Real Estate / Property Residential, commercial, or land. Can generate rental income and capital gains. 8. Alternative Investments Hedge funds, private equity, crypto, collectibles. Typically higher risk, lower liquidity. ","permalink":"http://localhost:1313/posts/fin-for-noobs/","summary":"\u003chr\u003e\n\u003ch1 id=\"finance-for-noobs\"\u003eFinance for noobs\u003c/h1\u003e\n\u003cp\u003eI come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content is primarily relevant to India and sometimes US markets.\nThe content here is purely for educational purposes.\n\u003cstrong\u003eThis is not financial advice.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"stocks\"\u003eStocks\u003c/h2\u003e\n\u003cp\u003eStock is basically ownership of a company.\u003c/p\u003e\n\u003cp\u003eUsual ways that people make profit from a stock is:\u003c/p\u003e","title":"Finance for Noobs"},{"content":"Huffman Coding Huffman Coding is a popular algorithm used for data compression. It was developed by David A. Huffman in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\nTable of Contents Introduction How Huffman Coding Works Example of Huffman Coding Decoding with Huffman Code Advantages of Huffman Coding Applications of Huffman Coding Limitations of Huffman Coding Introduction Huffman Coding is a lossless compression algorithm, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\nHow Huffman Coding Works Step-by-Step Process Frequency Calculation:\nCount the frequency of each character in the data. Create Leaf Nodes:\nFor each character, create a leaf node containing its frequency and value. Build a Priority Queue:\nInsert all leaf nodes into a priority queue (or min-heap), sorted by frequency (smallest frequency at the top). Construct the Huffman Tree:\nRepeat the following until only one node remains in the priority queue: Extract the two nodes with the lowest frequency. Create a new node with a frequency equal to the sum of these two nodes. Set the two extracted nodes as the left and right children of the new node. Insert the new node back into the priority queue. The last remaining node is the root of the Huffman Tree. Assign Codes:\nTraverse the Huffman Tree from the root to each leaf node. Assign a binary 0 for each left edge and 1 for each right edge. The path to each character forms its Huffman Code. Example of Huffman Coding Consider the following example data:\nCharacter Frequency A 5 B 9 C 12 D 13 E 16 F 45 Step 1: Build the Huffman Tree Start with individual nodes sorted by frequency. Merge nodes with the lowest frequencies until only one node remains. The process would look like this:\nCombine A (5) and B (9) → New Node (14) Combine C (12) and D (13) → New Node (25) Combine New Node (14) and E (16) → New Node (30) Combine New Node (25) and F (45) → New Node (70) Combine New Node (30) and New Node (70) → Final Root (100) Step 2: Assign Codes After constructing the Huffman Tree, assign binary codes based on the path to each character:\nCharacter Huffman Code A 1100 B 1101 C 100 D 101 E 111 F 0 Result: The character with the highest frequency (F) has the shortest code (0), and characters with lower frequencies have longer codes.\nEncoding Example If we encode the string ABCD, it would be:\nA → 1100 B → 1101 C → 100 D → 101 Encoded string: 11001101100101\nDecoding with Huffman Code Decoding is performed by traversing the Huffman Tree:\nStart at the root. For each 0, move left; for each 1, move right. When a leaf node is reached, add the character to the output. Return to the root and repeat until the entire encoded string is decoded. Advantages of Huffman Coding Lossless Compression: No data is lost during compression. Efficiency: Saves space by assigning shorter codes to more frequent characters. Optimal for Given Frequencies: Huffman Coding guarantees the minimum number of bits required for a set of characters based on their frequencies. Limitations of Huffman Coding Fixed Frequencies: Huffman Coding is optimal for a fixed set of frequencies. Changes in frequency distribution may lead to inefficiency. Not Suitable for Real-Time Applications: For large and variable data, the tree-building process can be slow. Suboptimal for Small Files: May add overhead for very small files where the additional tree data outweighs compression benefits. Applications of Huffman Coding Data Compression:\nWidely used in file compression formats like ZIP and RAR. Multimedia Compression:\nUtilized in JPEG and MP3 formats to reduce file size. Text Compression:\nUseful in compressing text files and emails for faster transmission. Telecommunication:\nEmployed in transmission protocols to optimize data transfer efficiency. Data Transmission:\nApplied in network data packet optimization for reducing bandwidth usage. Summary Huffman Coding is a fundamental algorithm for lossless data compression, leveraging variable-length encoding to minimize storage and bandwidth requirements. By prioritizing more frequent characters with shorter codes, it efficiently reduces data size. Its applications span various fields, including file compression, multimedia, and network optimization, making it a cornerstone of efficient data handling in digital systems.\n","permalink":"http://localhost:1313/posts/huffman-coding/","summary":"\u003ch1 id=\"huffman-coding\"\u003eHuffman Coding\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eHuffman Coding\u003c/strong\u003e is a popular algorithm used for data compression. It was developed by \u003cstrong\u003eDavid A. Huffman\u003c/strong\u003e in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\u003c/p\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#how-huffman-coding-works\"\u003eHow Huffman Coding Works\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#example-of-huffman-coding\"\u003eExample of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#decoding-with-huffman-code\"\u003eDecoding with Huffman Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#advantages-of-huffman-coding\"\u003eAdvantages of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#applications-of-huffman-coding\"\u003eApplications of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#limitations-of-huffman-coding\"\u003eLimitations of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eHuffman Coding is a \u003cstrong\u003elossless compression algorithm\u003c/strong\u003e, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\u003c/p\u003e","title":"Huffman Coding"},{"content":" Embracing Git Submodules: A Journey to a Seamless Dotfiles Setup I had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was. In my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\nThe Challenge Managing dotfiles is a daunting task, especially when dealing with a complex array of configurations spread across multitudes of applications and tools. Initially, I used traditional methods like stow. But, as my setup kept evolving, I needed an even more sophisticated solution to handle not just my primary dotfiles but also various submodules, such as for Neovim.\nDiscovering Git Submodules All I heard about submodules was the scary stories of how messy it can get. However, Git submodules are a powerful feature that allows you to include and manage repositories within a repository. This feature became a game-changer in my quest for a cleaner setup. Here’s why:\n1. Seamless Integration Using Git submodules, I could integrate external repositories directly into my dotfiles repository. For e.g, integrating a Neovim configuration repository as a submodule meant that updates to plugins or configurations could be managed seamlessly without disrupting the primary dotfiles setup.\n2. Simplified Updates Managing updates with Git submodules turned out to be straightforward. With commands like git submodule update --init --recursive, I could ensure that all submodules were initialized and up-to-date with just a single command. This eliminated the need for manual updates and checks, saving time and reducing errors.\n3. Enhanced Organization By organizing my configurations into separate repositories and including them as submodules, I achieved a cleaner, more modular setup. This approach made it easier to maintain and update each component individually while keeping the main repository organized.\nThe Transition to yadm The journey didn’t stop with Git submodules. I transitioned to using yadm (Yet Another Dotfiles Manager), which enhanced the management of my dotfiles even further. Here’s how yadm fit into the picture:\n1. Advanced Dotfiles Management yadm offered advanced features tailored for dotfiles management. It provided built-in support for handling dotfiles repositories and their submodules. With commands like yadm clone, yadm pull, and yadm submodule update, I could effortlessly manage and synchronize my dotfiles across systems.\n2. Automation and Consistency Initially, it felt very taxating to think of yadm as a substitue for git with dotfiles controlling power, but after around 20 or so minutes, I was convinced that this the way I wanted to manage my dotfiles all along. No sucky symlinks, no confusion, just a simple repo which stores what I need to store without the agressive .gitignore in my home directory. Incorporating yadm into my Ansible playbook automated the setup process. The playbook cloned the dotfiles repository, executed a bootstrap script, and ensured that all submodules were initialized and updated. This automation ensured consistency across setups, reducing manual intervention and potential configuration drift.\n3. Streamlined Configuration Using yadm streamlined the configuration of my system. It handled the intricacies of managing dotfiles and submodules, allowed me to focus on enhancing my development environment rather than wrestling with configuration issues. If you read it so far, I think you should give it a fair try, it will be worth it.\nConclusion Embracing Git submodules and yadm has been a transformative experience. It has simplified the management of my dotfiles, improved organization, and enhanced the automation of my system setup. For anyone dealing with complex dotfiles setups or seeking a more efficient way to manage configurations, exploring Git submodules and yadm is highly recommended.\nThis journey has not only refined my setup but also highlighted the power of leveraging the right tools for the task at hand. The integration of Git submodules into my workflow stands as a testament to how thoughtful tooling choices can lead to a more streamlined and enjoyable development experience.\n","permalink":"http://localhost:1313/posts/git-submodules/","summary":"\u003chr\u003e\n\u003ch2 id=\"embracing-git-submodules-a-journey-to-a-seamless-dotfiles-setup\"\u003eEmbracing Git Submodules: A Journey to a Seamless Dotfiles Setup\u003c/h2\u003e\n\u003cp\u003eI had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was.\nIn my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\u003c/p\u003e","title":"Git Submodules"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"My First Post"},{"content":"Income Tax for Noobs Disclaimer This is basic educational information about taxation. It is not personal tax advice. For official guidance, always check government websites.\nSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\nSo I thought why not try to understand how it works to safeguard myself (and my money). While learning about it, I thought I can share the knowledge about the same, so here we are.\nSince I am a salaried person like most people, I\u0026rsquo;ll only discuss the same here.\nTaxable Income Part of your income which you are obliged to pay taxes on. The taxable income will eventually decide your tax slab.\nTax slabs is just rules that if you have taxable income over let\u0026rsquo;s say 7 Lakhs. then you have to pay 10% (for example) as an income tax on it. That means 70,000 will be your income tax.\nSounds like a lot. So we have some ways to reduce the tax amount you pay. Here is where you have to grind your brain for the most part.\nDeductions: Make your taxable money smaller so you pay less tax, sometimes even at a lower rate. Rebates: Reduce the final tax amount directly. Exemptions: Exclude some of your income from being taxed. How do you pay Income Tax If you are a salaried person, your employer takes a cut from your salary and pays it to the govt. This is called Tax deducted at Source (TDS)\nOn the financial year end, your employer will give you a form 16, which details all the tax paid, deductions, etc from you.\nNow it is your work to calculate whether your actual liability is less or more than the TDS cut from you. In most cases it is more.\nSo if this is the case then you only have to file in an Income Tax Return (ITR) so you can make your discounts on the tax and get some money back.\nIn the case that your TDS was lesser than the tax that should be on you. You can pay the extra as Self-assessment Tax.\nITRs are for 4 types, ITR 1 to 4. We\u0026rsquo;ll only see ITR 1 and 2 since those are for salaried peops.\nITR-1: For individuals with income up to ₹50 lakh from salary/pension, one house property, and other sources (like interest). No capital gains or foreign assets.\nITR-2: For individuals/HUFs not having business/professional income. Covers salary, multiple house properties, capital gains, foreign income/assets, and income above ₹50 lakh.\n","permalink":"http://localhost:1313/posts/income-tax-for-noobs/","summary":"\u003ch1 id=\"income-tax-for-noobs\"\u003eIncome Tax for Noobs\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebasic educational information about taxation\u003c/strong\u003e. It is \u003cstrong\u003enot personal tax advice\u003c/strong\u003e. For official guidance, always check \u003cstrong\u003egovernment websites\u003c/strong\u003e.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\u003c/p\u003e","title":"Income Tax for Noobs"},{"content":" Finance for noobs I come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\nDisclaimer This content is primarily relevant to India and sometimes US markets. The content here is purely for educational purposes. This is not financial advice.\nStocks Stock is basically ownership of a company.\nUsual ways that people make profit from a stock is:\nPrice appreciation: you bought it for 100 rupees, sold for 200. profit of 100 in your pocket. Dividends: company gives out profits to all owners yearly or so. But this is upto company whether they want to give away or not. Mutual Funds I growed up watching mutual funds advertisements many times, never really understood what they meant.\nA very common example used to explain it is a basket of stocks. However, I think most simple way to explain it is:\nIt is a collection of different stock (and stock like stuff). Reason for it to be a collection is so that risk is reduced.\nThis is done because investing solely in a single company is very high risk. What if one day there is some negative PR, and company stock hits rock bottom. Investing little bit in many companies will save u from this loss because profit of some other place can help you.\nYou will hear a popular saying, \u0026ldquo;Don\u0026rsquo;t put all your eggs in one basket.\u0026rdquo; This is what they\u0026rsquo;re talking about.\nPortfolio of a fund means which stocks they have in their collection. But your portfolio means what all of the investments you are holding.\nOne more thing u will hear is that there are stock market index funds. Think of these also as a collection of stocks.\nIn india we have two main stock indices:\nNifty-50: Top 50 companies in National Stock Exchange (NSE) Sensex: Top 30 companies in Bombay Stock Exchange (BSE) A Stock exchange is basically a place where people can sell or buy stocks under some party like Govt monitoring them. Governments try to keep regulations in place so that people don\u0026rsquo;t misbehave.\nAn index is actually not a mutual fund. It is just a public list for people to know how market is doing overall.\nAny mutual fund can mimic the index. So it means they keep their investments only in Nifty 50 for example. These mutual funds are called an Index fund or ETFs.\nNow you may wonder, why they are called \u0026ldquo;mutual\u0026rdquo; funds. What happens is that many people buy a mutual fund in bulk/pool.\nSo mutual means collective ownership/sharing. This means profits and losses are equally shared among all the investors.\nWho does this?\nFunds are managed by Asset Management Companies (AMC). They have their fund managers who speculate the market for returns. Since they\u0026rsquo;re doing the heavy lifting of market research and you are just putting money in, they charge you a premium.\nThis premium is called as \u0026ldquo;Expense ratio\u0026rdquo;. A 1% expense ratio means on investing 100 rupees, you have to pay 1 rupee to the AMC every year. Lastly, you will hear types of mutual funds:\nSmall cap: invest mostly in small scale companies, high risk, high reward. Mid cap: invest mostly in medium scale companies, quite stable, medium risk, medium reward. Large cap: invest mostly in large scale companies, low risk, low reward. so, in short, small scale startups can fail easily and if they boom, they reward generously too and large scale companies stock price is table so not much amount of profit, but the stock price won\u0026rsquo;t be bouncing up and down too much.\nMetrics CAGR So if you looked at any ads for mututal funds, you must have seen a metric called CAGR.\nFull form: Compound Annual Growth Rate. Basically, it is avg growth rate on a yearly basis. Growth means how much your investment increased in value. Like buying a Tata stock which was 100 rupees now became 200, so it is 100% growth.\nLet\u0026rsquo;s say u bought a mutual fund with a CAGR of 30%. But you don\u0026rsquo;t know if the fund was really lucky that one year it growed by 150% and rest of the time with 10%.\nThe problem with only looking at one metric is that you will lose insight on other important stuff. Think of it like you need to have an idea of the bigger picture of the market to make profit consistently.\nThere are a lot of metrics like:\nSharpe ratio Sharpe is basically the ratio of return over risk. So you for example, you are given two choices of buy a house.\nHouse A will give you 100% returns i.e. double the investment. It\u0026rsquo;s a very nice sea-faced apartment. House B will give you 10% returns.\nYou would buy House A, seems like a no-brainer.\nBut if something happens one day like a tsunami or something, House A will be washed way in it. So you have the risk of losing entire investment you put in. House B is in reletively safe area, no earthquakes, no natural disasters.\nWould you still buy house A now?\nSo this is what return to risk ratio does. You know how much returns you can make but you also need to know how safe investment it is.\nBeta Measures the volatility (how much a stock jumps up or down) compared to market.\nβ = 1 → moves with market β \u0026gt; 1 → more volatile than market β \u0026lt; 1 → less volatile than market β \u0026lt; 0 → moves opposite to market Capture ratio Financial Assets So I\u0026rsquo;ve been talking about stocks all the way. But there are also more types of it which are different but they work in same manner. But I think for today, just have a short overview on what they are:\n1. Equity / Stocks Ownership in a company. Profit from price appreciation and dividends. 2. Debt / Bonds Lending money to government or corporations. Earn fixed interest (aka coupon). Quite low risk, therefore low returns. 3. Cash \u0026amp; Cash Equivalents Bank deposits (like Fixed Deposits), money market instruments, treasury bills. Very low risk, highly liquid. 4. Derivatives Financial contracts whose value depends on an underlying asset. Examples: Futures, Options, Swaps. 5. Mutual Funds \u0026amp; ETFs Pooled investments in a mix of stocks, bonds, or other assets. Diversified risk. 6. Commodities Physical goods like gold, silver, oil, agricultural products. Can be invested via commodity ETFs or futures. 7. Real Estate / Property Residential, commercial, or land. Can generate rental income and capital gains. 8. Alternative Investments Hedge funds, private equity, crypto, collectibles. Typically higher risk, lower liquidity. ","permalink":"http://localhost:1313/posts/fin-for-noobs/","summary":"\u003chr\u003e\n\u003ch1 id=\"finance-for-noobs\"\u003eFinance for noobs\u003c/h1\u003e\n\u003cp\u003eI come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content is primarily relevant to India and sometimes US markets.\nThe content here is purely for educational purposes.\n\u003cstrong\u003eThis is not financial advice.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"stocks\"\u003eStocks\u003c/h2\u003e\n\u003cp\u003eStock is basically ownership of a company.\u003c/p\u003e\n\u003cp\u003eUsual ways that people make profit from a stock is:\u003c/p\u003e","title":"Finance for Noobs"},{"content":"Huffman Coding Huffman Coding is a popular algorithm used for data compression. It was developed by David A. Huffman in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\nTable of Contents Introduction How Huffman Coding Works Example of Huffman Coding Decoding with Huffman Code Advantages of Huffman Coding Applications of Huffman Coding Limitations of Huffman Coding Introduction Huffman Coding is a lossless compression algorithm, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\nHow Huffman Coding Works Step-by-Step Process Frequency Calculation:\nCount the frequency of each character in the data. Create Leaf Nodes:\nFor each character, create a leaf node containing its frequency and value. Build a Priority Queue:\nInsert all leaf nodes into a priority queue (or min-heap), sorted by frequency (smallest frequency at the top). Construct the Huffman Tree:\nRepeat the following until only one node remains in the priority queue: Extract the two nodes with the lowest frequency. Create a new node with a frequency equal to the sum of these two nodes. Set the two extracted nodes as the left and right children of the new node. Insert the new node back into the priority queue. The last remaining node is the root of the Huffman Tree. Assign Codes:\nTraverse the Huffman Tree from the root to each leaf node. Assign a binary 0 for each left edge and 1 for each right edge. The path to each character forms its Huffman Code. Example of Huffman Coding Consider the following example data:\nCharacter Frequency A 5 B 9 C 12 D 13 E 16 F 45 Step 1: Build the Huffman Tree Start with individual nodes sorted by frequency. Merge nodes with the lowest frequencies until only one node remains. The process would look like this:\nCombine A (5) and B (9) → New Node (14) Combine C (12) and D (13) → New Node (25) Combine New Node (14) and E (16) → New Node (30) Combine New Node (25) and F (45) → New Node (70) Combine New Node (30) and New Node (70) → Final Root (100) Step 2: Assign Codes After constructing the Huffman Tree, assign binary codes based on the path to each character:\nCharacter Huffman Code A 1100 B 1101 C 100 D 101 E 111 F 0 Result: The character with the highest frequency (F) has the shortest code (0), and characters with lower frequencies have longer codes.\nEncoding Example If we encode the string ABCD, it would be:\nA → 1100 B → 1101 C → 100 D → 101 Encoded string: 11001101100101\nDecoding with Huffman Code Decoding is performed by traversing the Huffman Tree:\nStart at the root. For each 0, move left; for each 1, move right. When a leaf node is reached, add the character to the output. Return to the root and repeat until the entire encoded string is decoded. Advantages of Huffman Coding Lossless Compression: No data is lost during compression. Efficiency: Saves space by assigning shorter codes to more frequent characters. Optimal for Given Frequencies: Huffman Coding guarantees the minimum number of bits required for a set of characters based on their frequencies. Limitations of Huffman Coding Fixed Frequencies: Huffman Coding is optimal for a fixed set of frequencies. Changes in frequency distribution may lead to inefficiency. Not Suitable for Real-Time Applications: For large and variable data, the tree-building process can be slow. Suboptimal for Small Files: May add overhead for very small files where the additional tree data outweighs compression benefits. Applications of Huffman Coding Data Compression:\nWidely used in file compression formats like ZIP and RAR. Multimedia Compression:\nUtilized in JPEG and MP3 formats to reduce file size. Text Compression:\nUseful in compressing text files and emails for faster transmission. Telecommunication:\nEmployed in transmission protocols to optimize data transfer efficiency. Data Transmission:\nApplied in network data packet optimization for reducing bandwidth usage. Summary Huffman Coding is a fundamental algorithm for lossless data compression, leveraging variable-length encoding to minimize storage and bandwidth requirements. By prioritizing more frequent characters with shorter codes, it efficiently reduces data size. Its applications span various fields, including file compression, multimedia, and network optimization, making it a cornerstone of efficient data handling in digital systems.\n","permalink":"http://localhost:1313/posts/huffman-coding/","summary":"\u003ch1 id=\"huffman-coding\"\u003eHuffman Coding\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eHuffman Coding\u003c/strong\u003e is a popular algorithm used for data compression. It was developed by \u003cstrong\u003eDavid A. Huffman\u003c/strong\u003e in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\u003c/p\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#how-huffman-coding-works\"\u003eHow Huffman Coding Works\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#example-of-huffman-coding\"\u003eExample of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#decoding-with-huffman-code\"\u003eDecoding with Huffman Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#advantages-of-huffman-coding\"\u003eAdvantages of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#applications-of-huffman-coding\"\u003eApplications of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#limitations-of-huffman-coding\"\u003eLimitations of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eHuffman Coding is a \u003cstrong\u003elossless compression algorithm\u003c/strong\u003e, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\u003c/p\u003e","title":"Huffman Coding"},{"content":" Embracing Git Submodules: A Journey to a Seamless Dotfiles Setup I had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was. In my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\nThe Challenge Managing dotfiles is a daunting task, especially when dealing with a complex array of configurations spread across multitudes of applications and tools. Initially, I used traditional methods like stow. But, as my setup kept evolving, I needed an even more sophisticated solution to handle not just my primary dotfiles but also various submodules, such as for Neovim.\nDiscovering Git Submodules All I heard about submodules was the scary stories of how messy it can get. However, Git submodules are a powerful feature that allows you to include and manage repositories within a repository. This feature became a game-changer in my quest for a cleaner setup. Here’s why:\n1. Seamless Integration Using Git submodules, I could integrate external repositories directly into my dotfiles repository. For e.g, integrating a Neovim configuration repository as a submodule meant that updates to plugins or configurations could be managed seamlessly without disrupting the primary dotfiles setup.\n2. Simplified Updates Managing updates with Git submodules turned out to be straightforward. With commands like git submodule update --init --recursive, I could ensure that all submodules were initialized and up-to-date with just a single command. This eliminated the need for manual updates and checks, saving time and reducing errors.\n3. Enhanced Organization By organizing my configurations into separate repositories and including them as submodules, I achieved a cleaner, more modular setup. This approach made it easier to maintain and update each component individually while keeping the main repository organized.\nThe Transition to yadm The journey didn’t stop with Git submodules. I transitioned to using yadm (Yet Another Dotfiles Manager), which enhanced the management of my dotfiles even further. Here’s how yadm fit into the picture:\n1. Advanced Dotfiles Management yadm offered advanced features tailored for dotfiles management. It provided built-in support for handling dotfiles repositories and their submodules. With commands like yadm clone, yadm pull, and yadm submodule update, I could effortlessly manage and synchronize my dotfiles across systems.\n2. Automation and Consistency Initially, it felt very taxating to think of yadm as a substitue for git with dotfiles controlling power, but after around 20 or so minutes, I was convinced that this the way I wanted to manage my dotfiles all along. No sucky symlinks, no confusion, just a simple repo which stores what I need to store without the agressive .gitignore in my home directory. Incorporating yadm into my Ansible playbook automated the setup process. The playbook cloned the dotfiles repository, executed a bootstrap script, and ensured that all submodules were initialized and updated. This automation ensured consistency across setups, reducing manual intervention and potential configuration drift.\n3. Streamlined Configuration Using yadm streamlined the configuration of my system. It handled the intricacies of managing dotfiles and submodules, allowed me to focus on enhancing my development environment rather than wrestling with configuration issues. If you read it so far, I think you should give it a fair try, it will be worth it.\nConclusion Embracing Git submodules and yadm has been a transformative experience. It has simplified the management of my dotfiles, improved organization, and enhanced the automation of my system setup. For anyone dealing with complex dotfiles setups or seeking a more efficient way to manage configurations, exploring Git submodules and yadm is highly recommended.\nThis journey has not only refined my setup but also highlighted the power of leveraging the right tools for the task at hand. The integration of Git submodules into my workflow stands as a testament to how thoughtful tooling choices can lead to a more streamlined and enjoyable development experience.\n","permalink":"http://localhost:1313/posts/git-submodules/","summary":"\u003chr\u003e\n\u003ch2 id=\"embracing-git-submodules-a-journey-to-a-seamless-dotfiles-setup\"\u003eEmbracing Git Submodules: A Journey to a Seamless Dotfiles Setup\u003c/h2\u003e\n\u003cp\u003eI had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was.\nIn my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\u003c/p\u003e","title":"Git Submodules"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"My First Post"},{"content":"Income Tax for Noobs Disclaimer This is basic educational information about taxation. It is not personal tax advice. For official guidance, always check government websites.\nSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\nSo I thought why not try to understand how it works to safeguard myself (and my money). While learning about it, I thought I can share the knowledge about the same, so here we are.\nSince I am a salaried person like most people, I\u0026rsquo;ll only discuss the same here.\nTaxable Income Part of your income which you are obliged to pay taxes on. The taxable income will eventually decide your tax slab.\nTax slabs is just rules that if you have taxable income over let\u0026rsquo;s say 7 Lakhs. then you have to pay 10% (for example) as an income tax on it. That means 70,000 will be your income tax.\nSounds like a lot. So we have some ways to reduce the tax amount you pay. Here is where you have to grind your brain for the most part.\nDeductions: Make your taxable money smaller so you pay less tax, sometimes even at a lower rate. Rebates: Reduce the final tax amount directly. Exemptions: Exclude some of your income from being taxed. How do you pay Income Tax If you are a salaried person, your employer takes a cut from your salary and pays it to the govt. This is called Tax deducted at Source (TDS)\nOn the financial year end, your employer will give you a form 16, which details all the tax paid, deductions, etc from you.\nNow it is your work to calculate whether your actual liability is less or more than the TDS cut from you. In most cases it is more.\nSo if this is the case then you only have to file in an Income Tax Return (ITR) so you can make your discounts on the tax and get some money back.\nIn the case that your TDS was lesser than the tax that should be on you. You can pay the extra as Self-assessment Tax.\nITRs are for 4 types, ITR 1 to 4. We\u0026rsquo;ll only see ITR 1 and 2 since those are for salaried peops.\nITR-1: For individuals with income up to ₹50 lakh from salary/pension, one house property, and other sources (like interest). No capital gains or foreign assets.\nITR-2: For individuals/HUFs not having business/professional income. Covers salary, multiple house properties, capital gains, foreign income/assets, and income above ₹50 lakh.\n","permalink":"http://localhost:1313/posts/income-tax-for-noobs/","summary":"\u003ch1 id=\"income-tax-for-noobs\"\u003eIncome Tax for Noobs\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebasic educational information about taxation\u003c/strong\u003e. It is \u003cstrong\u003enot personal tax advice\u003c/strong\u003e. For official guidance, always check \u003cstrong\u003egovernment websites\u003c/strong\u003e.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\u003c/p\u003e","title":"Income Tax for Noobs"},{"content":" Finance for noobs I come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\nDisclaimer This content is primarily relevant to India and sometimes US markets. The content here is purely for educational purposes. This is not financial advice.\nStocks Stock is basically ownership of a company.\nUsual ways that people make profit from a stock is:\nPrice appreciation: you bought it for 100 rupees, sold for 200. profit of 100 in your pocket. Dividends: company gives out profits to all owners yearly or so. But this is upto company whether they want to give away or not. Mutual Funds I growed up watching mutual funds advertisements many times, never really understood what they meant.\nA very common example used to explain it is a basket of stocks. However, I think most simple way to explain it is:\nIt is a collection of different stock (and stock like stuff). Reason for it to be a collection is so that risk is reduced.\nThis is done because investing solely in a single company is very high risk. What if one day there is some negative PR, and company stock hits rock bottom. Investing little bit in many companies will save u from this loss because profit of some other place can help you.\nYou will hear a popular saying, \u0026ldquo;Don\u0026rsquo;t put all your eggs in one basket.\u0026rdquo; This is what they\u0026rsquo;re talking about.\nPortfolio of a fund means which stocks they have in their collection. But your portfolio means what all of the investments you are holding.\nOne more thing u will hear is that there are stock market index funds. Think of these also as a collection of stocks.\nIn india we have two main stock indices:\nNifty-50: Top 50 companies in National Stock Exchange (NSE) Sensex: Top 30 companies in Bombay Stock Exchange (BSE) A Stock exchange is basically a place where people can sell or buy stocks under some party like Govt monitoring them. Governments try to keep regulations in place so that people don\u0026rsquo;t misbehave.\nAn index is actually not a mutual fund. It is just a public list for people to know how market is doing overall.\nAny mutual fund can mimic the index. So it means they keep their investments only in Nifty 50 for example. These mutual funds are called an Index fund or ETFs.\nNow you may wonder, why they are called \u0026ldquo;mutual\u0026rdquo; funds. What happens is that many people buy a mutual fund in bulk/pool.\nSo mutual means collective ownership/sharing. This means profits and losses are equally shared among all the investors.\nWho does this?\nFunds are managed by Asset Management Companies (AMC). They have their fund managers who speculate the market for returns. Since they\u0026rsquo;re doing the heavy lifting of market research and you are just putting money in, they charge you a premium.\nThis premium is called as \u0026ldquo;Expense ratio\u0026rdquo;. A 1% expense ratio means on investing 100 rupees, you have to pay 1 rupee to the AMC every year. Lastly, you will hear types of mutual funds:\nSmall cap: invest mostly in small scale companies, high risk, high reward. Mid cap: invest mostly in medium scale companies, quite stable, medium risk, medium reward. Large cap: invest mostly in large scale companies, low risk, low reward. so, in short, small scale startups can fail easily and if they boom, they reward generously too and large scale companies stock price is table so not much amount of profit, but the stock price won\u0026rsquo;t be bouncing up and down too much.\nMetrics CAGR So if you looked at any ads for mututal funds, you must have seen a metric called CAGR.\nFull form: Compound Annual Growth Rate. Basically, it is avg growth rate on a yearly basis. Growth means how much your investment increased in value. Like buying a Tata stock which was 100 rupees now became 200, so it is 100% growth.\nLet\u0026rsquo;s say u bought a mutual fund with a CAGR of 30%. But you don\u0026rsquo;t know if the fund was really lucky that one year it growed by 150% and rest of the time with 10%.\nThe problem with only looking at one metric is that you will lose insight on other important stuff. Think of it like you need to have an idea of the bigger picture of the market to make profit consistently.\nThere are a lot of metrics like:\nSharpe ratio Sharpe is basically the ratio of return over risk. So you for example, you are given two choices of buy a house.\nHouse A will give you 100% returns i.e. double the investment. It\u0026rsquo;s a very nice sea-faced apartment. House B will give you 10% returns.\nYou would buy House A, seems like a no-brainer.\nBut if something happens one day like a tsunami or something, House A will be washed way in it. So you have the risk of losing entire investment you put in. House B is in reletively safe area, no earthquakes, no natural disasters.\nWould you still buy house A now?\nSo this is what return to risk ratio does. You know how much returns you can make but you also need to know how safe investment it is.\nBeta Measures the volatility (how much a stock jumps up or down) compared to market.\nβ = 1 → moves with market β \u0026gt; 1 → more volatile than market β \u0026lt; 1 → less volatile than market β \u0026lt; 0 → moves opposite to market Capture ratio Financial Assets So I\u0026rsquo;ve been talking about stocks all the way. But there are also more types of it which are different but they work in same manner. But I think for today, just have a short overview on what they are:\n1. Equity / Stocks Ownership in a company. Profit from price appreciation and dividends. 2. Debt / Bonds Lending money to government or corporations. Earn fixed interest (aka coupon). Quite low risk, therefore low returns. 3. Cash \u0026amp; Cash Equivalents Bank deposits (like Fixed Deposits), money market instruments, treasury bills. Very low risk, highly liquid. 4. Derivatives Financial contracts whose value depends on an underlying asset. Examples: Futures, Options, Swaps. 5. Mutual Funds \u0026amp; ETFs Pooled investments in a mix of stocks, bonds, or other assets. Diversified risk. 6. Commodities Physical goods like gold, silver, oil, agricultural products. Can be invested via commodity ETFs or futures. 7. Real Estate / Property Residential, commercial, or land. Can generate rental income and capital gains. 8. Alternative Investments Hedge funds, private equity, crypto, collectibles. Typically higher risk, lower liquidity. ","permalink":"http://localhost:1313/posts/fin-for-noobs/","summary":"\u003chr\u003e\n\u003ch1 id=\"finance-for-noobs\"\u003eFinance for noobs\u003c/h1\u003e\n\u003cp\u003eI come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content is primarily relevant to India and sometimes US markets.\nThe content here is purely for educational purposes.\n\u003cstrong\u003eThis is not financial advice.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"stocks\"\u003eStocks\u003c/h2\u003e\n\u003cp\u003eStock is basically ownership of a company.\u003c/p\u003e\n\u003cp\u003eUsual ways that people make profit from a stock is:\u003c/p\u003e","title":"Finance for Noobs"},{"content":"Huffman Coding Huffman Coding is a popular algorithm used for data compression. It was developed by David A. Huffman in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\nTable of Contents Introduction How Huffman Coding Works Example of Huffman Coding Decoding with Huffman Code Advantages of Huffman Coding Applications of Huffman Coding Limitations of Huffman Coding Introduction Huffman Coding is a lossless compression algorithm, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\nHow Huffman Coding Works Step-by-Step Process Frequency Calculation:\nCount the frequency of each character in the data. Create Leaf Nodes:\nFor each character, create a leaf node containing its frequency and value. Build a Priority Queue:\nInsert all leaf nodes into a priority queue (or min-heap), sorted by frequency (smallest frequency at the top). Construct the Huffman Tree:\nRepeat the following until only one node remains in the priority queue: Extract the two nodes with the lowest frequency. Create a new node with a frequency equal to the sum of these two nodes. Set the two extracted nodes as the left and right children of the new node. Insert the new node back into the priority queue. The last remaining node is the root of the Huffman Tree. Assign Codes:\nTraverse the Huffman Tree from the root to each leaf node. Assign a binary 0 for each left edge and 1 for each right edge. The path to each character forms its Huffman Code. Example of Huffman Coding Consider the following example data:\nCharacter Frequency A 5 B 9 C 12 D 13 E 16 F 45 Step 1: Build the Huffman Tree Start with individual nodes sorted by frequency. Merge nodes with the lowest frequencies until only one node remains. The process would look like this:\nCombine A (5) and B (9) → New Node (14) Combine C (12) and D (13) → New Node (25) Combine New Node (14) and E (16) → New Node (30) Combine New Node (25) and F (45) → New Node (70) Combine New Node (30) and New Node (70) → Final Root (100) Step 2: Assign Codes After constructing the Huffman Tree, assign binary codes based on the path to each character:\nCharacter Huffman Code A 1100 B 1101 C 100 D 101 E 111 F 0 Result: The character with the highest frequency (F) has the shortest code (0), and characters with lower frequencies have longer codes.\nEncoding Example If we encode the string ABCD, it would be:\nA → 1100 B → 1101 C → 100 D → 101 Encoded string: 11001101100101\nDecoding with Huffman Code Decoding is performed by traversing the Huffman Tree:\nStart at the root. For each 0, move left; for each 1, move right. When a leaf node is reached, add the character to the output. Return to the root and repeat until the entire encoded string is decoded. Advantages of Huffman Coding Lossless Compression: No data is lost during compression. Efficiency: Saves space by assigning shorter codes to more frequent characters. Optimal for Given Frequencies: Huffman Coding guarantees the minimum number of bits required for a set of characters based on their frequencies. Limitations of Huffman Coding Fixed Frequencies: Huffman Coding is optimal for a fixed set of frequencies. Changes in frequency distribution may lead to inefficiency. Not Suitable for Real-Time Applications: For large and variable data, the tree-building process can be slow. Suboptimal for Small Files: May add overhead for very small files where the additional tree data outweighs compression benefits. Applications of Huffman Coding Data Compression:\nWidely used in file compression formats like ZIP and RAR. Multimedia Compression:\nUtilized in JPEG and MP3 formats to reduce file size. Text Compression:\nUseful in compressing text files and emails for faster transmission. Telecommunication:\nEmployed in transmission protocols to optimize data transfer efficiency. Data Transmission:\nApplied in network data packet optimization for reducing bandwidth usage. Summary Huffman Coding is a fundamental algorithm for lossless data compression, leveraging variable-length encoding to minimize storage and bandwidth requirements. By prioritizing more frequent characters with shorter codes, it efficiently reduces data size. Its applications span various fields, including file compression, multimedia, and network optimization, making it a cornerstone of efficient data handling in digital systems.\n","permalink":"http://localhost:1313/posts/huffman-coding/","summary":"\u003ch1 id=\"huffman-coding\"\u003eHuffman Coding\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eHuffman Coding\u003c/strong\u003e is a popular algorithm used for data compression. It was developed by \u003cstrong\u003eDavid A. Huffman\u003c/strong\u003e in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\u003c/p\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#how-huffman-coding-works\"\u003eHow Huffman Coding Works\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#example-of-huffman-coding\"\u003eExample of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#decoding-with-huffman-code\"\u003eDecoding with Huffman Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#advantages-of-huffman-coding\"\u003eAdvantages of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#applications-of-huffman-coding\"\u003eApplications of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#limitations-of-huffman-coding\"\u003eLimitations of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eHuffman Coding is a \u003cstrong\u003elossless compression algorithm\u003c/strong\u003e, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\u003c/p\u003e","title":"Huffman Coding"},{"content":" Embracing Git Submodules: A Journey to a Seamless Dotfiles Setup I had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was. In my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\nThe Challenge Managing dotfiles is a daunting task, especially when dealing with a complex array of configurations spread across multitudes of applications and tools. Initially, I used traditional methods like stow. But, as my setup kept evolving, I needed an even more sophisticated solution to handle not just my primary dotfiles but also various submodules, such as for Neovim.\nDiscovering Git Submodules All I heard about submodules was the scary stories of how messy it can get. However, Git submodules are a powerful feature that allows you to include and manage repositories within a repository. This feature became a game-changer in my quest for a cleaner setup. Here’s why:\n1. Seamless Integration Using Git submodules, I could integrate external repositories directly into my dotfiles repository. For e.g, integrating a Neovim configuration repository as a submodule meant that updates to plugins or configurations could be managed seamlessly without disrupting the primary dotfiles setup.\n2. Simplified Updates Managing updates with Git submodules turned out to be straightforward. With commands like git submodule update --init --recursive, I could ensure that all submodules were initialized and up-to-date with just a single command. This eliminated the need for manual updates and checks, saving time and reducing errors.\n3. Enhanced Organization By organizing my configurations into separate repositories and including them as submodules, I achieved a cleaner, more modular setup. This approach made it easier to maintain and update each component individually while keeping the main repository organized.\nThe Transition to yadm The journey didn’t stop with Git submodules. I transitioned to using yadm (Yet Another Dotfiles Manager), which enhanced the management of my dotfiles even further. Here’s how yadm fit into the picture:\n1. Advanced Dotfiles Management yadm offered advanced features tailored for dotfiles management. It provided built-in support for handling dotfiles repositories and their submodules. With commands like yadm clone, yadm pull, and yadm submodule update, I could effortlessly manage and synchronize my dotfiles across systems.\n2. Automation and Consistency Initially, it felt very taxating to think of yadm as a substitue for git with dotfiles controlling power, but after around 20 or so minutes, I was convinced that this the way I wanted to manage my dotfiles all along. No sucky symlinks, no confusion, just a simple repo which stores what I need to store without the agressive .gitignore in my home directory. Incorporating yadm into my Ansible playbook automated the setup process. The playbook cloned the dotfiles repository, executed a bootstrap script, and ensured that all submodules were initialized and updated. This automation ensured consistency across setups, reducing manual intervention and potential configuration drift.\n3. Streamlined Configuration Using yadm streamlined the configuration of my system. It handled the intricacies of managing dotfiles and submodules, allowed me to focus on enhancing my development environment rather than wrestling with configuration issues. If you read it so far, I think you should give it a fair try, it will be worth it.\nConclusion Embracing Git submodules and yadm has been a transformative experience. It has simplified the management of my dotfiles, improved organization, and enhanced the automation of my system setup. For anyone dealing with complex dotfiles setups or seeking a more efficient way to manage configurations, exploring Git submodules and yadm is highly recommended.\nThis journey has not only refined my setup but also highlighted the power of leveraging the right tools for the task at hand. The integration of Git submodules into my workflow stands as a testament to how thoughtful tooling choices can lead to a more streamlined and enjoyable development experience.\n","permalink":"http://localhost:1313/posts/git-submodules/","summary":"\u003chr\u003e\n\u003ch2 id=\"embracing-git-submodules-a-journey-to-a-seamless-dotfiles-setup\"\u003eEmbracing Git Submodules: A Journey to a Seamless Dotfiles Setup\u003c/h2\u003e\n\u003cp\u003eI had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was.\nIn my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\u003c/p\u003e","title":"Git Submodules"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"My First Post"},{"content":"Income Tax for Noobs Disclaimer This is basic educational information about taxation. It is not personal tax advice. For official guidance, always check government websites.\nSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\nSo I thought why not try to understand how it works to safeguard myself (and my money). While learning about it, I thought I can share the knowledge about the same, so here we are.\nSince I am a salaried person like most people, I\u0026rsquo;ll only discuss the same here.\nTaxable Income Part of your income which you are obliged to pay taxes on. The taxable income will eventually decide your tax slab.\nTax slabs is just rules that if you have taxable income over let\u0026rsquo;s say 7 Lakhs. then you have to pay 10% (for example) as an income tax on it. That means 70,000 will be your income tax.\nSounds like a lot. So we have some ways to reduce the tax amount you pay. Here is where you have to grind your brain for the most part.\nDeductions: Make your taxable money smaller so you pay less tax, sometimes even at a lower rate. Rebates: Reduce the final tax amount directly. Exemptions: Exclude some of your income from being taxed. How do you pay Income Tax If you are a salaried person, your employer takes a cut from your salary and pays it to the govt. This is called Tax deducted at Source (TDS)\nOn the financial year end, your employer will give you a form 16, which details all the tax paid, deductions, etc from you.\nNow it is your work to calculate whether your actual liability is less or more than the TDS cut from you. In most cases it is more.\nSo if this is the case then you only have to file in an Income Tax Return (ITR) so you can make your discounts on the tax and get some money back.\nIn the case that your TDS was lesser than the tax that should be on you. You can pay the extra as Self-assessment Tax.\nITRs are for 4 types, ITR 1 to 4. We\u0026rsquo;ll only see ITR 1 and 2 since those are for salaried peops.\nITR-1: For individuals with income up to ₹50 lakh from salary/pension, one house property, and other sources (like interest). No capital gains or foreign assets.\nITR-2: For individuals/HUFs not having business/professional income. Covers salary, multiple house properties, capital gains, foreign income/assets, and income above ₹50 lakh.\nSo this is the entire process:\nYour employer pays salary, deducts PF/other, and TDS monthly. Year ends (31 Mar) → employer issues Form 16. You calculate income = Salary + other sources – exemptions – deductions. You apply slab rates, add cess → find tax. Compare with TDS. Pay extra if short, get refund if excess. File ITR (ITR-1/2) by 31 July and e-verify. Dept processes, sends intimation, refunds if due. Done. ","permalink":"http://localhost:1313/posts/income-tax-for-noobs/","summary":"\u003ch1 id=\"income-tax-for-noobs\"\u003eIncome Tax for Noobs\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebasic educational information about taxation\u003c/strong\u003e. It is \u003cstrong\u003enot personal tax advice\u003c/strong\u003e. For official guidance, always check \u003cstrong\u003egovernment websites\u003c/strong\u003e.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\u003c/p\u003e","title":"Income Tax for Noobs"},{"content":" Finance for noobs I come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\nDisclaimer This content is primarily relevant to India and sometimes US markets. The content here is purely for educational purposes. This is not financial advice.\nStocks Stock is basically ownership of a company.\nUsual ways that people make profit from a stock is:\nPrice appreciation: you bought it for 100 rupees, sold for 200. profit of 100 in your pocket. Dividends: company gives out profits to all owners yearly or so. But this is upto company whether they want to give away or not. Mutual Funds I growed up watching mutual funds advertisements many times, never really understood what they meant.\nA very common example used to explain it is a basket of stocks. However, I think most simple way to explain it is:\nIt is a collection of different stock (and stock like stuff). Reason for it to be a collection is so that risk is reduced.\nThis is done because investing solely in a single company is very high risk. What if one day there is some negative PR, and company stock hits rock bottom. Investing little bit in many companies will save u from this loss because profit of some other place can help you.\nYou will hear a popular saying, \u0026ldquo;Don\u0026rsquo;t put all your eggs in one basket.\u0026rdquo; This is what they\u0026rsquo;re talking about.\nPortfolio of a fund means which stocks they have in their collection. But your portfolio means what all of the investments you are holding.\nOne more thing u will hear is that there are stock market index funds. Think of these also as a collection of stocks.\nIn india we have two main stock indices:\nNifty-50: Top 50 companies in National Stock Exchange (NSE) Sensex: Top 30 companies in Bombay Stock Exchange (BSE) A Stock exchange is basically a place where people can sell or buy stocks under some party like Govt monitoring them. Governments try to keep regulations in place so that people don\u0026rsquo;t misbehave.\nAn index is actually not a mutual fund. It is just a public list for people to know how market is doing overall.\nAny mutual fund can mimic the index. So it means they keep their investments only in Nifty 50 for example. These mutual funds are called an Index fund or ETFs.\nNow you may wonder, why they are called \u0026ldquo;mutual\u0026rdquo; funds. What happens is that many people buy a mutual fund in bulk/pool.\nSo mutual means collective ownership/sharing. This means profits and losses are equally shared among all the investors.\nWho does this?\nFunds are managed by Asset Management Companies (AMC). They have their fund managers who speculate the market for returns. Since they\u0026rsquo;re doing the heavy lifting of market research and you are just putting money in, they charge you a premium.\nThis premium is called as \u0026ldquo;Expense ratio\u0026rdquo;. A 1% expense ratio means on investing 100 rupees, you have to pay 1 rupee to the AMC every year. Lastly, you will hear types of mutual funds:\nSmall cap: invest mostly in small scale companies, high risk, high reward. Mid cap: invest mostly in medium scale companies, quite stable, medium risk, medium reward. Large cap: invest mostly in large scale companies, low risk, low reward. so, in short, small scale startups can fail easily and if they boom, they reward generously too and large scale companies stock price is table so not much amount of profit, but the stock price won\u0026rsquo;t be bouncing up and down too much.\nMetrics CAGR So if you looked at any ads for mututal funds, you must have seen a metric called CAGR.\nFull form: Compound Annual Growth Rate. Basically, it is avg growth rate on a yearly basis. Growth means how much your investment increased in value. Like buying a Tata stock which was 100 rupees now became 200, so it is 100% growth.\nLet\u0026rsquo;s say u bought a mutual fund with a CAGR of 30%. But you don\u0026rsquo;t know if the fund was really lucky that one year it growed by 150% and rest of the time with 10%.\nThe problem with only looking at one metric is that you will lose insight on other important stuff. Think of it like you need to have an idea of the bigger picture of the market to make profit consistently.\nThere are a lot of metrics like:\nSharpe ratio Sharpe is basically the ratio of return over risk. So you for example, you are given two choices of buy a house.\nHouse A will give you 100% returns i.e. double the investment. It\u0026rsquo;s a very nice sea-faced apartment. House B will give you 10% returns.\nYou would buy House A, seems like a no-brainer.\nBut if something happens one day like a tsunami or something, House A will be washed way in it. So you have the risk of losing entire investment you put in. House B is in reletively safe area, no earthquakes, no natural disasters.\nWould you still buy house A now?\nSo this is what return to risk ratio does. You know how much returns you can make but you also need to know how safe investment it is.\nBeta Measures the volatility (how much a stock jumps up or down) compared to market.\nβ = 1 → moves with market β \u0026gt; 1 → more volatile than market β \u0026lt; 1 → less volatile than market β \u0026lt; 0 → moves opposite to market Capture ratio Financial Assets So I\u0026rsquo;ve been talking about stocks all the way. But there are also more types of it which are different but they work in same manner. But I think for today, just have a short overview on what they are:\n1. Equity / Stocks Ownership in a company. Profit from price appreciation and dividends. 2. Debt / Bonds Lending money to government or corporations. Earn fixed interest (aka coupon). Quite low risk, therefore low returns. 3. Cash \u0026amp; Cash Equivalents Bank deposits (like Fixed Deposits), money market instruments, treasury bills. Very low risk, highly liquid. 4. Derivatives Financial contracts whose value depends on an underlying asset. Examples: Futures, Options, Swaps. 5. Mutual Funds \u0026amp; ETFs Pooled investments in a mix of stocks, bonds, or other assets. Diversified risk. 6. Commodities Physical goods like gold, silver, oil, agricultural products. Can be invested via commodity ETFs or futures. 7. Real Estate / Property Residential, commercial, or land. Can generate rental income and capital gains. 8. Alternative Investments Hedge funds, private equity, crypto, collectibles. Typically higher risk, lower liquidity. ","permalink":"http://localhost:1313/posts/fin-for-noobs/","summary":"\u003chr\u003e\n\u003ch1 id=\"finance-for-noobs\"\u003eFinance for noobs\u003c/h1\u003e\n\u003cp\u003eI come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content is primarily relevant to India and sometimes US markets.\nThe content here is purely for educational purposes.\n\u003cstrong\u003eThis is not financial advice.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"stocks\"\u003eStocks\u003c/h2\u003e\n\u003cp\u003eStock is basically ownership of a company.\u003c/p\u003e\n\u003cp\u003eUsual ways that people make profit from a stock is:\u003c/p\u003e","title":"Finance for Noobs"},{"content":"Huffman Coding Huffman Coding is a popular algorithm used for data compression. It was developed by David A. Huffman in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\nTable of Contents Introduction How Huffman Coding Works Example of Huffman Coding Decoding with Huffman Code Advantages of Huffman Coding Applications of Huffman Coding Limitations of Huffman Coding Introduction Huffman Coding is a lossless compression algorithm, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\nHow Huffman Coding Works Step-by-Step Process Frequency Calculation:\nCount the frequency of each character in the data. Create Leaf Nodes:\nFor each character, create a leaf node containing its frequency and value. Build a Priority Queue:\nInsert all leaf nodes into a priority queue (or min-heap), sorted by frequency (smallest frequency at the top). Construct the Huffman Tree:\nRepeat the following until only one node remains in the priority queue: Extract the two nodes with the lowest frequency. Create a new node with a frequency equal to the sum of these two nodes. Set the two extracted nodes as the left and right children of the new node. Insert the new node back into the priority queue. The last remaining node is the root of the Huffman Tree. Assign Codes:\nTraverse the Huffman Tree from the root to each leaf node. Assign a binary 0 for each left edge and 1 for each right edge. The path to each character forms its Huffman Code. Example of Huffman Coding Consider the following example data:\nCharacter Frequency A 5 B 9 C 12 D 13 E 16 F 45 Step 1: Build the Huffman Tree Start with individual nodes sorted by frequency. Merge nodes with the lowest frequencies until only one node remains. The process would look like this:\nCombine A (5) and B (9) → New Node (14) Combine C (12) and D (13) → New Node (25) Combine New Node (14) and E (16) → New Node (30) Combine New Node (25) and F (45) → New Node (70) Combine New Node (30) and New Node (70) → Final Root (100) Step 2: Assign Codes After constructing the Huffman Tree, assign binary codes based on the path to each character:\nCharacter Huffman Code A 1100 B 1101 C 100 D 101 E 111 F 0 Result: The character with the highest frequency (F) has the shortest code (0), and characters with lower frequencies have longer codes.\nEncoding Example If we encode the string ABCD, it would be:\nA → 1100 B → 1101 C → 100 D → 101 Encoded string: 11001101100101\nDecoding with Huffman Code Decoding is performed by traversing the Huffman Tree:\nStart at the root. For each 0, move left; for each 1, move right. When a leaf node is reached, add the character to the output. Return to the root and repeat until the entire encoded string is decoded. Advantages of Huffman Coding Lossless Compression: No data is lost during compression. Efficiency: Saves space by assigning shorter codes to more frequent characters. Optimal for Given Frequencies: Huffman Coding guarantees the minimum number of bits required for a set of characters based on their frequencies. Limitations of Huffman Coding Fixed Frequencies: Huffman Coding is optimal for a fixed set of frequencies. Changes in frequency distribution may lead to inefficiency. Not Suitable for Real-Time Applications: For large and variable data, the tree-building process can be slow. Suboptimal for Small Files: May add overhead for very small files where the additional tree data outweighs compression benefits. Applications of Huffman Coding Data Compression:\nWidely used in file compression formats like ZIP and RAR. Multimedia Compression:\nUtilized in JPEG and MP3 formats to reduce file size. Text Compression:\nUseful in compressing text files and emails for faster transmission. Telecommunication:\nEmployed in transmission protocols to optimize data transfer efficiency. Data Transmission:\nApplied in network data packet optimization for reducing bandwidth usage. Summary Huffman Coding is a fundamental algorithm for lossless data compression, leveraging variable-length encoding to minimize storage and bandwidth requirements. By prioritizing more frequent characters with shorter codes, it efficiently reduces data size. Its applications span various fields, including file compression, multimedia, and network optimization, making it a cornerstone of efficient data handling in digital systems.\n","permalink":"http://localhost:1313/posts/huffman-coding/","summary":"\u003ch1 id=\"huffman-coding\"\u003eHuffman Coding\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eHuffman Coding\u003c/strong\u003e is a popular algorithm used for data compression. It was developed by \u003cstrong\u003eDavid A. Huffman\u003c/strong\u003e in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\u003c/p\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#how-huffman-coding-works\"\u003eHow Huffman Coding Works\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#example-of-huffman-coding\"\u003eExample of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#decoding-with-huffman-code\"\u003eDecoding with Huffman Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#advantages-of-huffman-coding\"\u003eAdvantages of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#applications-of-huffman-coding\"\u003eApplications of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#limitations-of-huffman-coding\"\u003eLimitations of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eHuffman Coding is a \u003cstrong\u003elossless compression algorithm\u003c/strong\u003e, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\u003c/p\u003e","title":"Huffman Coding"},{"content":" Embracing Git Submodules: A Journey to a Seamless Dotfiles Setup I had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was. In my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\nThe Challenge Managing dotfiles is a daunting task, especially when dealing with a complex array of configurations spread across multitudes of applications and tools. Initially, I used traditional methods like stow. But, as my setup kept evolving, I needed an even more sophisticated solution to handle not just my primary dotfiles but also various submodules, such as for Neovim.\nDiscovering Git Submodules All I heard about submodules was the scary stories of how messy it can get. However, Git submodules are a powerful feature that allows you to include and manage repositories within a repository. This feature became a game-changer in my quest for a cleaner setup. Here’s why:\n1. Seamless Integration Using Git submodules, I could integrate external repositories directly into my dotfiles repository. For e.g, integrating a Neovim configuration repository as a submodule meant that updates to plugins or configurations could be managed seamlessly without disrupting the primary dotfiles setup.\n2. Simplified Updates Managing updates with Git submodules turned out to be straightforward. With commands like git submodule update --init --recursive, I could ensure that all submodules were initialized and up-to-date with just a single command. This eliminated the need for manual updates and checks, saving time and reducing errors.\n3. Enhanced Organization By organizing my configurations into separate repositories and including them as submodules, I achieved a cleaner, more modular setup. This approach made it easier to maintain and update each component individually while keeping the main repository organized.\nThe Transition to yadm The journey didn’t stop with Git submodules. I transitioned to using yadm (Yet Another Dotfiles Manager), which enhanced the management of my dotfiles even further. Here’s how yadm fit into the picture:\n1. Advanced Dotfiles Management yadm offered advanced features tailored for dotfiles management. It provided built-in support for handling dotfiles repositories and their submodules. With commands like yadm clone, yadm pull, and yadm submodule update, I could effortlessly manage and synchronize my dotfiles across systems.\n2. Automation and Consistency Initially, it felt very taxating to think of yadm as a substitue for git with dotfiles controlling power, but after around 20 or so minutes, I was convinced that this the way I wanted to manage my dotfiles all along. No sucky symlinks, no confusion, just a simple repo which stores what I need to store without the agressive .gitignore in my home directory. Incorporating yadm into my Ansible playbook automated the setup process. The playbook cloned the dotfiles repository, executed a bootstrap script, and ensured that all submodules were initialized and updated. This automation ensured consistency across setups, reducing manual intervention and potential configuration drift.\n3. Streamlined Configuration Using yadm streamlined the configuration of my system. It handled the intricacies of managing dotfiles and submodules, allowed me to focus on enhancing my development environment rather than wrestling with configuration issues. If you read it so far, I think you should give it a fair try, it will be worth it.\nConclusion Embracing Git submodules and yadm has been a transformative experience. It has simplified the management of my dotfiles, improved organization, and enhanced the automation of my system setup. For anyone dealing with complex dotfiles setups or seeking a more efficient way to manage configurations, exploring Git submodules and yadm is highly recommended.\nThis journey has not only refined my setup but also highlighted the power of leveraging the right tools for the task at hand. The integration of Git submodules into my workflow stands as a testament to how thoughtful tooling choices can lead to a more streamlined and enjoyable development experience.\n","permalink":"http://localhost:1313/posts/git-submodules/","summary":"\u003chr\u003e\n\u003ch2 id=\"embracing-git-submodules-a-journey-to-a-seamless-dotfiles-setup\"\u003eEmbracing Git Submodules: A Journey to a Seamless Dotfiles Setup\u003c/h2\u003e\n\u003cp\u003eI had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was.\nIn my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\u003c/p\u003e","title":"Git Submodules"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"My First Post"},{"content":"Income Tax for Noobs Disclaimer This is basic educational information about taxation. It is not personal tax advice. For official guidance, always check government websites.\nSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\nSo I thought why not try to understand how it works to safeguard myself (and my money). While learning about it, I thought I can share the knowledge about the same, so here we are.\nSince I am a salaried person like most people, I\u0026rsquo;ll only discuss the same here.\nTaxable Income Part of your income which you are obliged to pay taxes on. The taxable income will eventually decide your tax slab.\nTax slabs is just rules that if you have taxable income over let\u0026rsquo;s say 7 Lakhs. then you have to pay 10% (for example) as an income tax on it. That means 70,000 will be your income tax.\nSounds like a lot. So we have some ways to reduce the tax amount you pay. Here is where you have to grind your brain for the most part.\nDeductions: Make your taxable money smaller so you pay less tax, sometimes even at a lower rate. Rebates: Reduce the final tax amount directly. Exemptions: Exclude some of your income from being taxed. How do you pay Income Tax If you are a salaried person, your employer takes a cut from your salary and pays it to the govt. This is called Tax deducted at Source (TDS)\nOn the financial year end (31 March), your employer will give you a form 16, which details all the tax paid, deductions, etc from you.\nNow it is your work to calculate whether your actual liability is less or more than the TDS cut from you. In most cases it is more.\nSo if this is the case then you only have to file in an Income Tax Return (ITR) so you can make your discounts on the tax and get some money back.\nIn the case that your TDS was lesser than the tax that should be on you. You can pay the extra as Self-assessment Tax.\nITRs are for 4 types, ITR 1 to 4. We\u0026rsquo;ll only see ITR 1 and 2 since those are for salaried peops.\nITR-1: For individuals with income up to ₹50 lakh from salary/pension, one house property, and other sources (like interest). No capital gains or foreign assets.\nITR-2: For individuals/HUFs not having business/professional income. Covers salary, multiple house properties, capital gains, foreign income/assets, and income above ₹50 lakh.\nSo this is the entire process:\nYour employer pays salary, deducts PF/other, and TDS monthly. Year ends (31 March) → employer issues Form 16. You calculate income = Salary + other sources – exemptions – deductions. You apply slab rates, add cess → find tax. Compare with TDS. Pay extra if short, get refund if excess. File ITR (ITR-1/2) by 31 July and e-verify. Dept processes, sends intimation, refunds if due. Done. ","permalink":"http://localhost:1313/posts/income-tax-for-noobs/","summary":"\u003ch1 id=\"income-tax-for-noobs\"\u003eIncome Tax for Noobs\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebasic educational information about taxation\u003c/strong\u003e. It is \u003cstrong\u003enot personal tax advice\u003c/strong\u003e. For official guidance, always check \u003cstrong\u003egovernment websites\u003c/strong\u003e.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\u003c/p\u003e","title":"Income Tax for Noobs"},{"content":" Finance for noobs I come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\nDisclaimer This content is primarily relevant to India and sometimes US markets. The content here is purely for educational purposes. This is not financial advice.\nStocks Stock is basically ownership of a company.\nUsual ways that people make profit from a stock is:\nPrice appreciation: you bought it for 100 rupees, sold for 200. profit of 100 in your pocket. Dividends: company gives out profits to all owners yearly or so. But this is upto company whether they want to give away or not. Mutual Funds I growed up watching mutual funds advertisements many times, never really understood what they meant.\nA very common example used to explain it is a basket of stocks. However, I think most simple way to explain it is:\nIt is a collection of different stock (and stock like stuff). Reason for it to be a collection is so that risk is reduced.\nThis is done because investing solely in a single company is very high risk. What if one day there is some negative PR, and company stock hits rock bottom. Investing little bit in many companies will save u from this loss because profit of some other place can help you.\nYou will hear a popular saying, \u0026ldquo;Don\u0026rsquo;t put all your eggs in one basket.\u0026rdquo; This is what they\u0026rsquo;re talking about.\nPortfolio of a fund means which stocks they have in their collection. But your portfolio means what all of the investments you are holding.\nOne more thing u will hear is that there are stock market index funds. Think of these also as a collection of stocks.\nIn india we have two main stock indices:\nNifty-50: Top 50 companies in National Stock Exchange (NSE) Sensex: Top 30 companies in Bombay Stock Exchange (BSE) A Stock exchange is basically a place where people can sell or buy stocks under some party like Govt monitoring them. Governments try to keep regulations in place so that people don\u0026rsquo;t misbehave.\nAn index is actually not a mutual fund. It is just a public list for people to know how market is doing overall.\nAny mutual fund can mimic the index. So it means they keep their investments only in Nifty 50 for example. These mutual funds are called an Index fund or ETFs.\nNow you may wonder, why they are called \u0026ldquo;mutual\u0026rdquo; funds. What happens is that many people buy a mutual fund in bulk/pool.\nSo mutual means collective ownership/sharing. This means profits and losses are equally shared among all the investors.\nWho does this?\nFunds are managed by Asset Management Companies (AMC). They have their fund managers who speculate the market for returns. Since they\u0026rsquo;re doing the heavy lifting of market research and you are just putting money in, they charge you a premium.\nThis premium is called as \u0026ldquo;Expense ratio\u0026rdquo;. A 1% expense ratio means on investing 100 rupees, you have to pay 1 rupee to the AMC every year. Lastly, you will hear types of mutual funds:\nSmall cap: invest mostly in small scale companies, high risk, high reward. Mid cap: invest mostly in medium scale companies, quite stable, medium risk, medium reward. Large cap: invest mostly in large scale companies, low risk, low reward. so, in short, small scale startups can fail easily and if they boom, they reward generously too and large scale companies stock price is table so not much amount of profit, but the stock price won\u0026rsquo;t be bouncing up and down too much.\nMetrics CAGR So if you looked at any ads for mututal funds, you must have seen a metric called CAGR.\nFull form: Compound Annual Growth Rate. Basically, it is avg growth rate on a yearly basis. Growth means how much your investment increased in value. Like buying a Tata stock which was 100 rupees now became 200, so it is 100% growth.\nLet\u0026rsquo;s say u bought a mutual fund with a CAGR of 30%. But you don\u0026rsquo;t know if the fund was really lucky that one year it growed by 150% and rest of the time with 10%.\nThe problem with only looking at one metric is that you will lose insight on other important stuff. Think of it like you need to have an idea of the bigger picture of the market to make profit consistently.\nThere are a lot of metrics like:\nSharpe ratio Sharpe is basically the ratio of return over risk. So you for example, you are given two choices of buy a house.\nHouse A will give you 100% returns i.e. double the investment. It\u0026rsquo;s a very nice sea-faced apartment. House B will give you 10% returns.\nYou would buy House A, seems like a no-brainer.\nBut if something happens one day like a tsunami or something, House A will be washed way in it. So you have the risk of losing entire investment you put in. House B is in reletively safe area, no earthquakes, no natural disasters.\nWould you still buy house A now?\nSo this is what return to risk ratio does. You know how much returns you can make but you also need to know how safe investment it is.\nBeta Measures the volatility (how much a stock jumps up or down) compared to market.\nβ = 1 → moves with market β \u0026gt; 1 → more volatile than market β \u0026lt; 1 → less volatile than market β \u0026lt; 0 → moves opposite to market Capture ratio Financial Assets So I\u0026rsquo;ve been talking about stocks all the way. But there are also more types of it which are different but they work in same manner. But I think for today, just have a short overview on what they are:\n1. Equity / Stocks Ownership in a company. Profit from price appreciation and dividends. 2. Debt / Bonds Lending money to government or corporations. Earn fixed interest (aka coupon). Quite low risk, therefore low returns. 3. Cash \u0026amp; Cash Equivalents Bank deposits (like Fixed Deposits), money market instruments, treasury bills. Very low risk, highly liquid. 4. Derivatives Financial contracts whose value depends on an underlying asset. Examples: Futures, Options, Swaps. 5. Mutual Funds \u0026amp; ETFs Pooled investments in a mix of stocks, bonds, or other assets. Diversified risk. 6. Commodities Physical goods like gold, silver, oil, agricultural products. Can be invested via commodity ETFs or futures. 7. Real Estate / Property Residential, commercial, or land. Can generate rental income and capital gains. 8. Alternative Investments Hedge funds, private equity, crypto, collectibles. Typically higher risk, lower liquidity. ","permalink":"http://localhost:1313/posts/fin-for-noobs/","summary":"\u003chr\u003e\n\u003ch1 id=\"finance-for-noobs\"\u003eFinance for noobs\u003c/h1\u003e\n\u003cp\u003eI come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content is primarily relevant to India and sometimes US markets.\nThe content here is purely for educational purposes.\n\u003cstrong\u003eThis is not financial advice.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"stocks\"\u003eStocks\u003c/h2\u003e\n\u003cp\u003eStock is basically ownership of a company.\u003c/p\u003e\n\u003cp\u003eUsual ways that people make profit from a stock is:\u003c/p\u003e","title":"Finance for Noobs"},{"content":"Huffman Coding Huffman Coding is a popular algorithm used for data compression. It was developed by David A. Huffman in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\nTable of Contents Introduction How Huffman Coding Works Example of Huffman Coding Decoding with Huffman Code Advantages of Huffman Coding Applications of Huffman Coding Limitations of Huffman Coding Introduction Huffman Coding is a lossless compression algorithm, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\nHow Huffman Coding Works Step-by-Step Process Frequency Calculation:\nCount the frequency of each character in the data. Create Leaf Nodes:\nFor each character, create a leaf node containing its frequency and value. Build a Priority Queue:\nInsert all leaf nodes into a priority queue (or min-heap), sorted by frequency (smallest frequency at the top). Construct the Huffman Tree:\nRepeat the following until only one node remains in the priority queue: Extract the two nodes with the lowest frequency. Create a new node with a frequency equal to the sum of these two nodes. Set the two extracted nodes as the left and right children of the new node. Insert the new node back into the priority queue. The last remaining node is the root of the Huffman Tree. Assign Codes:\nTraverse the Huffman Tree from the root to each leaf node. Assign a binary 0 for each left edge and 1 for each right edge. The path to each character forms its Huffman Code. Example of Huffman Coding Consider the following example data:\nCharacter Frequency A 5 B 9 C 12 D 13 E 16 F 45 Step 1: Build the Huffman Tree Start with individual nodes sorted by frequency. Merge nodes with the lowest frequencies until only one node remains. The process would look like this:\nCombine A (5) and B (9) → New Node (14) Combine C (12) and D (13) → New Node (25) Combine New Node (14) and E (16) → New Node (30) Combine New Node (25) and F (45) → New Node (70) Combine New Node (30) and New Node (70) → Final Root (100) Step 2: Assign Codes After constructing the Huffman Tree, assign binary codes based on the path to each character:\nCharacter Huffman Code A 1100 B 1101 C 100 D 101 E 111 F 0 Result: The character with the highest frequency (F) has the shortest code (0), and characters with lower frequencies have longer codes.\nEncoding Example If we encode the string ABCD, it would be:\nA → 1100 B → 1101 C → 100 D → 101 Encoded string: 11001101100101\nDecoding with Huffman Code Decoding is performed by traversing the Huffman Tree:\nStart at the root. For each 0, move left; for each 1, move right. When a leaf node is reached, add the character to the output. Return to the root and repeat until the entire encoded string is decoded. Advantages of Huffman Coding Lossless Compression: No data is lost during compression. Efficiency: Saves space by assigning shorter codes to more frequent characters. Optimal for Given Frequencies: Huffman Coding guarantees the minimum number of bits required for a set of characters based on their frequencies. Limitations of Huffman Coding Fixed Frequencies: Huffman Coding is optimal for a fixed set of frequencies. Changes in frequency distribution may lead to inefficiency. Not Suitable for Real-Time Applications: For large and variable data, the tree-building process can be slow. Suboptimal for Small Files: May add overhead for very small files where the additional tree data outweighs compression benefits. Applications of Huffman Coding Data Compression:\nWidely used in file compression formats like ZIP and RAR. Multimedia Compression:\nUtilized in JPEG and MP3 formats to reduce file size. Text Compression:\nUseful in compressing text files and emails for faster transmission. Telecommunication:\nEmployed in transmission protocols to optimize data transfer efficiency. Data Transmission:\nApplied in network data packet optimization for reducing bandwidth usage. Summary Huffman Coding is a fundamental algorithm for lossless data compression, leveraging variable-length encoding to minimize storage and bandwidth requirements. By prioritizing more frequent characters with shorter codes, it efficiently reduces data size. Its applications span various fields, including file compression, multimedia, and network optimization, making it a cornerstone of efficient data handling in digital systems.\n","permalink":"http://localhost:1313/posts/huffman-coding/","summary":"\u003ch1 id=\"huffman-coding\"\u003eHuffman Coding\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eHuffman Coding\u003c/strong\u003e is a popular algorithm used for data compression. It was developed by \u003cstrong\u003eDavid A. Huffman\u003c/strong\u003e in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\u003c/p\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#how-huffman-coding-works\"\u003eHow Huffman Coding Works\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#example-of-huffman-coding\"\u003eExample of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#decoding-with-huffman-code\"\u003eDecoding with Huffman Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#advantages-of-huffman-coding\"\u003eAdvantages of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#applications-of-huffman-coding\"\u003eApplications of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#limitations-of-huffman-coding\"\u003eLimitations of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eHuffman Coding is a \u003cstrong\u003elossless compression algorithm\u003c/strong\u003e, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\u003c/p\u003e","title":"Huffman Coding"},{"content":" Embracing Git Submodules: A Journey to a Seamless Dotfiles Setup I had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was. In my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\nThe Challenge Managing dotfiles is a daunting task, especially when dealing with a complex array of configurations spread across multitudes of applications and tools. Initially, I used traditional methods like stow. But, as my setup kept evolving, I needed an even more sophisticated solution to handle not just my primary dotfiles but also various submodules, such as for Neovim.\nDiscovering Git Submodules All I heard about submodules was the scary stories of how messy it can get. However, Git submodules are a powerful feature that allows you to include and manage repositories within a repository. This feature became a game-changer in my quest for a cleaner setup. Here’s why:\n1. Seamless Integration Using Git submodules, I could integrate external repositories directly into my dotfiles repository. For e.g, integrating a Neovim configuration repository as a submodule meant that updates to plugins or configurations could be managed seamlessly without disrupting the primary dotfiles setup.\n2. Simplified Updates Managing updates with Git submodules turned out to be straightforward. With commands like git submodule update --init --recursive, I could ensure that all submodules were initialized and up-to-date with just a single command. This eliminated the need for manual updates and checks, saving time and reducing errors.\n3. Enhanced Organization By organizing my configurations into separate repositories and including them as submodules, I achieved a cleaner, more modular setup. This approach made it easier to maintain and update each component individually while keeping the main repository organized.\nThe Transition to yadm The journey didn’t stop with Git submodules. I transitioned to using yadm (Yet Another Dotfiles Manager), which enhanced the management of my dotfiles even further. Here’s how yadm fit into the picture:\n1. Advanced Dotfiles Management yadm offered advanced features tailored for dotfiles management. It provided built-in support for handling dotfiles repositories and their submodules. With commands like yadm clone, yadm pull, and yadm submodule update, I could effortlessly manage and synchronize my dotfiles across systems.\n2. Automation and Consistency Initially, it felt very taxating to think of yadm as a substitue for git with dotfiles controlling power, but after around 20 or so minutes, I was convinced that this the way I wanted to manage my dotfiles all along. No sucky symlinks, no confusion, just a simple repo which stores what I need to store without the agressive .gitignore in my home directory. Incorporating yadm into my Ansible playbook automated the setup process. The playbook cloned the dotfiles repository, executed a bootstrap script, and ensured that all submodules were initialized and updated. This automation ensured consistency across setups, reducing manual intervention and potential configuration drift.\n3. Streamlined Configuration Using yadm streamlined the configuration of my system. It handled the intricacies of managing dotfiles and submodules, allowed me to focus on enhancing my development environment rather than wrestling with configuration issues. If you read it so far, I think you should give it a fair try, it will be worth it.\nConclusion Embracing Git submodules and yadm has been a transformative experience. It has simplified the management of my dotfiles, improved organization, and enhanced the automation of my system setup. For anyone dealing with complex dotfiles setups or seeking a more efficient way to manage configurations, exploring Git submodules and yadm is highly recommended.\nThis journey has not only refined my setup but also highlighted the power of leveraging the right tools for the task at hand. The integration of Git submodules into my workflow stands as a testament to how thoughtful tooling choices can lead to a more streamlined and enjoyable development experience.\n","permalink":"http://localhost:1313/posts/git-submodules/","summary":"\u003chr\u003e\n\u003ch2 id=\"embracing-git-submodules-a-journey-to-a-seamless-dotfiles-setup\"\u003eEmbracing Git Submodules: A Journey to a Seamless Dotfiles Setup\u003c/h2\u003e\n\u003cp\u003eI had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was.\nIn my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\u003c/p\u003e","title":"Git Submodules"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"My First Post"},{"content":"Income Tax for Noobs Disclaimer This is basic educational information about taxation. It is not personal tax advice. For official guidance, always check government websites.\nSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\nSo I thought why not try to understand how it works to safeguard myself (and my money). While learning about it, I thought I can share the knowledge about the same, so here we are.\nSince I am a salaried person like most people, I\u0026rsquo;ll only discuss the same here.\nTaxable Income Part of your income which you are obliged to pay taxes on. The taxable income will eventually decide your tax slab.\nTax slabs is just rules that if you have taxable income over let\u0026rsquo;s say 7 Lakhs. then you have to pay 10% (for example) as an income tax on it. That means 70,000 will be your income tax.\nSounds like a lot. So we have some ways to reduce the tax amount you pay. Here is where you have to grind your brain for the most part.\nDeductions: Make your taxable money smaller so you pay less tax, sometimes even at a lower rate. Rebates: Reduce the final tax amount directly. Exemptions: Exclude some of your income from being taxed. How do you pay Income Tax If you are a salaried person, your employer takes a cut from your salary and pays it to the govt. This is called Tax deducted at Source (TDS)\nOn the financial year end (31 March), your employer will give you a form 16, which details all the tax paid, deductions, etc from you.\nNow it is your work to calculate whether your actual liability is less or more than the TDS cut from you. In most cases it is more.\nSo if this is the case then you only have to file in an Income Tax Return (ITR) so you can make your discounts on the tax and get some money back.\nIn the case that your TDS was lesser than the tax that should be on you. You can pay the extra as Self-assessment Tax.\nITRs are for 4 types, ITR 1 to 4. We\u0026rsquo;ll only see ITR 1 and 2 since those are for salaried peops.\nITR-1: For individuals with income up to ₹50 lakh from salary/pension, one house property, and other sources (like interest). No capital gains or foreign assets.\nITR-2: For individuals/HUFs not having business/professional income. Covers salary, multiple house properties, capital gains, foreign income/assets, and income above ₹50 lakh.\nSo this is the entire process:\nYour employer pays salary, deducts PF/other, and TDS monthly. Year ends (31 March) → employer issues Form 16. You calculate income = Salary + other sources – exemptions – deductions. You apply slab rates, add cess → find tax. Compare with TDS. Pay extra if short, get refund if excess. File ITR (ITR-1/2) by 31 July and e-verify. Dept processes, sends intimation, refunds if due. Done. ","permalink":"http://localhost:1313/posts/income-tax-for-noobs/","summary":"\u003ch1 id=\"income-tax-for-noobs\"\u003eIncome Tax for Noobs\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebasic educational information about taxation\u003c/strong\u003e. It is \u003cstrong\u003enot personal tax advice\u003c/strong\u003e. For official guidance, always check \u003cstrong\u003egovernment websites\u003c/strong\u003e.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eSince childhood I have seen many movies where ED used to raid into places. While growing up, I saw many people struggle with understanding this, so they either hire a CA or they just file anything and make losses. (also there may be different cases)\u003c/p\u003e","title":"Income Tax for Noobs"},{"content":" Finance for noobs I come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\nDisclaimer This content is primarily relevant to India and sometimes US markets. The content here is purely for educational purposes. This is not financial advice.\nStocks Stock is basically ownership of a company.\nUsual ways that people make profit from a stock is:\nPrice appreciation: you bought it for 100 rupees, sold for 200. profit of 100 in your pocket. Dividends: company gives out profits to all owners yearly or so. But this is upto company whether they want to give away or not. Mutual Funds I growed up watching mutual funds advertisements many times, never really understood what they meant.\nA very common example used to explain it is a basket of stocks. However, I think most simple way to explain it is:\nIt is a collection of different stock (and stock like stuff). Reason for it to be a collection is so that risk is reduced.\nThis is done because investing solely in a single company is very high risk. What if one day there is some negative PR, and company stock hits rock bottom. Investing little bit in many companies will save u from this loss because profit of some other place can help you.\nYou will hear a popular saying, \u0026ldquo;Don\u0026rsquo;t put all your eggs in one basket.\u0026rdquo; This is what they\u0026rsquo;re talking about.\nPortfolio of a fund means which stocks they have in their collection. But your portfolio means what all of the investments you are holding.\nOne more thing u will hear is that there are stock market index funds. Think of these also as a collection of stocks.\nIn india we have two main stock indices:\nNifty-50: Top 50 companies in National Stock Exchange (NSE) Sensex: Top 30 companies in Bombay Stock Exchange (BSE) A Stock exchange is basically a place where people can sell or buy stocks under some party like Govt monitoring them. Governments try to keep regulations in place so that people don\u0026rsquo;t misbehave.\nAn index is actually not a mutual fund. It is just a public list for people to know how market is doing overall.\nAny mutual fund can mimic the index. So it means they keep their investments only in Nifty 50 for example. These mutual funds are called an Index fund or ETFs.\nNow you may wonder, why they are called \u0026ldquo;mutual\u0026rdquo; funds. What happens is that many people buy a mutual fund in bulk/pool.\nSo mutual means collective ownership/sharing. This means profits and losses are equally shared among all the investors.\nWho does this?\nFunds are managed by Asset Management Companies (AMC). They have their fund managers who speculate the market for returns. Since they\u0026rsquo;re doing the heavy lifting of market research and you are just putting money in, they charge you a premium.\nThis premium is called as \u0026ldquo;Expense ratio\u0026rdquo;. A 1% expense ratio means on investing 100 rupees, you have to pay 1 rupee to the AMC every year. Lastly, you will hear types of mutual funds:\nSmall cap: invest mostly in small scale companies, high risk, high reward. Mid cap: invest mostly in medium scale companies, quite stable, medium risk, medium reward. Large cap: invest mostly in large scale companies, low risk, low reward. so, in short, small scale startups can fail easily and if they boom, they reward generously too and large scale companies stock price is table so not much amount of profit, but the stock price won\u0026rsquo;t be bouncing up and down too much.\nMetrics CAGR So if you looked at any ads for mututal funds, you must have seen a metric called CAGR.\nFull form: Compound Annual Growth Rate. Basically, it is avg growth rate on a yearly basis. Growth means how much your investment increased in value. Like buying a Tata stock which was 100 rupees now became 200, so it is 100% growth.\nLet\u0026rsquo;s say u bought a mutual fund with a CAGR of 30%. But you don\u0026rsquo;t know if the fund was really lucky that one year it growed by 150% and rest of the time with 10%.\nThe problem with only looking at one metric is that you will lose insight on other important stuff. Think of it like you need to have an idea of the bigger picture of the market to make profit consistently.\nThere are a lot of metrics like:\nSharpe ratio Sharpe is basically the ratio of return over risk. So you for example, you are given two choices of buy a house.\nHouse A will give you 100% returns i.e. double the investment. It\u0026rsquo;s a very nice sea-faced apartment. House B will give you 10% returns.\nYou would buy House A, seems like a no-brainer.\nBut if something happens one day like a tsunami or something, House A will be washed way in it. So you have the risk of losing entire investment you put in. House B is in reletively safe area, no earthquakes, no natural disasters.\nWould you still buy house A now?\nSo this is what return to risk ratio does. You know how much returns you can make but you also need to know how safe investment it is.\nBeta Measures the volatility (how much a stock jumps up or down) compared to market.\nβ = 1 → moves with market β \u0026gt; 1 → more volatile than market β \u0026lt; 1 → less volatile than market β \u0026lt; 0 → moves opposite to market Capture ratio Financial Assets So I\u0026rsquo;ve been talking about stocks all the way. But there are also more types of it which are different but they work in same manner. But I think for today, just have a short overview on what they are:\n1. Equity / Stocks Ownership in a company. Profit from price appreciation and dividends. 2. Debt / Bonds Lending money to government or corporations. Earn fixed interest (aka coupon). Quite low risk, therefore low returns. 3. Cash \u0026amp; Cash Equivalents Bank deposits (like Fixed Deposits), money market instruments, treasury bills. Very low risk, highly liquid. 4. Derivatives Financial contracts whose value depends on an underlying asset. Examples: Futures, Options, Swaps. 5. Mutual Funds \u0026amp; ETFs Pooled investments in a mix of stocks, bonds, or other assets. Diversified risk. 6. Commodities Physical goods like gold, silver, oil, agricultural products. Can be invested via commodity ETFs or futures. 7. Real Estate / Property Residential, commercial, or land. Can generate rental income and capital gains. 8. Alternative Investments Hedge funds, private equity, crypto, collectibles. Typically higher risk, lower liquidity. ","permalink":"http://localhost:1313/posts/fin-for-noobs/","summary":"\u003chr\u003e\n\u003ch1 id=\"finance-for-noobs\"\u003eFinance for noobs\u003c/h1\u003e\n\u003cp\u003eI come from tech background with zero knowledge of finance. This is me documenting my journey so that maybe if you want to learn about it, it is easier for you.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003ch2 id=\"disclaimer\"\u003eDisclaimer\u003c/h2\u003e\n\u003cp\u003eThis content is primarily relevant to India and sometimes US markets.\nThe content here is purely for educational purposes.\n\u003cstrong\u003eThis is not financial advice.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"stocks\"\u003eStocks\u003c/h2\u003e\n\u003cp\u003eStock is basically ownership of a company.\u003c/p\u003e\n\u003cp\u003eUsual ways that people make profit from a stock is:\u003c/p\u003e","title":"Finance for Noobs"},{"content":"Huffman Coding Huffman Coding is a popular algorithm used for data compression. It was developed by David A. Huffman in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\nTable of Contents Introduction How Huffman Coding Works Example of Huffman Coding Decoding with Huffman Code Advantages of Huffman Coding Applications of Huffman Coding Limitations of Huffman Coding Introduction Huffman Coding is a lossless compression algorithm, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\nHow Huffman Coding Works Step-by-Step Process Frequency Calculation:\nCount the frequency of each character in the data. Create Leaf Nodes:\nFor each character, create a leaf node containing its frequency and value. Build a Priority Queue:\nInsert all leaf nodes into a priority queue (or min-heap), sorted by frequency (smallest frequency at the top). Construct the Huffman Tree:\nRepeat the following until only one node remains in the priority queue: Extract the two nodes with the lowest frequency. Create a new node with a frequency equal to the sum of these two nodes. Set the two extracted nodes as the left and right children of the new node. Insert the new node back into the priority queue. The last remaining node is the root of the Huffman Tree. Assign Codes:\nTraverse the Huffman Tree from the root to each leaf node. Assign a binary 0 for each left edge and 1 for each right edge. The path to each character forms its Huffman Code. Example of Huffman Coding Consider the following example data:\nCharacter Frequency A 5 B 9 C 12 D 13 E 16 F 45 Step 1: Build the Huffman Tree Start with individual nodes sorted by frequency. Merge nodes with the lowest frequencies until only one node remains. The process would look like this:\nCombine A (5) and B (9) → New Node (14) Combine C (12) and D (13) → New Node (25) Combine New Node (14) and E (16) → New Node (30) Combine New Node (25) and F (45) → New Node (70) Combine New Node (30) and New Node (70) → Final Root (100) Step 2: Assign Codes After constructing the Huffman Tree, assign binary codes based on the path to each character:\nCharacter Huffman Code A 1100 B 1101 C 100 D 101 E 111 F 0 Result: The character with the highest frequency (F) has the shortest code (0), and characters with lower frequencies have longer codes.\nEncoding Example If we encode the string ABCD, it would be:\nA → 1100 B → 1101 C → 100 D → 101 Encoded string: 11001101100101\nDecoding with Huffman Code Decoding is performed by traversing the Huffman Tree:\nStart at the root. For each 0, move left; for each 1, move right. When a leaf node is reached, add the character to the output. Return to the root and repeat until the entire encoded string is decoded. Advantages of Huffman Coding Lossless Compression: No data is lost during compression. Efficiency: Saves space by assigning shorter codes to more frequent characters. Optimal for Given Frequencies: Huffman Coding guarantees the minimum number of bits required for a set of characters based on their frequencies. Limitations of Huffman Coding Fixed Frequencies: Huffman Coding is optimal for a fixed set of frequencies. Changes in frequency distribution may lead to inefficiency. Not Suitable for Real-Time Applications: For large and variable data, the tree-building process can be slow. Suboptimal for Small Files: May add overhead for very small files where the additional tree data outweighs compression benefits. Applications of Huffman Coding Data Compression:\nWidely used in file compression formats like ZIP and RAR. Multimedia Compression:\nUtilized in JPEG and MP3 formats to reduce file size. Text Compression:\nUseful in compressing text files and emails for faster transmission. Telecommunication:\nEmployed in transmission protocols to optimize data transfer efficiency. Data Transmission:\nApplied in network data packet optimization for reducing bandwidth usage. Summary Huffman Coding is a fundamental algorithm for lossless data compression, leveraging variable-length encoding to minimize storage and bandwidth requirements. By prioritizing more frequent characters with shorter codes, it efficiently reduces data size. Its applications span various fields, including file compression, multimedia, and network optimization, making it a cornerstone of efficient data handling in digital systems.\n","permalink":"http://localhost:1313/posts/huffman-coding/","summary":"\u003ch1 id=\"huffman-coding\"\u003eHuffman Coding\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eHuffman Coding\u003c/strong\u003e is a popular algorithm used for data compression. It was developed by \u003cstrong\u003eDavid A. Huffman\u003c/strong\u003e in 1952 as part of his research on finding the most efficient binary code. Huffman Coding is widely used because of its simplicity and effectiveness in reducing data size without losing information.\u003c/p\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#how-huffman-coding-works\"\u003eHow Huffman Coding Works\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#example-of-huffman-coding\"\u003eExample of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#decoding-with-huffman-code\"\u003eDecoding with Huffman Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#advantages-of-huffman-coding\"\u003eAdvantages of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#applications-of-huffman-coding\"\u003eApplications of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#limitations-of-huffman-coding\"\u003eLimitations of Huffman Coding\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eHuffman Coding is a \u003cstrong\u003elossless compression algorithm\u003c/strong\u003e, meaning no data is lost during the compression process. The algorithm is based on the concept of variable-length encoding, where more frequent characters are assigned shorter codes, and less frequent characters receive longer codes. This way, Huffman Coding minimizes the total number of bits needed to represent a data set, leading to efficient compression.\u003c/p\u003e","title":"Huffman Coding"},{"content":" Embracing Git Submodules: A Journey to a Seamless Dotfiles Setup I had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was. In my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\nThe Challenge Managing dotfiles is a daunting task, especially when dealing with a complex array of configurations spread across multitudes of applications and tools. Initially, I used traditional methods like stow. But, as my setup kept evolving, I needed an even more sophisticated solution to handle not just my primary dotfiles but also various submodules, such as for Neovim.\nDiscovering Git Submodules All I heard about submodules was the scary stories of how messy it can get. However, Git submodules are a powerful feature that allows you to include and manage repositories within a repository. This feature became a game-changer in my quest for a cleaner setup. Here’s why:\n1. Seamless Integration Using Git submodules, I could integrate external repositories directly into my dotfiles repository. For e.g, integrating a Neovim configuration repository as a submodule meant that updates to plugins or configurations could be managed seamlessly without disrupting the primary dotfiles setup.\n2. Simplified Updates Managing updates with Git submodules turned out to be straightforward. With commands like git submodule update --init --recursive, I could ensure that all submodules were initialized and up-to-date with just a single command. This eliminated the need for manual updates and checks, saving time and reducing errors.\n3. Enhanced Organization By organizing my configurations into separate repositories and including them as submodules, I achieved a cleaner, more modular setup. This approach made it easier to maintain and update each component individually while keeping the main repository organized.\nThe Transition to yadm The journey didn’t stop with Git submodules. I transitioned to using yadm (Yet Another Dotfiles Manager), which enhanced the management of my dotfiles even further. Here’s how yadm fit into the picture:\n1. Advanced Dotfiles Management yadm offered advanced features tailored for dotfiles management. It provided built-in support for handling dotfiles repositories and their submodules. With commands like yadm clone, yadm pull, and yadm submodule update, I could effortlessly manage and synchronize my dotfiles across systems.\n2. Automation and Consistency Initially, it felt very taxating to think of yadm as a substitue for git with dotfiles controlling power, but after around 20 or so minutes, I was convinced that this the way I wanted to manage my dotfiles all along. No sucky symlinks, no confusion, just a simple repo which stores what I need to store without the agressive .gitignore in my home directory. Incorporating yadm into my Ansible playbook automated the setup process. The playbook cloned the dotfiles repository, executed a bootstrap script, and ensured that all submodules were initialized and updated. This automation ensured consistency across setups, reducing manual intervention and potential configuration drift.\n3. Streamlined Configuration Using yadm streamlined the configuration of my system. It handled the intricacies of managing dotfiles and submodules, allowed me to focus on enhancing my development environment rather than wrestling with configuration issues. If you read it so far, I think you should give it a fair try, it will be worth it.\nConclusion Embracing Git submodules and yadm has been a transformative experience. It has simplified the management of my dotfiles, improved organization, and enhanced the automation of my system setup. For anyone dealing with complex dotfiles setups or seeking a more efficient way to manage configurations, exploring Git submodules and yadm is highly recommended.\nThis journey has not only refined my setup but also highlighted the power of leveraging the right tools for the task at hand. The integration of Git submodules into my workflow stands as a testament to how thoughtful tooling choices can lead to a more streamlined and enjoyable development experience.\n","permalink":"http://localhost:1313/posts/git-submodules/","summary":"\u003chr\u003e\n\u003ch2 id=\"embracing-git-submodules-a-journey-to-a-seamless-dotfiles-setup\"\u003eEmbracing Git Submodules: A Journey to a Seamless Dotfiles Setup\u003c/h2\u003e\n\u003cp\u003eI had been using stow since it was simple, but I was tired of making countless number of directories. I believed there had to be a better way. and oh boy, yadm it was.\nIn my quest towards a perfect dotfiles setup in my Arch Linux and Neovim PDE (btw), Git submodules turned out to be hero I needed but not deserved. Here\u0026rsquo;s the anecdote to what happened:\u003c/p\u003e","title":"Git Submodules"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"My First Post"}]